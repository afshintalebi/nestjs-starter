var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AdminLocalStrategy.html",[0,0.589,1,2.649]],["body/injectables/AdminLocalStrategy.html",[0,0.852,1,3.831,2,1.369,3,0.17,4,0.17,5,0.152,6,3.754,7,0.299,8,1.406,9,2.047,10,3.585,11,1.138,12,3.754,13,4.041,14,0.717,15,4.32,16,1.168,17,0.014,18,0.888,19,0.451,20,0.888,21,3.189,22,4.993,23,1.675,24,2.447,25,4.32,26,1.899,27,1.057,28,2.043,29,0.606,30,3.585,31,2.536,32,4.126,33,3.585,34,1.806,35,0.814,36,3.381,37,0.17,38,0.109,39,1.97,40,1.97,41,1.885,42,2.695,43,3.754,44,1.138,45,3.754,46,0.01,47,0.01]],["title/interfaces/AdminSignInPayloadInterface.html",[48,1.593,49,3.11]],["body/interfaces/AdminSignInPayloadInterface.html",[3,0.207,4,0.207,5,0.186,7,0.366,17,0.014,18,1.147,19,0.557,20,1.011,23,1.767,26,2.183,37,0.207,46,0.011,47,0.011,48,2.119,49,5.118,50,2.933,51,4.592,52,1.66,53,4.63,54,4.17]],["title/classes/AfterAdminSignInEvent.html",[38,0.1,55,2.649]],["body/classes/AfterAdminSignInEvent.html",[3,0.186,4,0.186,5,0.167,7,0.328,11,1.609,14,0.843,16,0.965,17,0.014,18,0.734,19,0.53,20,0.734,23,1.771,37,0.186,38,0.119,40,3.255,46,0.011,47,0.011,52,1.551,55,4.074,56,1.297,57,5.125,58,3.714,59,4.716,60,2.586,61,3.087,62,3.255,63,3.408,64,4.123,65,4.123,66,4.123]],["title/classes/AfterAdminSignInEventHandler.html",[38,0.1,67,2.853]],["body/classes/AfterAdminSignInEventHandler.html",[3,0.171,4,0.171,5,0.153,7,0.301,8,1.412,11,1.145,14,0.72,16,1.173,17,0.014,18,0.892,19,0.453,20,0.892,27,1.064,29,0.607,37,0.171,38,0.109,40,3.147,41,1.898,44,1.145,46,0.01,47,0.01,55,4.6,56,1.188,60,1.488,61,2.413,62,1.984,67,4.145,68,4.652,69,3.403,70,2.632,71,5.07,72,4.145,73,4.348,74,3.633,75,3.779,76,4.517,77,4.517,78,3.779,79,3.848,80,1.984,81,3.403,82,3.403,83,3.403,84,3.403,85,3.123,86,3.403,87,2.899,88,4.348,89,1.432,90,4.348,91,2.178]],["title/classes/AfterResetPasswordEvent.html",[38,0.1,92,2.649]],["body/classes/AfterResetPasswordEvent.html",[3,0.173,4,0.173,5,0.155,7,0.305,11,1.534,14,0.865,16,0.896,17,0.014,18,0.681,19,0.544,20,0.681,23,1.807,26,2.122,37,0.173,38,0.111,46,0.01,47,0.01,52,1.478,56,1.204,57,5.18,59,4.842,60,2.655,62,3.164,63,3.165,92,3.882,93,3.147,94,3.83,95,4.003,96,4.407,97,4.407,98,4.407,99,4.407]],["title/classes/AfterResetPasswordHandler.html",[38,0.1,100,2.853]],["body/classes/AfterResetPasswordHandler.html",[3,0.178,4,0.178,5,0.16,7,0.315,8,1.454,14,0.567,16,0.924,17,0.014,18,0.703,19,0.357,20,0.703,24,1.616,26,1.748,27,1.113,29,0.618,35,0.856,37,0.178,38,0.114,46,0.01,47,0.01,56,1.242,62,2.711,68,4.268,70,2.711,71,5.181,72,4.268,77,4.651,79,3.962,80,2.074,81,3.558,82,3.558,83,3.558,84,3.558,89,1.497,92,4.681,93,3.064,95,3.298,100,4.268,101,3.95,102,4.546,103,3.031,104,3.95,105,3.558,106,4.546,107,4.546,108,4.546,109,1.984]],["title/classes/AfterSignInEvent.html",[38,0.1,110,2.649]],["body/classes/AfterSignInEvent.html",[3,0.189,4,0.189,5,0.17,7,0.333,11,1.625,14,0.849,16,0.979,17,0.014,18,0.744,19,0.534,20,0.744,23,1.776,37,0.189,38,0.121,46,0.011,47,0.011,52,1.566,56,1.316,57,5.153,58,3.769,59,4.735,60,2.596,61,3.101,62,3.273,63,3.458,64,4.184,65,4.184,66,4.184,110,4.112]],["title/classes/AfterSignInEventHandler.html",[38,0.1,111,2.853]],["body/classes/AfterSignInEventHandler.html",[3,0.174,4,0.174,5,0.156,7,0.306,8,1.428,11,1.165,14,0.728,16,1.186,17,0.014,18,0.902,19,0.458,20,0.902,27,1.082,29,0.612,37,0.174,38,0.111,41,1.93,44,1.165,46,0.01,47,0.01,56,1.209,60,1.513,61,2.44,62,2.017,68,4.691,69,3.461,70,2.662,71,5.112,72,4.191,74,3.905,75,3.843,77,4.567,78,3.843,79,3.891,80,2.017,81,3.461,82,3.461,83,3.461,84,3.461,85,3.176,86,3.461,87,2.948,89,1.456,110,4.631,111,4.191,112,4.422,113,4.422,114,4.422]],["title/classes/AllExceptionsFilter.html",[38,0.1,115,2.853]],["body/classes/AllExceptionsFilter.html",[3,0.117,4,0.117,5,0.105,7,0.207,8,1.085,11,1.168,14,0.659,16,1.074,17,0.014,18,0.817,19,0.348,20,0.817,23,1.201,27,1.085,29,0.576,35,0.563,37,0.117,38,0.075,44,0.787,46,0.008,47,0.008,56,0.817,60,1.517,70,2.022,89,2.229,103,2.956,105,2.34,115,3.184,116,5.08,117,2.598,118,5.285,119,5.846,120,3.127,121,4.434,122,2.99,123,6.54,124,3.564,125,2.99,126,4.434,127,5.285,128,5.285,129,5.846,130,2.99,131,6.769,132,4.434,133,2.99,134,5.285,135,5.846,136,1.659,137,2.34,138,2.34,139,2.34,140,2.956,141,1.865,142,2.598,143,2.221,144,2.147,145,6.769,146,2.99,147,2.34,148,2.34,149,2.99,150,4.434,151,2.99,152,2.99,153,2.99,154,2.598,155,4.434,156,2.598,157,2.598,158,2.99,159,2.99,160,2.34,161,2.99,162,1.755,163,2.598,164,2.99,165,2.99,166,2.99,167,4.434,168,2.598,169,2.34,170,2.99,171,2.147,172,2.147,173,2.598,174,2.34,175,2.99,176,2.99,177,2.99,178,2.99,179,1.023,180,2.99,181,2.147,182,2.99,183,2.99,184,2.99,185,2.99]],["title/controllers/AppController.html",[186,1.897,187,2.853]],["body/controllers/AppController.html",[3,0.209,4,0.209,5,0.188,7,0.369,8,1.609,14,0.665,17,0.014,23,1.494,27,1.304,29,0.469,35,1.004,37,0.209,38,0.134,44,1.403,46,0.011,47,0.011,186,3.139,187,4.721,188,2.669,189,4.63,190,7.442,191,2.136,192,5.328,193,4.721,194,5.712,195,4.17]],["title/modules/AppModule.html",[196,1.593,197,2.853]],["body/modules/AppModule.html",[3,0.099,4,0.099,5,0.089,8,0.619,9,1.239,14,0.316,16,0.514,17,0.015,18,0.391,19,0.199,20,0.391,27,0.619,29,0.675,35,0.477,37,0.099,38,0.064,46,0.007,47,0.007,70,1.154,91,2.391,93,1.104,103,1.687,115,2.806,124,3.569,136,1.404,137,1.98,169,1.98,172,1.817,179,0.866,181,3.429,187,3.429,188,1.957,196,1.914,197,4.743,198,1.267,199,1.404,200,1.579,201,1.579,202,1.404,203,2.438,204,1.579,205,2.199,206,2.199,207,4.09,208,4.09,209,2.438,210,1.404,211,2.53,212,3.869,213,2.53,214,3.908,215,5.369,216,2.53,217,3.908,218,3.908,219,2.53,220,4.774,221,2.53,222,2.53,223,3.908,224,2.53,225,2.53,226,2.199,227,2.199,228,2.53,229,2.199,230,3.908,231,3.908,232,2.199,233,1.404,234,2.53,235,2.53,236,3.908,237,2.53,238,2.806,239,2.53,240,1.817,241,2.53,242,1.817,243,2.53,244,2.53,245,2.53,246,2.53,247,2.53,248,2.564,249,1.579,250,2.169,251,2.53,252,3.908,253,2.53,254,2.53,255,3.908,256,1.98,257,1.98,258,2.53,259,2.53,260,2.53,261,2.53,262,2.53,263,2.53,264,2.53,265,4.666,266,2.199,267,2.53,268,2.53,269,2.53,270,4.666,271,2.53,272,2.53,273,2.53,274,2.53,275,2.53,276,2.53,277,2.53,278,2.53,279,1.98,280,1.98,281,2.199,282,2.53,283,2.806,284,2.53,285,2.53,286,2.53,287,2.53,288,2.53,289,3.908,290,2.53,291,2.53,292,2.53,293,1.98,294,2.53,295,2.53,296,2.53,297,2.53,298,3.908,299,3.908,300,2.53,301,2.53,302,2.53,303,2.53,304,2.53,305,2.53]],["title/controllers/AuthAdminController.html",[186,1.897,306,2.853]],["body/controllers/AuthAdminController.html",[3,0.115,4,0.115,5,0.103,7,0.203,8,1.069,9,2.239,13,2.564,14,0.651,16,1.061,17,0.014,18,0.807,19,0.41,20,0.807,27,1.278,28,2.308,29,0.651,32,2.104,34,1.225,35,0.552,36,2.292,37,0.115,38,0.074,40,1.336,41,1.278,44,1.375,46,0.008,47,0.008,60,1.002,61,2.183,109,2.526,143,2.899,162,1.72,181,2.104,186,2.085,188,1.467,191,2.093,193,2.104,210,1.626,306,3.136,307,2.545,308,3.795,309,3.136,310,2.104,311,2.588,312,3.398,313,2.929,314,1.992,315,2.929,316,1.905,317,2.545,318,2.545,319,2.929,320,3.75,321,2.104,322,2.929,323,2.929,324,2.929,325,3.136,326,2.545,327,2.292,328,2.292,329,2.292,330,1.827,331,2.292,332,1.399,333,2.104,334,2.929,335,1.72,336,2.545,337,2.911,338,2.545,339,2.545,340,2.104,341,2.104,342,2.104,343,2.929,344,2.929,345,1.399,346,1.626,347,1.626,348,5.221,349,6.19,350,2.292,351,1.827,352,2.929,353,2.104,354,5.787,355,2.929,356,3.858,357,2.929,358,2.929,359,2.929,360,2.929,361,2.929,362,2.929,363,2.929,364,2.929,365,2.929,366,2.929,367,2.929,368,2.292,369,2.929,370,2.545,371,2.545,372,2.292,373,2.929,374,2.545,375,2.545,376,2.545,377,2.929,378,2.545,379,2.545]],["title/injectables/AuthAdminService.html",[0,0.589,13,2.333]],["body/injectables/AuthAdminService.html",[0,0.629,2,0.892,3,0.11,4,0.11,5,0.099,7,0.195,8,1.037,9,2.215,11,1.116,13,2.489,14,0.708,16,1.153,17,0.014,18,0.877,19,0.445,20,0.877,24,1.507,26,0.828,27,1.248,28,2.274,29,0.627,35,0.53,37,0.11,38,0.071,40,1.284,44,1.343,46,0.007,47,0.007,55,1.877,60,1.941,61,2.855,74,2.987,76,3.99,79,1.877,80,1.284,85,2.022,87,1.877,89,1.679,91,3.048,120,2.842,179,1.744,248,3.169,249,1.756,309,3.044,310,2.022,311,2.555,312,3.331,314,1.933,316,2.004,321,3.044,332,1.344,340,2.022,341,2.022,345,1.344,346,1.562,347,1.562,353,2.022,380,2.446,381,4.43,382,2.446,383,5.557,384,2.896,385,2.815,386,1.482,387,2.815,388,2.815,389,2.446,390,3.783,391,2.815,392,2.994,393,1.653,394,2.446,395,2.446,396,3.683,397,2.554,398,2.446,399,2.022,400,2.446,401,2.123,402,2.446,403,2.203,404,2.446,405,2.815,406,2.446,407,2.446,408,2.815,409,1.756,410,2.446,411,2.203]],["title/injectables/AuthCommonService.html",[0,0.589,74,2.092]],["body/injectables/AuthCommonService.html",[0,0.381,2,0.48,3,0.059,4,0.059,5,0.053,7,0.105,8,0.629,9,2.276,11,0.677,14,0.751,16,1.224,17,0.014,18,1.011,19,0.459,20,0.931,23,1.608,24,1.715,26,1.661,27,1.431,28,1.715,29,0.515,35,0.285,37,0.059,38,0.038,44,1.54,46,0.004,47,0.004,53,4.705,60,1.354,61,2.689,62,1.53,74,1.354,89,2.242,120,1.982,124,2.709,136,0.84,147,2.013,179,1.147,248,2.457,249,0.944,280,2.013,311,0.582,314,1.805,316,1.925,332,0.722,384,2.105,386,0.796,392,1.97,393,0.888,397,3.015,399,1.847,401,1.68,412,5.365,413,1.314,414,2.571,415,2.571,416,3.354,417,2.571,418,3.354,419,3.354,420,2.571,421,2.571,422,3.354,423,3.354,424,1.008,425,5.144,426,1.512,427,2.571,428,1.512,429,2.571,430,1.512,431,3.43,432,3.021,433,4.697,434,3.471,435,1.512,436,3.464,437,1.512,438,2.571,439,3.006,440,1.512,441,2.638,442,1.512,443,3.43,444,1.512,445,1.512,446,1.512,447,2.571,448,1.512,449,2.571,450,1.512,451,3.957,452,1.512,453,1.512,454,1.512,455,1.512,456,1.512,457,1.714,458,1.008,459,1.512,460,1.184,461,1.086,462,1.512,463,3.354,464,1.512,465,1.714,466,2.571,467,1.314,468,1.184,469,1.512,470,2.571,471,2.013,472,1.512,473,1.512,474,3.957,475,2.915,476,2.571,477,1.314,478,1.512,479,2.571,480,2.571,481,1.512,482,1.512,483,1.512,484,1.512,485,1.512,486,1.314,487,1.512,488,1.512,489,1.512,490,1.512,491,1.512,492,2.571,493,1.512,494,2.571,495,1.314,496,1.512,497,3.354,498,1.512,499,1.512,500,1.512]],["title/controllers/AuthController.html",[186,1.897,501,2.853]],["body/controllers/AuthController.html",[3,0.096,4,0.096,5,0.087,7,0.17,8,0.935,9,2.389,14,0.756,16,1.232,17,0.014,18,0.937,19,0.476,20,0.937,21,2.121,24,1.359,27,1.484,28,2.526,29,0.648,34,1.028,35,0.463,37,0.096,38,0.062,41,1.073,44,1.597,46,0.007,47,0.007,60,0.841,61,1.96,93,1.073,109,2.997,143,2.648,186,1.174,188,1.231,191,2.431,210,1.365,308,3.321,309,2.745,310,1.766,311,2.436,312,3.105,314,1.743,316,1.741,317,2.136,318,2.136,320,3.367,321,1.766,325,3.797,326,2.136,327,1.924,330,1.534,331,1.924,332,1.174,335,1.444,336,2.136,337,2.548,338,2.136,339,2.136,340,1.766,341,1.766,345,1.174,346,1.365,347,1.365,350,1.924,351,1.534,353,2.745,368,1.924,370,4.074,371,2.136,372,1.924,374,2.136,375,2.136,376,3.321,378,2.136,379,2.136,501,2.745,502,2.136,503,2.136,504,3.669,505,3.367,506,3.822,507,2.458,508,3.525,509,5.287,510,3.822,511,2.458,512,2.458,513,2.458,514,2.458,515,3.525,516,2.458,517,2.458,518,2.458,519,2.458,520,2.458,521,3.105,522,3.822,523,2.458,524,2.136,525,1.924,526,1.766,527,2.458,528,1.639,529,2.136,530,1.766,531,2.136,532,2.745,533,1.639,534,2.136,535,2.136,536,2.136,537,2.136,538,2.458,539,2.458,540,2.136,541,2.458,542,2.458,543,2.458,544,2.458,545,2.458]],["title/modules/AuthModule.html",[196,1.593,546,2.649]],["body/modules/AuthModule.html",[1,4.26,3,0.11,4,0.11,5,0.099,13,3.752,17,0.014,21,3.547,29,0.681,34,1.174,35,0.529,36,2.198,37,0.11,38,0.071,40,1.281,44,0.74,46,0.007,47,0.007,74,3.365,80,1.281,86,2.198,87,1.873,91,1.407,93,1.226,124,2.681,136,1.559,188,2.12,196,2.042,198,1.407,199,1.559,200,1.752,201,1.752,202,1.559,203,3.177,204,1.752,209,2.64,210,1.559,212,2.821,250,3.547,265,2.441,270,2.441,293,2.198,306,3.657,460,2.198,495,2.441,501,3.657,525,2.198,546,5.3,547,2.441,548,2.441,549,2.441,550,3.987,551,4.26,552,4.26,553,4.26,554,4.26,555,4.26,556,2.809,557,2.809,558,2.198,559,2.809,560,2.809,561,2.441,562,3.312,563,2.809,564,3.677,565,2.809,566,5.092,567,4.232,568,4.232,569,2.809,570,2.809,571,2.809,572,2.809,573,2.809,574,2.809,575,2.809,576,2.198,577,2.809,578,2.809,579,2.809,580,2.809]],["title/injectables/AuthService.html",[0,0.589,21,2.205]],["body/injectables/AuthService.html",[0,0.52,2,0.698,3,0.086,4,0.086,5,0.078,7,0.152,8,0.857,9,2.342,11,0.923,14,0.757,16,1.233,17,0.014,18,0.938,19,0.476,20,0.938,21,1.944,24,1.769,26,1.463,27,1.416,28,2.365,29,0.633,35,0.415,37,0.086,38,0.055,44,1.524,46,0.006,47,0.006,60,1.702,61,2.632,62,1.004,74,2.619,76,3.415,79,2.335,80,1.004,85,1.581,87,1.467,89,1.638,92,1.467,93,1.529,95,3.21,104,1.912,109,0.96,110,1.467,120,2.491,179,1.198,248,2.897,249,1.373,309,2.516,310,1.581,311,2.335,312,2.921,314,1.598,316,1.638,321,2.516,332,1.051,340,1.581,341,1.581,345,1.051,346,1.222,347,1.222,353,1.581,381,3.791,382,1.912,383,5.026,384,2.647,386,1.844,389,1.912,390,3.316,392,2.057,393,1.292,394,1.912,395,3.044,396,3.044,397,2.897,398,1.912,399,1.581,400,1.912,401,1.102,402,1.912,404,1.912,406,3.044,407,1.912,409,1.373,410,1.912,411,3.893,434,1.722,504,3.415,505,3.134,508,3.316,515,3.316,521,2.921,530,1.581,531,1.912,532,2.516,533,1.467,534,1.912,535,1.912,536,1.912,581,1.912,582,3.503,583,2.201,584,2.201,585,2.201,586,3.503,587,2.201,588,2.201,589,2.201,590,2.201,591,2.201,592,2.201,593,2.201,594,2.201,595,2.201,596,2.201,597,2.201,598,2.201,599,2.201,600,2.201,601,2.201]],["title/classes/ChangePasswordDto.html",[38,0.1,602,2.649]],["body/classes/ChangePasswordDto.html",[3,0.174,4,0.174,5,0.156,7,0.307,14,0.73,17,0.014,19,0.459,23,1.581,24,2.08,29,0.391,37,0.174,38,0.147,46,0.01,47,0.01,52,1.485,56,1.213,171,4.201,179,2.001,191,2.345,602,3.9,603,5.685,604,3.187,605,5.685,606,5.685,607,4.437,608,3.856,609,3.473,610,4.201,611,4.578,612,4.578,613,4.578,614,4.578,615,5.443,616,4.578,617,4.578,618,4.437,619,4.082,620,4.082,621,4.082,622,4.578,623,2.959,624,3.187,625,2.606,626,4.201,627,3.187]],["title/modules/CommonModule.html",[196,1.593,207,2.649]],["body/modules/CommonModule.html",[3,0.17,4,0.17,5,0.153,17,0.014,29,0.632,35,0.817,37,0.17,38,0.109,46,0.01,47,0.01,93,1.891,196,2.593,198,2.171,199,2.406,200,2.704,201,2.704,202,2.406,203,2.704,204,4.034,207,5.318,209,3.592,210,2.406,212,3.839,250,4.402,546,4.916,550,4.6,558,3.392,561,3.766,628,3.766,629,3.766,630,3.766,631,4.916,632,4.334,633,4.334,634,4.334]],["title/classes/ConfirmResetPasswordDto.html",[38,0.1,508,2.649]],["body/classes/ConfirmResetPasswordDto.html",[3,0.162,4,0.162,5,0.145,7,0.286,14,0.787,17,0.014,19,0.495,23,1.653,24,2.509,26,1.856,29,0.363,37,0.162,38,0.14,46,0.01,47,0.01,52,1.415,56,1.128,93,2.948,95,3.502,171,4.003,191,2.53,508,3.716,604,2.965,609,3.231,610,4.003,611,4.362,612,4.362,613,4.362,614,4.362,615,5.288,616,4.362,617,4.362,619,4.215,620,4.215,621,4.215,622,4.362,623,2.752,624,2.965,625,2.424,626,2.965,627,2.965,635,5.871,636,4.128,637,4.128,638,2.965,639,4.128,640,4.128,641,4.003,642,3.587,643,2.965,644,4.128]],["title/modules/CoreModule.html",[196,1.593,208,2.649]],["body/modules/CoreModule.html",[3,0.233,4,0.233,5,0.209,17,0.014,29,0.523,35,1.118,37,0.233,38,0.149,46,0.012,47,0.012,196,2.813,198,2.973,208,4.678,645,5.935]],["title/classes/GeneralResponse.html",[38,0.1,345,1.897]],["body/classes/GeneralResponse.html",[3,0.215,4,0.215,5,0.193,7,0.38,14,0.684,17,0.014,19,0.43,29,0.483,37,0.215,38,0.138,46,0.012,47,0.012,52,1.699,54,3.929,56,1.499,191,2.199,345,3.195,351,3.422,646,5.814,647,4.766,648,6.274,649,6.274,650,5.485]],["title/interfaces/GetTimeParams.html",[48,1.593,651,2.853]],["body/interfaces/GetTimeParams.html",[3,0.202,4,0.202,5,0.182,7,0.357,17,0.014,19,0.551,20,1.194,37,0.202,46,0.011,47,0.011,48,2.069,50,2.863,52,1.636,54,4.125,651,4.627,652,4.483,653,4.038,654,4.483,655,6.394,656,6.394,657,5.759,658,5.547]],["title/classes/GetUserHandler.html",[38,0.1,659,2.853]],["body/classes/GetUserHandler.html",[3,0.172,4,0.172,5,0.155,7,0.304,8,1.422,9,2.064,11,1.157,14,0.725,16,1.181,17,0.014,18,0.898,19,0.456,20,0.898,27,1.075,28,2.066,29,0.634,37,0.172,38,0.11,44,1.157,46,0.01,47,0.01,56,1.2,70,2.65,80,2.004,120,2.2,233,2.438,316,1.446,443,2.929,659,4.173,660,5.657,661,3.155,662,6.51,663,5.095,664,3.438,665,5.793,666,3.438,667,4.392,668,4.619,669,3.438,670,4.392,671,2.438,672,3.438,673,4.392,674,2.929,675,4.392,676,3.438,677,3.438,678,4.392]],["title/classes/GetUserQuery.html",[38,0.1,668,2.649]],["body/classes/GetUserQuery.html",[3,0.201,4,0.201,5,0.18,7,0.354,11,1.348,14,0.8,16,1.04,17,0.014,18,0.791,19,0.593,20,0.791,23,1.164,37,0.201,38,0.129,46,0.011,47,0.011,52,1.628,56,1.399,59,4,60,2.395,576,4.006,668,4.274,677,5.743,679,6.083,680,4.448,681,5.118,682,5.479,683,5.118,684,5.118,685,4.448]],["title/controllers/HealthController.html",[186,1.897,686,2.853]],["body/controllers/HealthController.html",[3,0.139,4,0.139,5,0.125,7,0.245,8,1.225,9,1.587,11,0.931,14,0.725,17,0.015,27,1.422,29,0.441,35,0.666,37,0.139,38,0.089,44,1.531,46,0.009,47,0.009,120,3.166,147,4.947,181,4.174,186,2.39,188,1.77,191,2.33,193,2.538,671,1.961,686,3.595,687,3.071,688,6.321,689,6.321,690,3.534,691,3.534,692,3.534,693,3.534,694,3.534,695,3.534,696,5.005,697,6.321,698,5.005,699,5.005,700,5.005,701,2.766,702,6.321,703,3.534,704,6.321,705,3.534,706,3.534,707,3.534,708,3.534,709,5.005,710,3.534,711,3.534,712,7.124,713,3.534,714,3.534,715,3.534,716,5.005,717,5.005,718,5.005,719,3.534,720,3.534,721,3.534,722,5.005,723,3.534,724,3.534,725,5.005,726,3.534,727,3.534]],["title/modules/HealthModule.html",[196,1.593,631,2.649]],["body/modules/HealthModule.html",[3,0.216,4,0.216,5,0.194,17,0.014,29,0.637,35,1.038,37,0.216,38,0.139,46,0.012,47,0.012,188,3.36,196,2.69,198,2.759,212,3.673,631,4.473,686,5.195,701,4.311,728,5.508,729,5.508,730,6.708]],["title/injectables/IpMiddleware.html",[0,0.589,240,2.853]],["body/injectables/IpMiddleware.html",[0,0.892,2,1.467,3,0.182,4,0.182,5,0.163,7,0.32,8,1.471,14,0.577,16,0.941,17,0.014,18,0.715,19,0.363,20,0.715,27,1.132,29,0.622,35,0.872,37,0.182,38,0.116,46,0.01,47,0.01,70,2.11,103,4.452,143,3.54,144,3.323,162,3.529,172,3.323,173,4.021,240,4.317,279,4.705,731,4.021,732,5.223,733,6.677,734,5.532,735,6.142,736,4.627,737,3.621,738,5.223,739,3.085,740,4.627,741,4.627]],["title/injectables/JwtAdminAuthenticationGuard.html",[0,0.589,342,2.853]],["body/injectables/JwtAdminAuthenticationGuard.html",[0,1.016,2,1.808,3,0.224,4,0.224,5,0.201,17,0.014,29,0.603,34,2.384,35,1.074,37,0.224,38,0.143,39,2.601,40,2.601,46,0.012,47,0.012,330,3.557,342,4.919,742,4.954,743,4.954,744,4.462]],["title/injectables/JwtAdminRefreshStrategy.html",[0,0.589,551,2.649]],["body/injectables/JwtAdminRefreshStrategy.html",[0,0.782,2,1.205,3,0.149,4,0.149,5,0.134,7,0.263,8,1.289,9,1.917,10,3.287,11,1.001,14,0.657,16,1.071,17,0.014,18,0.815,19,0.413,20,0.815,26,1.119,27,0.931,28,1.873,29,0.624,30,3.287,31,2.232,33,3.287,34,1.59,35,0.716,37,0.149,38,0.096,39,1.734,40,2.977,41,1.659,42,2.372,44,1.001,46,0.009,47,0.009,89,1.735,91,1.904,179,1.301,311,1.464,314,1.734,316,1.991,332,1.816,335,2.232,384,3.095,386,2.774,392,3.094,393,2.232,397,1.904,401,1.904,403,2.976,409,2.372,424,2.535,439,3.623,441,3.513,457,2.535,458,2.535,465,2.535,551,3.513,745,4.342,746,2.976,747,3.304,748,3.784,749,3.304,750,2.731,751,3.287,752,2.731,753,3.304,754,2.731,755,3.304,756,3.802,757,3.304]],["title/injectables/JwtAdminRefreshTokenGuard.html",[0,0.589,333,2.853]],["body/injectables/JwtAdminRefreshTokenGuard.html",[0,1,2,1.761,3,0.218,4,0.218,5,0.196,17,0.014,29,0.594,34,2.323,35,1.047,37,0.218,38,0.14,39,2.534,40,3.076,46,0.012,47,0.012,314,2.534,330,4.207,333,4.843,335,3.959,751,3.466,758,4.348,759,4.348]],["title/injectables/JwtAdminStrategy.html",[0,0.589,552,2.649]],["body/injectables/JwtAdminStrategy.html",[0,0.798,2,1.242,3,0.154,4,0.154,5,0.138,7,0.271,8,1.316,9,1.947,10,3.355,11,1.032,14,0.671,16,1.093,17,0.014,18,0.831,19,0.422,20,0.831,26,1.152,27,0.959,28,1.912,29,0.63,30,2.443,31,2.3,33,2.443,34,1.637,35,0.738,37,0.154,38,0.099,39,1.786,40,1.786,41,1.709,42,2.443,44,1.032,46,0.009,47,0.009,89,1.771,91,1.962,179,1.34,311,1.508,316,1.771,332,1.87,384,3.124,386,2.831,392,3.157,393,2.3,397,1.962,401,1.962,403,3.065,409,2.443,424,2.611,439,3.669,441,3.585,457,2.611,458,2.611,465,2.611,552,3.585,745,4.411,748,3.862,750,2.813,751,3.355,752,2.813,754,2.813,757,3.403,760,3.403,761,3.916,762,3.916,763,3.065,764,3.403,765,3.403]],["title/injectables/JwtAuthenticationGuard.html",[0,0.589,528,2.649]],["body/injectables/JwtAuthenticationGuard.html",[0,1.022,2,1.824,3,0.226,4,0.226,5,0.203,17,0.014,29,0.606,34,2.405,35,1.084,37,0.226,38,0.145,39,2.624,46,0.012,47,0.012,330,3.588,528,4.591,744,4.502,766,4.998]],["title/interfaces/JwtPayloadInterface.html",[48,1.593,439,2.205]],["body/interfaces/JwtPayloadInterface.html",[3,0.188,4,0.188,5,0.168,7,0.331,17,0.014,18,1.106,19,0.581,20,1.171,23,1.829,26,2.105,37,0.188,46,0.011,47,0.011,48,1.917,50,2.653,52,1.559,439,3.407,658,4.87,767,3.741,768,4.153,769,7.156,770,7.156,771,7.156]],["title/injectables/JwtRefreshStrategy.html",[0,0.589,553,2.649]],["body/injectables/JwtRefreshStrategy.html",[0,0.804,2,1.257,3,0.156,4,0.156,5,0.14,7,0.274,8,1.327,9,1.959,10,3.383,11,1.044,14,0.676,16,1.102,17,0.014,18,0.838,19,0.425,20,0.838,26,1.166,27,0.97,28,1.928,29,0.632,30,3.383,31,2.328,33,3.383,34,1.657,35,0.747,37,0.156,38,0.1,39,1.808,41,1.73,42,2.473,44,1.044,46,0.009,47,0.009,89,1.785,179,1.356,311,1.526,314,1.808,316,1.785,332,1.893,335,2.328,384,3.135,392,3.184,393,2.328,397,1.986,401,1.986,409,2.473,424,2.643,439,3.688,441,3.615,457,2.643,458,2.643,465,2.643,553,3.615,745,4.438,746,3.103,747,3.445,748,3.894,749,3.445,750,2.847,751,3.383,752,2.847,753,3.445,754,2.847,755,3.445]],["title/injectables/JwtRefreshTokenGuard.html",[0,0.589,526,2.853]],["body/injectables/JwtRefreshTokenGuard.html",[0,1.011,2,1.792,3,0.222,4,0.222,5,0.199,17,0.014,29,0.6,34,2.363,35,1.065,37,0.222,38,0.142,39,2.578,46,0.012,47,0.012,314,2.578,330,3.526,335,4.001,526,4.894,744,4.423,758,4.423,759,4.423]],["title/injectables/JwtStrategy.html",[0,0.589,554,2.649]],["body/injectables/JwtStrategy.html",[0,0.816,2,1.284,3,0.159,4,0.159,5,0.143,7,0.28,8,1.347,9,1.981,10,3.433,11,1.067,14,0.686,16,1.119,17,0.014,18,0.851,19,0.432,20,0.851,26,1.192,27,0.991,28,1.957,29,0.637,30,2.527,31,2.378,33,2.527,34,1.693,35,0.763,37,0.159,38,0.102,39,1.848,41,1.768,42,2.527,44,1.067,46,0.01,47,0.01,89,1.812,179,1.386,311,1.559,316,1.812,332,1.934,384,3.155,392,3.231,393,2.378,397,2.029,401,2.029,409,2.527,424,2.701,439,3.721,441,3.669,457,2.701,458,2.701,465,2.701,554,3.669,748,3.952,750,2.909,751,3.433,752,2.909,754,2.909,763,3.17,764,3.52,765,3.52,772,3.52,773,4.051,774,4.051]],["title/interfaces/JwtTokensInterface.html",[48,1.593,461,2.853]],["body/interfaces/JwtTokensInterface.html",[3,0.216,4,0.216,5,0.194,7,0.381,17,0.014,19,0.526,23,1.784,37,0.216,46,0.012,47,0.012,48,2.209,50,3.057,52,1.703,61,3.147,314,3.434,461,4.818,767,4.311,775,4.787]],["title/injectables/LanguageMiddleware.html",[0,0.589,242,2.853]],["body/injectables/LanguageMiddleware.html",[0,0.876,2,1.426,3,0.177,4,0.177,5,0.159,7,0.311,8,1.444,14,0.561,16,0.915,17,0.014,18,0.696,19,0.353,20,0.696,27,1.101,29,0.58,35,0.848,37,0.177,38,0.113,46,0.01,47,0.01,70,2.052,89,1.481,103,4.392,143,3.502,144,3.231,162,2.642,179,1.539,242,4.239,279,4.619,283,5.215,401,2.253,732,5.129,734,3.521,735,6.076,737,3.521,738,5.129,739,2.999,776,3.909,777,6.587,778,4.499,779,3.521,780,4.499,781,4.499,782,4.499,783,4.499,784,4.499,785,4.499]],["title/injectables/LocalStrategy.html",[0,0.589,555,2.649]],["body/injectables/LocalStrategy.html",[0,0.86,2,1.388,3,0.172,4,0.172,5,0.154,7,0.303,8,1.419,9,2.06,10,3.616,11,1.153,12,3.804,14,0.723,16,1.178,17,0.014,18,0.896,19,0.455,20,0.896,21,4.105,22,5.037,23,1.681,24,2.46,26,1.912,27,1.071,28,2.061,29,0.609,30,2.731,31,2.57,32,3.144,33,2.731,34,1.83,35,0.825,37,0.172,38,0.11,39,1.997,41,1.91,42,2.731,43,3.804,44,1.153,45,3.804,46,0.01,47,0.01,525,3.426,555,3.865,763,3.426,786,3.804,787,4.378,788,4.378]],["title/injectables/LoggingInterceptor.html",[0,0.589,238,2.853]],["body/injectables/LoggingInterceptor.html",[0,0.591,2,0.823,3,0.102,4,0.102,5,0.091,7,0.18,8,0.975,9,1.538,11,0.684,14,0.497,16,0.81,17,0.015,18,0.75,19,0.313,20,0.616,26,0.764,27,0.635,28,1.417,29,0.601,35,0.489,37,0.102,38,0.065,41,1.133,44,0.684,46,0.007,47,0.007,60,0.888,70,1.184,72,1.864,89,2.193,105,3.797,109,1.133,124,3.263,136,1.441,138,2.032,139,2.032,140,2.657,141,1.619,142,2.256,143,1.996,144,1.864,156,2.256,160,2.032,162,3.195,163,2.256,168,4.215,169,3.119,174,3.119,179,0.888,195,2.032,238,3.484,266,3.463,283,1.864,316,1.312,325,2.862,356,2.657,734,3.797,739,1.731,789,2.256,790,3.985,791,3.985,792,3.985,793,3.985,794,3.985,795,3.985,796,3.985,797,4.851,798,2.256,799,2.596,800,2.596,801,5.385,802,5.871,803,6.197,804,2.596,805,3.985,806,3.985,807,4.851,808,3.985,809,2.596,810,2.256,811,4.851,812,2.596,813,3.463,814,2.256,815,3.463,816,2.596,817,4.851,818,4.851,819,4.851,820,3.985,821,3.985,822,2.256,823,2.596,824,2.256,825,4.215,826,4.851,827,3.985,828,3.985,829,3.985,830,3.985,831,2.596,832,3.985,833,2.596,834,2.596,835,2.596,836,2.596,837,2.596,838,2.596,839,2.596,840,2.596,841,2.596,842,2.596,843,2.596,844,2.596,845,2.596,846,2.596]],["title/injectables/ObjectIDPipe.html",[0,0.589,847,3.11]],["body/injectables/ObjectIDPipe.html",[0,0.866,2,1.402,3,0.174,4,0.174,5,0.156,7,0.306,8,1.428,11,1.165,14,0.728,16,1.186,17,0.014,18,0.902,19,0.545,20,0.902,23,1.579,27,1.082,29,0.514,35,0.833,37,0.174,38,0.111,41,1.93,44,1.165,46,0.01,47,0.01,60,1.513,70,2.017,109,2.547,179,1.513,248,3.541,249,2.759,386,2.329,401,2.215,432,3.427,779,3.461,813,3.843,815,3.843,847,4.567,848,3.843,849,5.071,850,4.422,851,4.422,852,5.836,853,6.946,854,4.422,855,5.836,856,4.422,857,4.422,858,4.422]],["title/classes/RefreshTokenDto.html",[38,0.1,312,2.333]],["body/classes/RefreshTokenDto.html",[3,0.209,4,0.209,5,0.188,7,0.369,14,0.665,17,0.014,19,0.418,23,1.494,29,0.469,37,0.209,38,0.165,46,0.011,47,0.011,52,1.669,56,1.456,61,2.98,191,2.136,312,3.859,619,4.101,620,4.101,621,4.101,625,3.128,859,5.712,860,4.63,861,5.328,862,5.328,863,6.573]],["title/interfaces/RequestInterface.html",[48,1.593,143,1.99]],["body/interfaces/RequestInterface.html",[3,0.165,4,0.165,5,0.148,7,0.29,17,0.014,19,0.573,23,1.725,29,0.56,37,0.165,39,3.102,46,0.01,47,0.01,48,2.551,50,2.328,52,1.727,143,2.822,148,4.409,162,3.993,174,5.322,283,5.095,311,2.618,316,2.239,356,2.796,739,2.796,814,4.895,824,5.909,825,6.165,864,3.283,865,5.634,866,5.634,867,6.361,868,5.909,869,6.361,870,4.194,871,4.194]],["title/interfaces/ResetPasswordData.html",[48,1.593,872,2.853]],["body/interfaces/ResetPasswordData.html",[3,0.215,4,0.215,5,0.193,7,0.38,17,0.014,19,0.525,23,1.782,24,1.95,37,0.215,46,0.012,47,0.012,48,2.199,50,3.045,52,1.699,62,3.429,95,4.173,872,4.806,873,4.766,874,4.766]],["title/classes/ResetPasswordDto.html",[38,0.1,515,2.649]],["body/classes/ResetPasswordDto.html",[3,0.207,4,0.207,5,0.186,7,0.366,14,0.659,17,0.014,19,0.415,23,1.487,26,2.09,29,0.465,37,0.207,38,0.164,46,0.011,47,0.011,52,1.66,56,1.444,191,2.119,515,4.36,604,3.795,608,4.592,619,4.08,620,4.08,621,4.08,623,3.523,625,3.103,638,3.795,641,4.697,643,3.795,875,5.683]],["title/classes/ResetPasswordEntity.html",[38,0.1,533,2.649]],["body/classes/ResetPasswordEntity.html",[3,0.196,4,0.196,5,0.176,7,0.345,14,0.621,17,0.014,19,0.391,20,0.974,23,1.433,29,0.609,37,0.196,38,0.125,39,2.272,46,0.011,47,0.011,52,1.6,56,1.361,95,3.837,141,3.932,191,1.997,329,3.898,345,2.379,346,2.765,347,2.765,351,3.108,356,3.321,386,2.623,432,2.925,533,4.202,649,5.476,876,5.476,877,4.328,878,4.981,879,4.981,880,4.526,881,4.981,882,4.981,883,4.981]],["title/classes/SignInDto.html",[38,0.1,390,2.649]],["body/classes/SignInDto.html",[3,0.195,4,0.195,5,0.175,7,0.343,14,0.784,17,0.014,19,0.493,23,1.65,24,2.454,26,2.03,29,0.437,37,0.195,38,0.158,46,0.011,47,0.011,52,1.596,56,1.356,191,2.521,390,4.192,619,4.305,620,4.305,621,4.305,623,3.308,624,3.564,625,2.914,626,3.564,627,3.564,638,3.564,641,4.515,643,3.564,884,4.312,885,4.962,886,4.962,887,4.962]],["title/interfaces/SignInPayloadInterface.html",[48,1.593,436,2.853]],["body/interfaces/SignInPayloadInterface.html",[3,0.207,4,0.207,5,0.186,7,0.366,17,0.014,18,1.147,19,0.557,20,1.011,23,1.767,26,2.183,37,0.207,46,0.011,47,0.011,48,2.119,50,2.933,52,1.66,53,4.63,54,4.17,436,4.697,888,4.592]],["title/classes/SignUpDto.html",[38,0.1,521,2.333]],["body/classes/SignUpDto.html",[3,0.167,4,0.167,5,0.15,7,0.294,14,0.799,17,0.014,18,0.99,19,0.502,23,1.667,24,2.534,26,1.884,29,0.374,37,0.167,38,0.143,46,0.01,47,0.01,52,1.443,56,1.161,171,4.081,191,2.567,521,3.337,609,3.326,610,4.081,611,4.448,612,4.448,613,4.448,614,4.448,615,5.35,616,4.448,617,4.448,619,4.265,620,4.265,621,4.265,622,4.448,623,2.833,624,3.052,625,2.495,626,3.052,627,3.052,638,3.052,641,4.081,643,4.081,889,3.692,890,4.249,891,4.249,892,4.249,893,4.249]],["title/classes/SignUpUserCommand.html",[38,0.1,894,2.649]],["body/classes/SignUpUserCommand.html",[3,0.202,4,0.202,5,0.181,7,0.356,11,1.353,14,0.802,16,1.045,17,0.014,18,0.794,19,0.504,20,0.794,29,0.452,37,0.202,38,0.129,46,0.011,47,0.011,52,1.632,56,1.404,59,4.009,60,2.399,109,3.207,521,4.442,530,3.69,685,4.465,894,4.285,895,6.094,896,4.022,897,5.138,898,4.465,899,5.138]],["title/classes/SignUpUserHandler.html",[38,0.1,900,2.853]],["body/classes/SignUpUserHandler.html",[3,0.159,4,0.159,5,0.143,7,0.281,8,1.35,9,1.984,11,1.07,14,0.688,16,1.121,17,0.014,18,1.038,19,0.433,20,0.853,24,1.961,26,1.622,27,0.994,28,1.961,29,0.618,37,0.159,38,0.102,44,1.07,46,0.01,47,0.01,56,1.11,70,2.515,80,1.853,89,1.816,109,1.773,120,2.035,179,1.39,233,2.255,316,1.816,399,2.918,468,3.18,471,3.18,661,2.918,663,4.316,664,3.18,665,5.664,666,3.18,669,3.18,671,2.255,672,3.18,674,2.709,676,3.18,894,4.476,900,3.96,901,5.439,902,5.439,903,4.792,904,4.792,905,3.531,906,4.063,907,3.18,908,4.063,909,4.063,910,4.063]],["title/classes/UpdateUserCommand.html",[38,0.1,911,2.649]],["body/classes/UpdateUserCommand.html",[3,0.185,4,0.185,5,0.166,7,0.326,11,1.602,14,0.84,16,0.958,17,0.014,18,0.728,19,0.528,20,0.728,23,1.618,29,0.415,37,0.185,38,0.118,46,0.011,47,0.011,52,1.544,56,1.287,59,4.707,60,2.581,62,3.246,63,3.383,109,3.215,896,3.687,898,4.093,911,4.055,912,6.184,913,5.766,914,4.711,915,4.711,916,4.093,917,4.093]],["title/classes/UpdateUserHandler.html",[38,0.1,918,2.853]],["body/classes/UpdateUserHandler.html",[3,0.166,4,0.166,5,0.149,7,0.293,8,1.388,9,2.027,11,1.116,14,0.707,16,1.153,17,0.014,18,0.877,19,0.445,20,0.877,27,1.037,28,2.016,29,0.627,37,0.166,38,0.107,44,1.116,46,0.01,47,0.01,56,1.157,62,1.932,70,2.587,80,1.932,89,1.394,91,2.121,109,2.475,120,2.121,179,1.449,233,2.351,316,1.394,661,3.042,663,4.438,664,3.315,665,5.733,666,3.315,669,3.315,671,2.351,672,3.315,674,2.824,676,3.315,902,5.555,903,4.927,904,4.927,905,3.68,907,3.315,911,4.552,918,4.072,919,5.555,920,4.235,921,4.235,922,4.235]],["title/classes/User.html",[38,0.1,316,1.308]],["body/classes/User.html",[3,0.132,4,0.132,5,0.118,7,0.232,14,0.912,17,0.014,18,0.873,19,0.589,20,1.174,23,1.755,24,2.007,26,1.661,29,0.497,37,0.222,38,0.084,46,0.008,47,0.008,52,1.224,53,3.521,54,2.83,56,0.916,61,2.36,89,1.103,91,1.679,93,1.463,191,2.931,233,1.86,316,1.587,431,2.235,433,4.053,443,2.235,475,4.904,505,4.053,671,1.86,923,2.407,924,5.644,925,5.644,926,6.827,927,3.351,928,3.351,929,3.351,930,3.351,931,3.351,932,3.351,933,3.351,934,3.351,935,4.696,936,3.351,937,3.351,938,3.351,939,3.461,940,2.912,941,3.772,942,3.351,943,2.912,944,3.351,945,2.407,946,2.912]],["title/injectables/UserAdminService.html",[0,0.589,947,2.649]],["body/injectables/UserAdminService.html",[0,1.041,2,1.882,3,0.233,4,0.233,5,0.209,17,0.014,29,0.523,35,1.118,37,0.233,38,0.149,46,0.012,47,0.012,947,4.678,948,5.158]],["title/controllers/UserController.html",[186,1.897,949,2.853]],["body/controllers/UserController.html",[3,0.145,4,0.145,5,0.131,7,0.256,8,1.266,9,2.23,14,0.645,16,1.052,17,0.014,18,0.8,19,0.406,20,0.8,24,1.317,27,1.266,28,2.295,29,0.649,35,0.698,37,0.145,38,0.093,41,1.617,44,1.363,46,0.009,47,0.009,60,1.267,109,2.817,143,3.616,186,1.769,188,1.856,191,2.075,311,1.426,316,2.125,320,3.716,325,3.716,327,2.899,331,2.899,332,1.769,345,1.769,346,2.056,347,2.056,350,2.899,351,2.311,368,2.899,384,2.258,503,3.219,524,3.219,528,2.47,529,3.219,532,2.661,537,3.219,540,4.496,602,4.303,949,3.716,950,3.219,951,5.963,952,4.496,953,3.705,954,5.174,955,3.705,956,3.705,957,3.705,958,3.705,959,3.705,960,3.219,961,3.219,962,3.705,963,3.705,964,3.705,965,3.705,966,3.705]],["title/classes/UserEntity.html",[38,0.1,311,1.529]],["body/classes/UserEntity.html",[3,0.184,4,0.184,5,0.165,7,0.325,14,0.94,17,0.014,18,1.039,19,0.591,20,1.165,23,1.801,26,1.978,37,0.184,38,0.118,46,0.011,47,0.011,52,1.54,53,4.194,54,3.562,56,1.283,61,2.811,311,2.335,314,3.067,967,4.079,968,5.842,969,4.694,970,4.694,971,4.694,972,4.694,973,4.694,974,4.694]],["title/modules/UserModule.html",[196,1.593,550,2.479]],["body/modules/UserModule.html",[3,0.151,4,0.151,5,0.136,17,0.014,18,0.595,29,0.672,35,0.725,37,0.151,38,0.097,46,0.009,47,0.009,80,1.755,93,1.679,188,2.66,196,2.439,198,1.927,199,2.135,200,2.4,201,2.4,202,2.135,203,3.795,204,3.795,209,3.314,210,2.135,212,3.541,232,3.343,233,2.135,250,3.951,316,1.267,384,3.395,471,3.011,550,4.813,558,3.011,564,4.616,674,2.565,939,2.763,945,3.815,947,4.746,949,4.369,960,3.343,975,3.343,976,3.343,977,3.343,978,3.847,979,3.847,980,3.847,981,3.847,982,4.157,983,3.847,984,4.157,985,3.847,986,3.847]],["title/classes/UserResetPassword.html",[38,0.1,935,2.853]],["body/classes/UserResetPassword.html",[3,0.186,4,0.186,5,0.167,7,0.328,14,0.762,17,0.014,19,0.53,23,1.622,29,0.538,37,0.265,38,0.119,46,0.011,47,0.011,52,1.551,56,1.297,89,1.562,95,3.751,191,2.45,233,2.634,433,4.388,671,2.634,926,6.417,935,4.388,939,4.388,940,4.123,941,4.782,943,4.123,987,4.853,988,3.408,989,5.872,990,4.745,991,4.745,992,4.123,993,4.123,994,3.714,995,4.123]],["title/injectables/UserService.html",[0,0.589,384,1.734]],["body/injectables/UserService.html",[0,0.342,2,0.423,3,0.052,4,0.052,5,0.047,7,0.092,8,0.565,9,2.335,11,0.608,14,0.785,16,1.229,17,0.014,18,0.973,19,0.475,20,0.935,23,1.744,24,1.6,26,1.503,27,1.512,28,2.342,29,0.544,35,0.251,37,0.052,38,0.034,44,1.555,46,0.004,47,0.004,53,1.903,60,1.244,61,1.52,62,2.33,80,0.608,89,2.14,95,3.186,109,2.639,120,1.821,124,2.542,136,0.74,179,1.829,248,2.306,249,0.831,311,1.4,314,1.659,316,2.108,332,0.636,337,1.538,345,0.636,346,0.74,347,0.74,384,1.007,386,2.37,397,3.153,401,2.558,411,1.043,431,1.538,432,1.355,433,1.657,434,1.043,443,2.424,467,1.158,468,1.043,477,2.005,486,1.158,504,1.806,505,2.611,521,2.135,530,0.957,532,0.957,602,2.424,605,2.651,606,2.005,657,1.043,668,0.889,674,0.889,677,2.387,779,2.846,872,0.957,894,0.889,907,1.806,911,0.889,913,3.779,916,1.158,917,1.158,952,2.005,961,1.158,968,1.158,989,2.651,993,2.005,996,1.158,997,2.307,998,2.307,999,2.307,1000,2.307,1001,3.636,1002,3.636,1003,2.307,1004,3.05,1005,3.05,1006,2.307,1007,1.333,1008,4.5,1009,4.828,1010,1.333,1011,2.307,1012,4.109,1013,1.333,1014,2.307,1015,1.333,1016,2.307,1017,1.333,1018,2.307,1019,1.333,1020,2.307,1021,1.333,1022,2.307,1023,1.333,1024,2.307,1025,1.333,1026,1.333,1027,1.333,1028,2.307,1029,1.333,1030,2.307,1031,1.333,1032,1.333,1033,3.636,1034,1.333,1035,1.333,1036,1.333,1037,2.307,1038,1.333,1039,1.333,1040,1.333,1041,1.333,1042,1.333,1043,1.333,1044,1.333,1045,1.333,1046,2.307,1047,1.333,1048,1.333,1049,1.333,1050,2.307,1051,1.333,1052,2.307,1053,1.333,1054,1.333,1055,3.636,1056,1.333,1057,1.333,1058,1.333,1059,1.333,1060,2.307,1061,2.307,1062,1.333,1063,1.333,1064,1.333,1065,1.333,1066,1.158,1067,1.333,1068,1.333,1069,1.333,1070,1.333,1071,1.333,1072,1.333,1073,2.307,1074,1.333,1075,1.333,1076,1.333,1077,2.307,1078,1.333,1079,1.333,1080,1.333,1081,1.333,1082,1.333]],["title/modules/UtilsModule.html",[196,1.593,250,2.205]],["body/modules/UtilsModule.html",[3,0.196,4,0.196,5,0.176,17,0.014,29,0.555,35,0.938,37,0.196,38,0.125,46,0.011,47,0.011,93,2.174,196,2.772,198,2.495,199,2.765,200,3.108,201,3.108,202,2.765,203,4.313,204,4.313,209,3.932,210,2.765,248,3.863,250,4.316,1083,4.328,1084,4.328,1085,4.328,1086,4.981,1087,4.981]],["title/injectables/UtilsService.html",[0,0.589,248,1.897]],["body/injectables/UtilsService.html",[0,0.385,2,0.485,3,0.06,4,0.06,5,0.054,7,0.106,8,0.636,9,1.799,11,0.684,14,0.852,16,1.229,17,0.014,18,0.935,19,0.497,20,0.935,23,1.729,24,0.544,27,1.606,28,1.726,29,0.532,35,0.288,37,0.06,38,0.038,44,1.799,46,0.005,47,0.005,52,0.659,54,3.448,60,0.888,89,1.868,91,1.301,120,1.301,124,2.555,136,0.849,140,1.732,141,1.62,154,1.33,157,3.465,179,0.523,248,1.24,256,1.198,257,1.198,280,1.198,281,1.33,329,1.198,345,1.616,346,0.849,347,0.849,386,0.806,397,0.766,431,2.658,432,3.79,576,1.198,610,2.43,642,1.33,648,1.33,651,2.863,653,2.033,655,2.257,656,1.33,657,1.198,658,3.207,671,0.849,682,2.033,798,1.33,880,1.865,939,1.099,1066,2.257,1088,1.33,1089,3.383,1090,3.383,1091,2.597,1092,2.597,1093,2.597,1094,2.597,1095,2.597,1096,3.987,1097,3.383,1098,3.383,1099,3.987,1100,3.987,1101,3.987,1102,3.987,1103,3.383,1104,2.597,1105,2.597,1106,5.174,1107,1.53,1108,2.597,1109,1.53,1110,2.597,1111,5.174,1112,1.53,1113,2.597,1114,6.562,1115,1.53,1116,2.597,1117,1.53,1118,2.597,1119,2.597,1120,1.53,1121,1.53,1122,1.53,1123,1.53,1124,1.53,1125,1.53,1126,1.53,1127,1.53,1128,1.53,1129,1.53,1130,3.383,1131,1.53,1132,2.597,1133,2.597,1134,1.53,1135,2.597,1136,1.53,1137,2.597,1138,1.53,1139,3.465,1140,3.987,1141,3.987,1142,3.987,1143,2.597,1144,1.53,1145,3.465,1146,1.53,1147,2.257,1148,1.53,1149,1.53,1150,1.53,1151,2.597,1152,1.53,1153,2.033,1154,1.53,1155,1.53,1156,1.53,1157,1.53,1158,1.53,1159,1.53,1160,1.53,1161,1.53,1162,1.53,1163,1.53,1164,1.53,1165,1.53,1166,1.33,1167,1.53,1168,1.53,1169,2.597,1170,1.53,1171,1.53,1172,1.53,1173,1.53,1174,1.53,1175,1.53,1176,1.53,1177,1.53,1178,1.53,1179,1.53,1180,1.53,1181,1.53,1182,2.597,1183,3.383,1184,1.53,1185,3.383,1186,1.53,1187,1.53,1188,1.53,1189,1.53,1190,1.53,1191,1.53,1192,1.53,1193,1.53,1194,1.53,1195,2.257,1196,1.53,1197,2.597,1198,1.53,1199,1.53,1200,1.53,1201,2.597,1202,2.597,1203,1.53,1204,1.53,1205,1.53]],["title/coverage.html",[1206,4.719]],["body/coverage.html",[0,1.081,1,1.26,5,0.067,6,1.643,13,1.11,17,0.014,19,0.148,21,1.049,24,0.672,38,0.188,40,2.076,46,0.005,47,0.005,48,2.285,49,1.48,51,1.643,55,1.26,57,2.827,58,2.425,67,1.358,68,2.827,69,2.425,74,0.995,92,1.26,93,1.718,94,1.643,100,1.358,101,1.643,110,1.26,111,1.358,115,1.358,116,1.643,117,1.643,140,1.26,141,1.179,143,0.947,179,0.647,186,2.399,187,1.358,189,1.643,202,1.049,238,1.358,240,1.358,242,1.358,248,0.903,306,1.358,307,1.643,311,0.728,312,1.11,316,0.622,328,1.48,333,1.358,335,1.819,337,1.26,342,1.358,345,0.903,380,1.643,384,0.825,390,1.26,412,1.643,413,1.643,436,1.358,439,1.049,461,1.358,501,1.358,502,1.643,508,1.26,515,1.26,521,1.11,526,1.358,528,1.26,533,1.26,551,1.26,552,1.26,553,1.26,554,1.26,555,1.26,562,1.48,581,1.643,602,1.26,603,1.643,604,2.827,635,1.643,646,1.643,647,1.643,651,1.358,652,1.643,653,1.48,654,1.643,659,1.358,660,1.643,661,2.827,668,1.26,679,1.643,680,1.643,686,1.358,687,1.643,731,1.643,737,2.425,742,1.643,743,1.643,745,2.827,746,2.425,758,2.425,759,2.425,760,1.643,766,1.643,767,2.425,768,1.643,772,1.643,775,1.643,776,1.643,786,1.643,789,1.643,847,1.48,848,1.643,859,1.643,860,1.643,864,1.48,872,1.358,873,1.643,874,1.643,875,1.643,876,1.643,877,1.643,880,1.358,884,1.643,888,1.643,889,1.643,894,1.26,895,1.643,896,2.425,900,1.358,901,1.643,911,1.26,912,1.643,918,1.358,919,1.643,923,2.225,935,1.358,945,1.358,947,1.26,948,1.643,949,1.358,950,1.643,967,1.643,982,1.48,984,1.48,987,2.225,988,2.225,994,1.48,996,1.643,1088,1.643,1153,1.48,1166,1.643,1195,7.085,1206,1.643,1207,1.89,1208,1.89,1209,1.89,1210,5.947,1211,6.49,1212,3.098,1213,7.288,1214,1.643,1215,6.847,1216,7.288,1217,3.098,1218,1.89,1219,1.89,1220,1.89,1221,1.643,1222,1.643,1223,1.89,1224,1.89,1225,1.643,1226,1.89,1227,3.932,1228,1.643,1229,1.89,1230,1.89,1231,1.643,1232,1.643,1233,1.643,1234,4.365,1235,1.643,1236,1.643,1237,1.89,1238,1.89,1239,1.89,1240,1.89,1241,1.89]],["title/dependencies.html",[199,2.654,1242,2.88]],["body/dependencies.html",[17,0.014,31,3.664,32,2.9,34,1.688,35,0.761,38,0.138,46,0.01,47,0.01,80,1.842,136,2.241,137,3.16,139,3.16,162,2.371,172,2.9,199,2.241,226,3.509,227,4.771,229,3.509,233,2.241,256,3.16,257,3.16,351,2.519,460,3.16,625,2.371,658,2.9,671,2.241,701,3.16,739,2.692,751,2.519,810,3.509,822,3.509,1139,3.509,1145,3.509,1147,3.509,1243,4.038,1244,4.038,1245,4.038,1246,4.038,1247,4.038,1248,4.038,1249,4.038,1250,4.038,1251,5.491,1252,4.038,1253,7.003,1254,5.491,1255,4.038,1256,5.491,1257,4.038,1258,4.038,1259,4.038,1260,4.038,1261,4.038,1262,4.038,1263,4.038,1264,4.038,1265,4.038,1266,4.038,1267,4.038,1268,4.038,1269,4.038,1270,4.038,1271,4.038,1272,4.038,1273,4.038,1274,4.038,1275,4.038,1276,4.038,1277,4.038,1278,4.038,1279,4.038,1280,4.038,1281,4.038,1282,4.038,1283,4.038,1284,4.038]],["title/miscellaneous/enumerations.html",[1285,1.839,1286,4.154]],["body/miscellaneous/enumerations.html",[7,0.42,17,0.013,46,0.012,47,0.012,432,3.567,1285,3.372,1286,5.278,1287,7.112,1288,6.074,1289,6.074,1290,7.112]],["title/miscellaneous/functions.html",[1285,1.839,1291,4.154]],["body/miscellaneous/functions.html",[7,0.398,16,1.169,17,0.013,18,0.889,19,0.451,20,0.889,46,0.012,47,0.012,124,3.881,138,4.502,202,4.091,1227,4.502,1228,5.984,1285,3.193,1291,4.998,1292,5.984,1293,5.752,1294,5.752,1295,5.752]],["title/index.html",[7,0.229,1296,3.314,1297,3.314]],["body/index.html",[17,0.013,46,0.013,47,0.013]],["title/modules.html",[198,2.72]],["body/modules.html",[17,0.012,46,0.012,47,0.012,197,3.939,198,2.747,207,3.657,208,3.657,250,3.045,546,3.657,550,3.422,631,3.657,1298,7.708,1299,7.708,1300,7.708,1301,7.938,1302,6.691,1303,6.691]],["title/overview.html",[1304,4.719]],["body/overview.html",[1,3.812,2,1.088,13,3.358,17,0.014,21,3.174,46,0.009,47,0.009,50,1.904,56,0.938,74,3.011,93,1.497,188,1.718,196,1.376,197,4.928,198,1.718,199,1.904,200,2.141,201,2.141,202,1.904,203,2.141,204,2.141,205,2.981,206,2.981,207,5.083,208,3.812,209,3.058,210,1.904,248,3.373,250,4.232,384,3.083,546,5.395,547,2.981,548,2.981,549,2.981,550,4.709,551,3.812,552,3.812,553,3.812,554,3.812,555,3.812,628,2.981,629,2.981,630,2.981,631,3.812,947,3.812,975,2.981,976,2.981,977,2.981,1083,2.981,1084,2.981,1085,2.981,1225,2.981,1304,2.981,1305,4.901,1306,3.431,1307,3.431]],["title/properties.html",[52,1.214,1242,2.88]],["body/properties.html",[17,0.014,46,0.012,47,0.012,52,1.542,193,4.362,356,4.05,1308,6.074,1309,6.074,1310,6.074,1311,6.074]],["title/miscellaneous/typealiases.html",[1285,1.839,1312,4.781]],["body/miscellaneous/typealiases.html",[7,0.389,17,0.012,19,0.533,46,0.012,47,0.012,443,4.531,682,4.404,864,4.404,868,5.905,913,5.319,923,4.042,941,5.319,987,4.042,988,4.881,992,5.905,1285,3.124,1313,5.627,1314,5.627,1315,5.627,1316,6.796,1317,4.89,1318,4.89,1319,5.627]],["title/miscellaneous/variables.html",[1285,1.839,1320,4.154]],["body/miscellaneous/variables.html",[7,0.203,9,1.657,17,0.014,19,0.555,23,1.409,40,1.339,44,1.152,46,0.008,47,0.008,67,2.108,89,1.721,91,2.902,100,2.108,109,1.909,111,2.108,124,1.546,140,3.486,141,2.729,148,4.534,160,2.298,179,1.496,194,2.551,195,2.298,293,3.423,311,1.13,320,2.108,328,3.423,337,2.916,372,2.298,397,2.191,431,5.028,432,4.428,562,3.423,659,2.108,801,2.551,849,2.551,880,3.141,900,2.108,918,2.108,923,2.108,945,3.141,946,2.551,982,3.423,984,3.423,987,2.108,988,3.141,994,3.423,995,2.551,1153,3.423,1214,2.551,1221,2.551,1222,2.551,1227,2.298,1231,3.801,1232,3.801,1233,3.801,1234,2.551,1235,2.551,1236,3.801,1285,1.629,1292,4.543,1317,2.551,1318,2.551,1320,2.551,1321,6.196,1322,5.228,1323,2.936,1324,2.936,1325,2.936,1326,2.936,1327,2.936,1328,2.936,1329,2.936,1330,2.936,1331,2.936,1332,2.936,1333,2.936,1334,2.936,1335,2.936,1336,2.936,1337,2.936,1338,2.936,1339,2.936,1340,2.936,1341,5.794,1342,2.936,1343,4.374,1344,4.374,1345,2.936,1346,2.936,1347,2.936,1348,2.936,1349,2.936,1350,2.936,1351,2.936,1352,2.936,1353,2.936,1354,2.936,1355,2.936,1356,2.936,1357,4.374,1358,2.936,1359,2.936,1360,2.936,1361,2.936]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"injectables/AdminLocalStrategy.html":{},"interfaces/AdminSignInPayloadInterface.html":{},"classes/AfterAdminSignInEvent.html":{},"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterResetPasswordEvent.html":{},"classes/AfterResetPasswordHandler.html":{},"classes/AfterSignInEvent.html":{},"classes/AfterSignInEventHandler.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthAdminController.html":{},"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"modules/CommonModule.html":{},"classes/ConfirmResetPasswordDto.html":{},"modules/CoreModule.html":{},"classes/GeneralResponse.html":{},"interfaces/GetTimeParams.html":{},"classes/GetUserHandler.html":{},"classes/GetUserQuery.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/IpMiddleware.html":{},"injectables/JwtAdminAuthenticationGuard.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminRefreshTokenGuard.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtAuthenticationGuard.html":{},"interfaces/JwtPayloadInterface.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtRefreshTokenGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtTokensInterface.html":{},"injectables/LanguageMiddleware.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ObjectIDPipe.html":{},"classes/RefreshTokenDto.html":{},"interfaces/RequestInterface.html":{},"interfaces/ResetPasswordData.html":{},"classes/ResetPasswordDto.html":{},"classes/ResetPasswordEntity.html":{},"classes/SignInDto.html":{},"interfaces/SignInPayloadInterface.html":{},"classes/SignUpDto.html":{},"classes/SignUpUserCommand.html":{},"classes/SignUpUserHandler.html":{},"classes/UpdateUserCommand.html":{},"classes/UpdateUserHandler.html":{},"classes/User.html":{},"injectables/UserAdminService.html":{},"controllers/UserController.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"classes/UserResetPassword.html":{},"injectables/UserService.html":{},"modules/UtilsModule.html":{},"injectables/UtilsService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1195,"title":{},"body":{"injectables/UtilsService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1308,"title":{},"body":{"properties.html":{}}}],["0.0.9",{"_index":1279,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":1282,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":1270,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1269,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1276,"title":{},"body":{"dependencies.html":{}}}],["0.9",{"_index":724,"title":{},"body":{"controllers/HealthController.html":{}}}],["0/1",{"_index":1216,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1223,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1218,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":1224,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1210,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1213,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1211,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1217,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1220,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1212,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1219,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":194,"title":{},"body":{"controllers/AppController.html":{},"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":1278,"title":{},"body":{"dependencies.html":{}}}],["1.4.0",{"_index":1264,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1230,"title":{},"body":{"coverage.html":{}}}],["1/19",{"_index":1226,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":1239,"title":{},"body":{"coverage.html":{}}}],["10.0.0",{"_index":1253,"title":{},"body":{"dependencies.html":{}}}],["10.0.1",{"_index":1254,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":1257,"title":{},"body":{"dependencies.html":{}}}],["10.1.0",{"_index":1255,"title":{},"body":{"dependencies.html":{}}}],["10.1.1",{"_index":1247,"title":{},"body":{"dependencies.html":{}}}],["10.3.1",{"_index":1275,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1229,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":1184,"title":{},"body":{"injectables/UtilsService.html":{}}}],["100000",{"_index":1187,"title":{},"body":{"injectables/UtilsService.html":{}}}],["1024",{"_index":712,"title":{},"body":{"controllers/HealthController.html":{}}}],["15m",{"_index":580,"title":{},"body":{"modules/AuthModule.html":{}}}],["16",{"_index":1166,"title":{},"body":{"injectables/UtilsService.html":{},"coverage.html":{}}}],["17.9.2",{"_index":1272,"title":{},"body":{"dependencies.html":{}}}],["2.0.0",{"_index":1252,"title":{},"body":{"dependencies.html":{}}}],["2.29.4",{"_index":1273,"title":{},"body":{"dependencies.html":{}}}],["2/3",{"_index":1238,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":1306,"title":{},"body":{"overview.html":{}}}],["200",{"_index":711,"title":{},"body":{"controllers/HealthController.html":{}}}],["201",{"_index":355,"title":{},"body":{"controllers/AuthAdminController.html":{}}}],["24",{"_index":1307,"title":{},"body":{"overview.html":{}}}],["250",{"_index":725,"title":{},"body":{"controllers/HealthController.html":{}}}],["3.0.0",{"_index":1251,"title":{},"body":{"dependencies.html":{}}}],["3.0.1",{"_index":1259,"title":{},"body":{"dependencies.html":{}}}],["3.3.0",{"_index":1283,"title":{},"body":{"dependencies.html":{}}}],["3000",{"_index":714,"title":{},"body":{"controllers/HealthController.html":{}}}],["32",{"_index":1143,"title":{},"body":{"injectables/UtilsService.html":{}}}],["32).tostring('hex",{"_index":1162,"title":{},"body":{"injectables/UtilsService.html":{}}}],["32*2",{"_index":1174,"title":{},"body":{"injectables/UtilsService.html":{}}}],["4",{"_index":1182,"title":{},"body":{"injectables/UtilsService.html":{}}}],["4.0.1",{"_index":1277,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":1261,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":360,"title":{},"body":{"controllers/AuthAdminController.html":{}}}],["401",{"_index":362,"title":{},"body":{"controllers/AuthAdminController.html":{}}}],["404",{"_index":365,"title":{},"body":{"controllers/AuthAdminController.html":{}}}],["5",{"_index":1225,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["5.1.0",{"_index":1265,"title":{},"body":{"dependencies.html":{}}}],["5.2.3",{"_index":1267,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":610,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ConfirmResetPasswordDto.html":{},"classes/SignUpDto.html":{},"injectables/UtilsService.html":{}}}],["6.10.2",{"_index":1249,"title":{},"body":{"dependencies.html":{}}}],["6.3.0",{"_index":1245,"title":{},"body":{"dependencies.html":{}}}],["64",{"_index":1142,"title":{},"body":{"injectables/UtilsService.html":{}}}],["66",{"_index":1237,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":1305,"title":{},"body":{"overview.html":{}}}],["7.0.4",{"_index":1260,"title":{},"body":{"dependencies.html":{}}}],["7.3.1",{"_index":1274,"title":{},"body":{"dependencies.html":{}}}],["7.59.3",{"_index":1262,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1284,"title":{},"body":{"dependencies.html":{}}}],["90",{"_index":719,"title":{},"body":{"controllers/HealthController.html":{}}}],["9000",{"_index":269,"title":{},"body":{"modules/AppModule.html":{}}}],["9999",{"_index":1186,"title":{},"body":{"injectables/UtilsService.html":{}}}],["999999",{"_index":1188,"title":{},"body":{"injectables/UtilsService.html":{}}}],["_id",{"_index":993,"title":{},"body":{"classes/UserResetPassword.html":{},"injectables/UserService.html":{}}}],["_id.tohexstring",{"_index":1081,"title":{},"body":{"injectables/UserService.html":{}}}],["acceptlanguageresolver",{"_index":252,"title":{},"body":{"modules/AppModule.html":{}}}],["adapter",{"_index":823,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["add(plusamount",{"_index":1196,"title":{},"body":{"injectables/UtilsService.html":{}}}],["admin",{"_index":40,"title":{},"body":{"injectables/AdminLocalStrategy.html":{},"classes/AfterAdminSignInEvent.html":{},"classes/AfterAdminSignInEventHandler.html":{},"controllers/AuthAdminController.html":{},"injectables/AuthAdminService.html":{},"modules/AuthModule.html":{},"injectables/JwtAdminAuthenticationGuard.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminRefreshTokenGuard.html":{},"injectables/JwtAdminStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["admin.strategy",{"_index":571,"title":{},"body":{"modules/AuthModule.html":{}}}],["admin.strategy.ts",{"_index":760,"title":{},"body":{"injectables/JwtAdminStrategy.html":{},"coverage.html":{}}}],["admin.strategy.ts:17",{"_index":762,"title":{},"body":{"injectables/JwtAdminStrategy.html":{}}}],["admin.strategy.ts:9",{"_index":761,"title":{},"body":{"injectables/JwtAdminStrategy.html":{}}}],["admin_controller_key",{"_index":328,"title":{},"body":{"controllers/AuthAdminController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["admin_controller_key}/auth",{"_index":367,"title":{},"body":{"controllers/AuthAdminController.html":{}}}],["adminlocalstrategy",{"_index":1,"title":{"injectables/AdminLocalStrategy.html":{}},"body":{"injectables/AdminLocalStrategy.html":{},"modules/AuthModule.html":{},"coverage.html":{},"overview.html":{}}}],["adminrefreshtoken",{"_index":475,"title":{},"body":{"injectables/AuthCommonService.html":{},"classes/User.html":{}}}],["adminsigninpayloadinterface",{"_index":49,"title":{"interfaces/AdminSignInPayloadInterface.html":{}},"body":{"interfaces/AdminSignInPayloadInterface.html":{},"coverage.html":{}}}],["afteradminsigninevent",{"_index":55,"title":{"classes/AfterAdminSignInEvent.html":{}},"body":{"classes/AfterAdminSignInEvent.html":{},"classes/AfterAdminSignInEventHandler.html":{},"injectables/AuthAdminService.html":{},"coverage.html":{}}}],["afteradminsigninevent(user._id.tohexstring",{"_index":408,"title":{},"body":{"injectables/AuthAdminService.html":{}}}],["afteradminsignineventhandler",{"_index":67,"title":{"classes/AfterAdminSignInEventHandler.html":{}},"body":{"classes/AfterAdminSignInEventHandler.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["afterresetpasswordevent",{"_index":92,"title":{"classes/AfterResetPasswordEvent.html":{}},"body":{"classes/AfterResetPasswordEvent.html":{},"classes/AfterResetPasswordHandler.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["afterresetpasswordevent(userid",{"_index":598,"title":{},"body":{"injectables/AuthService.html":{}}}],["afterresetpasswordhandler",{"_index":100,"title":{"classes/AfterResetPasswordHandler.html":{}},"body":{"classes/AfterResetPasswordHandler.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["aftersigninevent",{"_index":110,"title":{"classes/AfterSignInEvent.html":{}},"body":{"classes/AfterSignInEvent.html":{},"classes/AfterSignInEventHandler.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["aftersigninevent(user._id.tohexstring",{"_index":594,"title":{},"body":{"injectables/AuthService.html":{}}}],["aftersignineventhandler",{"_index":111,"title":{"classes/AfterSignInEventHandler.html":{}},"body":{"classes/AfterSignInEventHandler.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["aliases",{"_index":1313,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allexceptionsfilter",{"_index":115,"title":{"classes/AllExceptionsFilter.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["any).response.message",{"_index":151,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["api",{"_index":195,"title":{},"body":{"controllers/AppController.html":{},"injectables/LoggingInterceptor.html":{},"miscellaneous/variables.html":{}}}],["apibearerauth",{"_index":348,"title":{},"body":{"controllers/AuthAdminController.html":{}}}],["apibearerauth()@get('sign",{"_index":322,"title":{},"body":{"controllers/AuthAdminController.html":{}}}],["apibearerauth()@useguards(jwtadminrefreshtokenguard)@post('refresh",{"_index":313,"title":{},"body":{"controllers/AuthAdminController.html":{}}}],["apiproperty",{"_index":649,"title":{},"body":{"classes/GeneralResponse.html":{},"classes/ResetPasswordEntity.html":{}}}],["apiproperty({description",{"_index":878,"title":{},"body":{"classes/ResetPasswordEntity.html":{}}}],["apiresponse",{"_index":349,"title":{},"body":{"controllers/AuthAdminController.html":{}}}],["apitags",{"_index":350,"title":{},"body":{"controllers/AuthAdminController.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["apitags('admin",{"_index":352,"title":{},"body":{"controllers/AuthAdminController.html":{}}}],["apitags('client",{"_index":537,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["app",{"_index":148,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/RequestInterface.html":{},"miscellaneous/variables.html":{}}}],["app.controller",{"_index":221,"title":{},"body":{"modules/AppModule.html":{}}}],["app.enablecors",{"_index":1328,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.enableversioning",{"_index":1334,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.register(fastifycsrf",{"_index":1349,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.register(helmet",{"_index":1337,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.useglobalpipes",{"_index":1329,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app_filter",{"_index":230,"title":{},"body":{"modules/AppModule.html":{}}}],["app_interceptor",{"_index":231,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":187,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["append",{"_index":865,"title":{},"body":{"interfaces/RequestInterface.html":{}}}],["apply(ipmiddleware",{"_index":301,"title":{},"body":{"modules/AppModule.html":{}}}],["applyconfigs",{"_index":1231,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["applymiddlewares",{"_index":1232,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["applyswagger",{"_index":1233,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["appmodule",{"_index":197,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["argumentmetadata",{"_index":853,"title":{},"body":{"injectables/ObjectIDPipe.html":{}}}],["argumentshost",{"_index":129,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["async",{"_index":9,"title":{},"body":{"injectables/AdminLocalStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthAdminController.html":{},"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GetUserHandler.html":{},"controllers/HealthController.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"classes/SignUpUserHandler.html":{},"classes/UpdateUserHandler.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/UtilsService.html":{},"miscellaneous/variables.html":{}}}],["auth",{"_index":353,"title":{},"body":{"controllers/AuthAdminController.html":{},"injectables/AuthAdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["auth.guard",{"_index":344,"title":{},"body":{"controllers/AuthAdminController.html":{}}}],["auth.guard.ts",{"_index":743,"title":{},"body":{"injectables/JwtAdminAuthenticationGuard.html":{},"coverage.html":{}}}],["auth/auth.module",{"_index":634,"title":{},"body":{"modules/CommonModule.html":{}}}],["authadmincontroller",{"_index":306,"title":{"controllers/AuthAdminController.html":{}},"body":{"controllers/AuthAdminController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authadminservice",{"_index":13,"title":{"injectables/AuthAdminService.html":{}},"body":{"injectables/AdminLocalStrategy.html":{},"controllers/AuthAdminController.html":{},"injectables/AuthAdminService.html":{},"modules/AuthModule.html":{},"coverage.html":{},"overview.html":{}}}],["authcommonservice",{"_index":74,"title":{"injectables/AuthCommonService.html":{}},"body":{"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterSignInEventHandler.html":{},"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["authcontroller",{"_index":501,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":330,"title":{},"body":{"controllers/AuthAdminController.html":{},"controllers/AuthController.html":{},"injectables/JwtAdminAuthenticationGuard.html":{},"injectables/JwtAdminRefreshTokenGuard.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshTokenGuard.html":{}}}],["authguard('jwt",{"_index":744,"title":{},"body":{"injectables/JwtAdminAuthenticationGuard.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshTokenGuard.html":{}}}],["authmodule",{"_index":546,"title":{"modules/AuthModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1311,"title":{},"body":{"properties.html":{}}}],["authservice",{"_index":21,"title":{"injectables/AuthService.html":{}},"body":{"injectables/AdminLocalStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":1303,"title":{},"body":{"modules.html":{}}}],["await",{"_index":397,"title":{},"body":{"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"injectables/AuthService.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{},"injectables/UtilsService.html":{},"miscellaneous/variables.html":{}}}],["axios",{"_index":1263,"title":{},"body":{"dependencies.html":{}}}],["bad",{"_index":361,"title":{},"body":{"controllers/AuthAdminController.html":{}}}],["badrequestexception",{"_index":779,"title":{},"body":{"injectables/LanguageMiddleware.html":{},"injectables/ObjectIDPipe.html":{},"injectables/UserService.html":{}}}],["badrequestexception('accept",{"_index":782,"title":{},"body":{"injectables/LanguageMiddleware.html":{}}}],["badrequestexception(`value",{"_index":857,"title":{},"body":{"injectables/ObjectIDPipe.html":{}}}],["badrequestexception(this.utilsservice.t('errors.email_exists",{"_index":1053,"title":{},"body":{"injectables/UserService.html":{}}}],["bcrypehash",{"_index":1091,"title":{},"body":{"injectables/UtilsService.html":{}}}],["bcrypehash(value",{"_index":1108,"title":{},"body":{"injectables/UtilsService.html":{}}}],["bcrypt",{"_index":1147,"title":{},"body":{"injectables/UtilsService.html":{},"dependencies.html":{}}}],["bcrypt.compare(value",{"_index":1160,"title":{},"body":{"injectables/UtilsService.html":{}}}],["bcrypt.gensalt",{"_index":1157,"title":{},"body":{"injectables/UtilsService.html":{}}}],["bcrypt.hash(value",{"_index":1159,"title":{},"body":{"injectables/UtilsService.html":{}}}],["body",{"_index":325,"title":{},"body":{"controllers/AuthAdminController.html":{},"controllers/AuthController.html":{},"injectables/LoggingInterceptor.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":54,"title":{},"body":{"interfaces/AdminSignInPayloadInterface.html":{},"classes/GeneralResponse.html":{},"interfaces/GetTimeParams.html":{},"interfaces/SignInPayloadInterface.html":{},"classes/User.html":{},"classes/UserEntity.html":{},"injectables/UtilsService.html":{}}}],["bootstrap",{"_index":202,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/UserModule.html":{},"modules/UtilsModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1301,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1298,"title":{},"body":{"modules.html":{}}}],["buffer.from(currentvaluehash",{"_index":1180,"title":{},"body":{"injectables/UtilsService.html":{}}}],["buffer.from(originalvaluehash",{"_index":1179,"title":{},"body":{"injectables/UtilsService.html":{}}}],["build",{"_index":1356,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bytes",{"_index":1167,"title":{},"body":{"injectables/UtilsService.html":{}}}],["cache",{"_index":1266,"title":{},"body":{"dependencies.html":{}}}],["cachemodule",{"_index":225,"title":{},"body":{"modules/AppModule.html":{}}}],["cachemodule.register",{"_index":291,"title":{},"body":{"modules/AppModule.html":{}}}],["call",{"_index":837,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["called",{"_index":805,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["callhandler",{"_index":803,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["catch",{"_index":119,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["catch(exception",{"_index":126,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["changepassword",{"_index":951,"title":{},"body":{"controllers/UserController.html":{}}}],["changepassword(undefined",{"_index":953,"title":{},"body":{"controllers/UserController.html":{}}}],["changepassworddto",{"_index":602,"title":{"classes/ChangePasswordDto.html":{}},"body":{"classes/ChangePasswordDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["characters",{"_index":611,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ConfirmResetPasswordDto.html":{},"classes/SignUpDto.html":{}}}],["check",{"_index":147,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthCommonService.html":{},"controllers/HealthController.html":{}}}],["checkdb",{"_index":688,"title":{},"body":{"controllers/HealthController.html":{}}}],["checkemailexist",{"_index":997,"title":{},"body":{"injectables/UserService.html":{}}}],["checkemailexist(email",{"_index":1011,"title":{},"body":{"injectables/UserService.html":{}}}],["checkmemory",{"_index":689,"title":{},"body":{"controllers/HealthController.html":{}}}],["checkuser",{"_index":414,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["checkuser(email",{"_index":427,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["class",{"_index":38,"title":{"classes/AfterAdminSignInEvent.html":{},"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterResetPasswordEvent.html":{},"classes/AfterResetPasswordHandler.html":{},"classes/AfterSignInEvent.html":{},"classes/AfterSignInEventHandler.html":{},"classes/AllExceptionsFilter.html":{},"classes/ChangePasswordDto.html":{},"classes/ConfirmResetPasswordDto.html":{},"classes/GeneralResponse.html":{},"classes/GetUserHandler.html":{},"classes/GetUserQuery.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResetPasswordEntity.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"classes/SignUpUserCommand.html":{},"classes/SignUpUserHandler.html":{},"classes/UpdateUserCommand.html":{},"classes/UpdateUserHandler.html":{},"classes/User.html":{},"classes/UserEntity.html":{},"classes/UserResetPassword.html":{}},"body":{"injectables/AdminLocalStrategy.html":{},"classes/AfterAdminSignInEvent.html":{},"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterResetPasswordEvent.html":{},"classes/AfterResetPasswordHandler.html":{},"classes/AfterSignInEvent.html":{},"classes/AfterSignInEventHandler.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthAdminController.html":{},"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"modules/CommonModule.html":{},"classes/ConfirmResetPasswordDto.html":{},"modules/CoreModule.html":{},"classes/GeneralResponse.html":{},"classes/GetUserHandler.html":{},"classes/GetUserQuery.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/IpMiddleware.html":{},"injectables/JwtAdminAuthenticationGuard.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminRefreshTokenGuard.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtRefreshTokenGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ObjectIDPipe.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResetPasswordEntity.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"classes/SignUpUserCommand.html":{},"classes/SignUpUserHandler.html":{},"classes/UpdateUserCommand.html":{},"classes/UpdateUserHandler.html":{},"classes/User.html":{},"injectables/UserAdminService.html":{},"controllers/UserController.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"classes/UserResetPassword.html":{},"injectables/UserService.html":{},"modules/UtilsModule.html":{},"injectables/UtilsService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":56,"title":{},"body":{"classes/AfterAdminSignInEvent.html":{},"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterResetPasswordEvent.html":{},"classes/AfterResetPasswordHandler.html":{},"classes/AfterSignInEvent.html":{},"classes/AfterSignInEventHandler.html":{},"classes/AllExceptionsFilter.html":{},"classes/ChangePasswordDto.html":{},"classes/ConfirmResetPasswordDto.html":{},"classes/GeneralResponse.html":{},"classes/GetUserHandler.html":{},"classes/GetUserQuery.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResetPasswordEntity.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"classes/SignUpUserCommand.html":{},"classes/SignUpUserHandler.html":{},"classes/UpdateUserCommand.html":{},"classes/UpdateUserHandler.html":{},"classes/User.html":{},"classes/UserEntity.html":{},"classes/UserResetPassword.html":{},"overview.html":{}}}],["clientip",{"_index":825,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"interfaces/RequestInterface.html":{}}}],["cluster_appmodule",{"_index":205,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":206,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":547,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":548,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":549,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_commonmodule",{"_index":628,"title":{},"body":{"modules/CommonModule.html":{},"overview.html":{}}}],["cluster_commonmodule_exports",{"_index":629,"title":{},"body":{"modules/CommonModule.html":{},"overview.html":{}}}],["cluster_commonmodule_imports",{"_index":630,"title":{},"body":{"modules/CommonModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":975,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":977,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":978,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":976,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_utilsmodule",{"_index":1083,"title":{},"body":{"modules/UtilsModule.html":{},"overview.html":{}}}],["cluster_utilsmodule_exports",{"_index":1084,"title":{},"body":{"modules/UtilsModule.html":{},"overview.html":{}}}],["cluster_utilsmodule_providers",{"_index":1085,"title":{},"body":{"modules/UtilsModule.html":{},"overview.html":{}}}],["code",{"_index":95,"title":{},"body":{"classes/AfterResetPasswordEvent.html":{},"classes/AfterResetPasswordHandler.html":{},"injectables/AuthService.html":{},"classes/ConfirmResetPasswordDto.html":{},"interfaces/ResetPasswordData.html":{},"classes/ResetPasswordEntity.html":{},"classes/UserResetPassword.html":{},"injectables/UserService.html":{}}}],["codelength",{"_index":1118,"title":{},"body":{"injectables/UtilsService.html":{}}}],["combination",{"_index":612,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ConfirmResetPasswordDto.html":{},"classes/SignUpDto.html":{}}}],["command",{"_index":904,"title":{},"body":{"classes/SignUpUserHandler.html":{},"classes/UpdateUserHandler.html":{}}}],["commandbus",{"_index":1008,"title":{},"body":{"injectables/UserService.html":{}}}],["commandhandler",{"_index":905,"title":{},"body":{"classes/SignUpUserHandler.html":{},"classes/UpdateUserHandler.html":{}}}],["commandhandler(signupusercommand",{"_index":908,"title":{},"body":{"classes/SignUpUserHandler.html":{}}}],["commandhandler(updateusercommand",{"_index":921,"title":{},"body":{"classes/UpdateUserHandler.html":{}}}],["commandhandlers",{"_index":982,"title":{},"body":{"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["commands/handlers",{"_index":983,"title":{},"body":{"modules/UserModule.html":{}}}],["commands/impl/signup",{"_index":1040,"title":{},"body":{"injectables/UserService.html":{}}}],["commands/impl/update",{"_index":1042,"title":{},"body":{"injectables/UserService.html":{}}}],["common.service",{"_index":87,"title":{},"body":{"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterSignInEventHandler.html":{},"injectables/AuthAdminService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["common.service.ts",{"_index":413,"title":{},"body":{"injectables/AuthCommonService.html":{},"coverage.html":{}}}],["common.service.ts:125",{"_index":437,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["common.service.ts:13",{"_index":426,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["common.service.ts:137",{"_index":440,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["common.service.ts:141",{"_index":448,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["common.service.ts:148",{"_index":450,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["common.service.ts:167",{"_index":455,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["common.service.ts:21",{"_index":428,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["common.service.ts:44",{"_index":444,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["common.service.ts:64",{"_index":430,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["common.service.ts:71",{"_index":453,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["common.service.ts:98",{"_index":446,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["common/auth/guards/auth",{"_index":527,"title":{},"body":{"controllers/AuthController.html":{}}}],["common/common.module",{"_index":222,"title":{},"body":{"modules/AppModule.html":{}}}],["common/user/schemas/user.schema",{"_index":456,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["common/user/services/user.service",{"_index":393,"title":{},"body":{"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"injectables/AuthService.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["common/utils/utils.module",{"_index":251,"title":{},"body":{"modules/AppModule.html":{}}}],["common/utils/utils.service",{"_index":249,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"injectables/AuthService.html":{},"injectables/ObjectIDPipe.html":{},"injectables/UserService.html":{}}}],["commonmodule",{"_index":207,"title":{"modules/CommonModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommonModule.html":{},"modules.html":{},"overview.html":{}}}],["commonservice",{"_index":76,"title":{},"body":{"classes/AfterAdminSignInEventHandler.html":{},"injectables/AuthAdminService.html":{},"injectables/AuthService.html":{}}}],["comparebcrypehash",{"_index":1092,"title":{},"body":{"injectables/UtilsService.html":{}}}],["comparebcrypehash(value",{"_index":1110,"title":{},"body":{"injectables/UtilsService.html":{}}}],["compareddate",{"_index":1066,"title":{},"body":{"injectables/UserService.html":{},"injectables/UtilsService.html":{}}}],["conditions",{"_index":677,"title":{},"body":{"classes/GetUserHandler.html":{},"classes/GetUserQuery.html":{},"injectables/UserService.html":{}}}],["conditions['id",{"_index":1051,"title":{},"body":{"injectables/UserService.html":{}}}],["config",{"_index":293,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["config.get('jwt.expiretime",{"_index":579,"title":{},"body":{"modules/AuthModule.html":{}}}],["config.get('jwt.secretkey",{"_index":574,"title":{},"body":{"modules/AuthModule.html":{}}}],["config.get('throttle.limit",{"_index":297,"title":{},"body":{"modules/AppModule.html":{}}}],["config.get('throttle.ttl",{"_index":295,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":220,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":287,"title":{},"body":{"modules/AppModule.html":{}}}],["configs",{"_index":1295,"title":{},"body":{"miscellaneous/functions.html":{}}}],["configs/constants",{"_index":142,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["configservice",{"_index":124,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/AuthCommonService.html":{},"modules/AuthModule.html":{},"injectables/LoggingInterceptor.html":{},"injectables/UserService.html":{},"injectables/UtilsService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["configservice.get('db.uri",{"_index":286,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('i18n.srcdir",{"_index":276,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.getorthrow('i18n.fallbacklanguage",{"_index":273,"title":{},"body":{"modules/AppModule.html":{}}}],["configure",{"_index":213,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":214,"title":{},"body":{"modules/AppModule.html":{}}}],["confirmresetpassword",{"_index":504,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["confirmresetpassword(data",{"_index":507,"title":{},"body":{"controllers/AuthController.html":{}}}],["confirmresetpassword(email",{"_index":1014,"title":{},"body":{"injectables/UserService.html":{}}}],["confirmresetpassword(undefined",{"_index":584,"title":{},"body":{"injectables/AuthService.html":{}}}],["confirmresetpassworddto",{"_index":508,"title":{"classes/ConfirmResetPasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfirmResetPasswordDto.html":{},"coverage.html":{}}}],["console.log",{"_index":756,"title":{},"body":{"injectables/JwtAdminRefreshStrategy.html":{}}}],["const",{"_index":89,"title":{},"body":{"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterResetPasswordHandler.html":{},"classes/AfterSignInEventHandler.html":{},"classes/AllExceptionsFilter.html":{},"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"injectables/AuthService.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"classes/SignUpUserHandler.html":{},"classes/UpdateUserHandler.html":{},"classes/User.html":{},"classes/UserResetPassword.html":{},"injectables/UserService.html":{},"injectables/UtilsService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":11,"title":{},"body":{"injectables/AdminLocalStrategy.html":{},"classes/AfterAdminSignInEvent.html":{},"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterResetPasswordEvent.html":{},"classes/AfterSignInEvent.html":{},"classes/AfterSignInEventHandler.html":{},"classes/AllExceptionsFilter.html":{},"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"injectables/AuthService.html":{},"classes/GetUserHandler.html":{},"classes/GetUserQuery.html":{},"controllers/HealthController.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ObjectIDPipe.html":{},"classes/SignUpUserCommand.html":{},"classes/SignUpUserHandler.html":{},"classes/UpdateUserCommand.html":{},"classes/UpdateUserHandler.html":{},"injectables/UserService.html":{},"injectables/UtilsService.html":{}}}],["constructor(@injectmodel(user.name",{"_index":676,"title":{},"body":{"classes/GetUserHandler.html":{},"classes/SignUpUserHandler.html":{},"classes/UpdateUserHandler.html":{}}}],["constructor(authcommonservice",{"_index":112,"title":{},"body":{"classes/AfterSignInEventHandler.html":{}}}],["constructor(authservice",{"_index":12,"title":{},"body":{"injectables/AdminLocalStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["constructor(commandbus",{"_index":1007,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(commonservice",{"_index":73,"title":{},"body":{"classes/AfterAdminSignInEventHandler.html":{}}}],["constructor(conditions",{"_index":681,"title":{},"body":{"classes/GetUserQuery.html":{}}}],["constructor(configservice",{"_index":798,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"injectables/UtilsService.html":{}}}],["constructor(data",{"_index":897,"title":{},"body":{"classes/SignUpUserCommand.html":{}}}],["constructor(eventbus",{"_index":382,"title":{},"body":{"injectables/AuthAdminService.html":{},"injectables/AuthService.html":{}}}],["constructor(httpadapterhost",{"_index":122,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["constructor(model",{"_index":664,"title":{},"body":{"classes/GetUserHandler.html":{},"classes/SignUpUserHandler.html":{},"classes/UpdateUserHandler.html":{}}}],["constructor(private",{"_index":41,"title":{},"body":{"injectables/AdminLocalStrategy.html":{},"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterSignInEventHandler.html":{},"controllers/AuthAdminController.html":{},"controllers/AuthController.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ObjectIDPipe.html":{},"controllers/UserController.html":{}}}],["constructor(public",{"_index":685,"title":{},"body":{"classes/GetUserQuery.html":{},"classes/SignUpUserCommand.html":{}}}],["constructor(userid",{"_index":63,"title":{},"body":{"classes/AfterAdminSignInEvent.html":{},"classes/AfterResetPasswordEvent.html":{},"classes/AfterSignInEvent.html":{},"classes/UpdateUserCommand.html":{}}}],["constructor(userservice",{"_index":424,"title":{},"body":{"injectables/AuthCommonService.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["constructor(utilsservice",{"_index":850,"title":{},"body":{"injectables/ObjectIDPipe.html":{}}}],["consumer",{"_index":217,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(languagemiddleware).forroutes",{"_index":305,"title":{},"body":{"modules/AppModule.html":{}}}],["contentsecuritypolicy",{"_index":1338,"title":{},"body":{"miscellaneous/variables.html":{}}}],["context",{"_index":807,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["context.switchtohttp",{"_index":816,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["controller",{"_index":186,"title":{"controllers/AppController.html":{},"controllers/AuthAdminController.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthAdminController.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":538,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('user",{"_index":962,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":188,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthAdminController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["controllers/auth.admin.controller",{"_index":559,"title":{},"body":{"modules/AuthModule.html":{}}}],["controllers/auth.controller",{"_index":557,"title":{},"body":{"modules/AuthModule.html":{}}}],["controllers/user.controller",{"_index":980,"title":{},"body":{"modules/UserModule.html":{}}}],["copyofdata",{"_index":1044,"title":{},"body":{"injectables/UserService.html":{}}}],["copyofdata.password",{"_index":1046,"title":{},"body":{"injectables/UserService.html":{}}}],["core/core.module",{"_index":244,"title":{},"body":{"modules/AppModule.html":{}}}],["core/health/health.module",{"_index":633,"title":{},"body":{"modules/CommonModule.html":{}}}],["coremodule",{"_index":208,"title":{"modules/CoreModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules.html":{},"overview.html":{}}}],["coverage",{"_index":1206,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["cqrsmodule",{"_index":564,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["create",{"_index":998,"title":{},"body":{"injectables/UserService.html":{}}}],["create(data",{"_index":1016,"title":{},"body":{"injectables/UserService.html":{}}}],["created",{"_index":359,"title":{},"body":{"controllers/AuthAdminController.html":{}}}],["createdat",{"_index":924,"title":{},"body":{"classes/User.html":{}}}],["createparamdecorator",{"_index":1360,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createuser",{"_index":582,"title":{},"body":{"injectables/AuthService.html":{}}}],["createuser(data",{"_index":586,"title":{},"body":{"injectables/AuthService.html":{}}}],["crypto",{"_index":1152,"title":{},"body":{"injectables/UtilsService.html":{}}}],["ctx",{"_index":160,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/LoggingInterceptor.html":{},"miscellaneous/variables.html":{}}}],["ctx.getrequest",{"_index":163,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["ctx.getrequest().start",{"_index":833,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["ctx.getrequest().traceid",{"_index":831,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["ctx.getresponse",{"_index":821,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1361,"title":{},"body":{"miscellaneous/variables.html":{}}}],["currentpassword",{"_index":605,"title":{},"body":{"classes/ChangePasswordDto.html":{},"injectables/UserService.html":{}}}],["currentvaluehash",{"_index":1178,"title":{},"body":{"injectables/UtilsService.html":{}}}],["data",{"_index":109,"title":{},"body":{"classes/AfterResetPasswordHandler.html":{},"controllers/AuthAdminController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ObjectIDPipe.html":{},"classes/SignUpUserCommand.html":{},"classes/SignUpUserHandler.html":{},"classes/UpdateUserCommand.html":{},"classes/UpdateUserHandler.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["data.ts",{"_index":874,"title":{},"body":{"interfaces/ResetPasswordData.html":{},"coverage.html":{}}}],["date().toisostring",{"_index":180,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["date.now",{"_index":820,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["declarations",{"_index":201,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/UserModule.html":{},"modules/UtilsModule.html":{},"overview.html":{}}}],["decorators",{"_index":191,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthAdminController.html":{},"controllers/AuthController.html":{},"classes/ChangePasswordDto.html":{},"classes/ConfirmResetPasswordDto.html":{},"classes/GeneralResponse.html":{},"controllers/HealthController.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResetPasswordEntity.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserResetPassword.html":{}}}],["default",{"_index":431,"title":{},"body":{"injectables/AuthCommonService.html":{},"classes/User.html":{},"injectables/UserService.html":{},"injectables/UtilsService.html":{},"miscellaneous/variables.html":{}}}],["defaultsrc",{"_index":1340,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defaultversion",{"_index":1335,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":14,"title":{},"body":{"injectables/AdminLocalStrategy.html":{},"classes/AfterAdminSignInEvent.html":{},"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterResetPasswordEvent.html":{},"classes/AfterResetPasswordHandler.html":{},"classes/AfterSignInEvent.html":{},"classes/AfterSignInEventHandler.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthAdminController.html":{},"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"classes/ConfirmResetPasswordDto.html":{},"classes/GeneralResponse.html":{},"classes/GetUserHandler.html":{},"classes/GetUserQuery.html":{},"controllers/HealthController.html":{},"injectables/IpMiddleware.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ObjectIDPipe.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResetPasswordEntity.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"classes/SignUpUserCommand.html":{},"classes/SignUpUserHandler.html":{},"classes/UpdateUserCommand.html":{},"classes/UpdateUserHandler.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserEntity.html":{},"classes/UserResetPassword.html":{},"injectables/UserService.html":{},"injectables/UtilsService.html":{}}}],["dependencies",{"_index":199,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/UserModule.html":{},"modules/UtilsModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":356,"title":{},"body":{"controllers/AuthAdminController.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/RequestInterface.html":{},"classes/ResetPasswordEntity.html":{},"properties.html":{}}}],["dev",{"_index":260,"title":{},"body":{"modules/AppModule.html":{}}}],["development",{"_index":1324,"title":{},"body":{"miscellaneous/variables.html":{}}}],["development_env",{"_index":880,"title":{},"body":{"classes/ResetPasswordEntity.html":{},"injectables/UtilsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["devtoolsmodule",{"_index":245,"title":{},"body":{"modules/AppModule.html":{}}}],["devtoolsmodule.registerasync",{"_index":264,"title":{},"body":{"modules/AppModule.html":{}}}],["directives",{"_index":1339,"title":{},"body":{"miscellaneous/variables.html":{}}}],["disk",{"_index":704,"title":{},"body":{"controllers/HealthController.html":{}}}],["diskhealthindicator",{"_index":700,"title":{},"body":{"controllers/HealthController.html":{}}}],["document",{"_index":1357,"title":{},"body":{"miscellaneous/variables.html":{}}}],["documentation",{"_index":1207,"title":{},"body":{"coverage.html":{}}}],["documentbuilder",{"_index":1351,"title":{},"body":{"miscellaneous/variables.html":{}}}],["doesn't",{"_index":262,"title":{},"body":{"modules/AppModule.html":{}}}],["done",{"_index":735,"title":{},"body":{"injectables/IpMiddleware.html":{},"injectables/LanguageMiddleware.html":{}}}],["dto/change",{"_index":961,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/confirm",{"_index":536,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/refresh",{"_index":340,"title":{},"body":{"controllers/AuthAdminController.html":{},"injectables/AuthAdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/reset",{"_index":531,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/signin.dto",{"_index":394,"title":{},"body":{"injectables/AuthAdminService.html":{},"injectables/AuthService.html":{}}}],["each",{"_index":806,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["email",{"_index":26,"title":{},"body":{"injectables/AdminLocalStrategy.html":{},"interfaces/AdminSignInPayloadInterface.html":{},"classes/AfterResetPasswordEvent.html":{},"classes/AfterResetPasswordHandler.html":{},"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"injectables/AuthService.html":{},"classes/ConfirmResetPasswordDto.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{},"interfaces/JwtPayloadInterface.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"classes/ResetPasswordDto.html":{},"classes/SignInDto.html":{},"interfaces/SignInPayloadInterface.html":{},"classes/SignUpDto.html":{},"classes/SignUpUserHandler.html":{},"classes/User.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{}}}],["emptyrefreshtoken",{"_index":415,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["emptyrefreshtoken(userid",{"_index":429,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["en",{"_index":1290,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["encryptvalue",{"_index":1093,"title":{},"body":{"injectables/UtilsService.html":{}}}],["encryptvalue(value",{"_index":1113,"title":{},"body":{"injectables/UtilsService.html":{}}}],["entities/reset",{"_index":534,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["entities/user.entity",{"_index":870,"title":{},"body":{"interfaces/RequestInterface.html":{}}}],["enumerations",{"_index":1286,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":883,"title":{},"body":{"classes/ResetPasswordEntity.html":{}}}],["envvalidationschema",{"_index":236,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":127,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["event",{"_index":79,"title":{},"body":{"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterResetPasswordHandler.html":{},"classes/AfterSignInEventHandler.html":{},"injectables/AuthAdminService.html":{},"injectables/AuthService.html":{}}}],["eventbus",{"_index":383,"title":{},"body":{"injectables/AuthAdminService.html":{},"injectables/AuthService.html":{}}}],["eventhandlers",{"_index":562,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["events/handlers",{"_index":563,"title":{},"body":{"modules/AuthModule.html":{}}}],["events/impl/after",{"_index":395,"title":{},"body":{"injectables/AuthAdminService.html":{},"injectables/AuthService.html":{}}}],["eventshandler",{"_index":81,"title":{},"body":{"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterResetPasswordHandler.html":{},"classes/AfterSignInEventHandler.html":{}}}],["eventshandler(afteradminsigninevent",{"_index":88,"title":{},"body":{"classes/AfterAdminSignInEventHandler.html":{}}}],["eventshandler(afterresetpasswordevent",{"_index":106,"title":{},"body":{"classes/AfterResetPasswordHandler.html":{}}}],["eventshandler(aftersigninevent",{"_index":113,"title":{},"body":{"classes/AfterSignInEventHandler.html":{}}}],["exceed",{"_index":718,"title":{},"body":{"controllers/HealthController.html":{}}}],["exception",{"_index":131,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.getstatus",{"_index":165,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.message",{"_index":153,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception?.message",{"_index":152,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception?.stack",{"_index":177,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptionfilter",{"_index":118,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptions.filter",{"_index":235,"title":{},"body":{"modules/AppModule.html":{}}}],["exceptions.filter.ts",{"_index":117,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["exceptions.filter.ts:16",{"_index":125,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptions.filter.ts:22",{"_index":133,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptions.filter.ts:36",{"_index":130,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exchange",{"_index":1354,"title":{},"body":{"miscellaneous/variables.html":{}}}],["execute",{"_index":663,"title":{},"body":{"classes/GetUserHandler.html":{},"classes/SignUpUserHandler.html":{},"classes/UpdateUserHandler.html":{}}}],["execute(command",{"_index":903,"title":{},"body":{"classes/SignUpUserHandler.html":{},"classes/UpdateUserHandler.html":{}}}],["execute(undefined",{"_index":667,"title":{},"body":{"classes/GetUserHandler.html":{}}}],["executioncontext",{"_index":801,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"miscellaneous/variables.html":{}}}],["exp",{"_index":769,"title":{},"body":{"interfaces/JwtPayloadInterface.html":{}}}],["expiration",{"_index":497,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["expireat",{"_index":989,"title":{},"body":{"classes/UserResetPassword.html":{},"injectables/UserService.html":{}}}],["expiresin",{"_index":578,"title":{},"body":{"modules/AuthModule.html":{}}}],["expiretime",{"_index":493,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["export",{"_index":37,"title":{},"body":{"injectables/AdminLocalStrategy.html":{},"interfaces/AdminSignInPayloadInterface.html":{},"classes/AfterAdminSignInEvent.html":{},"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterResetPasswordEvent.html":{},"classes/AfterResetPasswordHandler.html":{},"classes/AfterSignInEvent.html":{},"classes/AfterSignInEventHandler.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthAdminController.html":{},"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"modules/CommonModule.html":{},"classes/ConfirmResetPasswordDto.html":{},"modules/CoreModule.html":{},"classes/GeneralResponse.html":{},"interfaces/GetTimeParams.html":{},"classes/GetUserHandler.html":{},"classes/GetUserQuery.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/IpMiddleware.html":{},"injectables/JwtAdminAuthenticationGuard.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminRefreshTokenGuard.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtAuthenticationGuard.html":{},"interfaces/JwtPayloadInterface.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtRefreshTokenGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtTokensInterface.html":{},"injectables/LanguageMiddleware.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ObjectIDPipe.html":{},"classes/RefreshTokenDto.html":{},"interfaces/RequestInterface.html":{},"interfaces/ResetPasswordData.html":{},"classes/ResetPasswordDto.html":{},"classes/ResetPasswordEntity.html":{},"classes/SignInDto.html":{},"interfaces/SignInPayloadInterface.html":{},"classes/SignUpDto.html":{},"classes/SignUpUserCommand.html":{},"classes/SignUpUserHandler.html":{},"classes/UpdateUserCommand.html":{},"classes/UpdateUserHandler.html":{},"classes/User.html":{},"injectables/UserAdminService.html":{},"controllers/UserController.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"classes/UserResetPassword.html":{},"injectables/UserService.html":{},"modules/UtilsModule.html":{},"injectables/UtilsService.html":{}}}],["exports",{"_index":204,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/UserModule.html":{},"modules/UtilsModule.html":{},"overview.html":{}}}],["express",{"_index":822,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"dependencies.html":{}}}],["extendedrawrequet",{"_index":868,"title":{},"body":{"interfaces/RequestInterface.html":{},"miscellaneous/typealiases.html":{}}}],["extends",{"_index":39,"title":{},"body":{"injectables/AdminLocalStrategy.html":{},"injectables/JwtAdminAuthenticationGuard.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminRefreshTokenGuard.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtRefreshTokenGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"interfaces/RequestInterface.html":{},"classes/ResetPasswordEntity.html":{}}}],["extract",{"_index":1171,"title":{},"body":{"injectables/UtilsService.html":{}}}],["extractjwt",{"_index":750,"title":{},"body":{"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":764,"title":{},"body":{"injectables/JwtAdminStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt.frombodyfield('refreshtoken",{"_index":753,"title":{},"body":{"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["fallbacklanguage",{"_index":272,"title":{},"body":{"modules/AppModule.html":{}}}],["false",{"_index":433,"title":{},"body":{"injectables/AuthCommonService.html":{},"classes/User.html":{},"classes/UserResetPassword.html":{},"injectables/UserService.html":{}}}],["fastify",{"_index":739,"title":{},"body":{"injectables/IpMiddleware.html":{},"injectables/LanguageMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/RequestInterface.html":{},"dependencies.html":{}}}],["fastify/csrf",{"_index":1243,"title":{},"body":{"dependencies.html":{}}}],["fastify/helmet",{"_index":1246,"title":{},"body":{"dependencies.html":{}}}],["fastify/static",{"_index":1248,"title":{},"body":{"dependencies.html":{}}}],["fastifyreply",{"_index":734,"title":{},"body":{"injectables/IpMiddleware.html":{},"injectables/LanguageMiddleware.html":{},"injectables/LoggingInterceptor.html":{}}}],["fastifyreply['raw",{"_index":780,"title":{},"body":{"injectables/LanguageMiddleware.html":{}}}],["fastifyrequest",{"_index":867,"title":{},"body":{"interfaces/RequestInterface.html":{}}}],["fastifyrequest['raw",{"_index":871,"title":{},"body":{"interfaces/RequestInterface.html":{}}}],["fieldname",{"_index":474,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AdminLocalStrategy.html":{},"interfaces/AdminSignInPayloadInterface.html":{},"classes/AfterAdminSignInEvent.html":{},"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterResetPasswordEvent.html":{},"classes/AfterResetPasswordHandler.html":{},"classes/AfterSignInEvent.html":{},"classes/AfterSignInEventHandler.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthAdminController.html":{},"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"modules/CommonModule.html":{},"classes/ConfirmResetPasswordDto.html":{},"modules/CoreModule.html":{},"classes/GeneralResponse.html":{},"interfaces/GetTimeParams.html":{},"classes/GetUserHandler.html":{},"classes/GetUserQuery.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/IpMiddleware.html":{},"injectables/JwtAdminAuthenticationGuard.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminRefreshTokenGuard.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtAuthenticationGuard.html":{},"interfaces/JwtPayloadInterface.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtRefreshTokenGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtTokensInterface.html":{},"injectables/LanguageMiddleware.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ObjectIDPipe.html":{},"classes/RefreshTokenDto.html":{},"interfaces/RequestInterface.html":{},"interfaces/ResetPasswordData.html":{},"classes/ResetPasswordDto.html":{},"classes/ResetPasswordEntity.html":{},"classes/SignInDto.html":{},"interfaces/SignInPayloadInterface.html":{},"classes/SignUpDto.html":{},"classes/SignUpUserCommand.html":{},"classes/SignUpUserHandler.html":{},"classes/UpdateUserCommand.html":{},"classes/UpdateUserHandler.html":{},"classes/User.html":{},"injectables/UserAdminService.html":{},"controllers/UserController.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"classes/UserResetPassword.html":{},"injectables/UserService.html":{},"modules/UtilsModule.html":{},"injectables/UtilsService.html":{},"coverage.html":{}}}],["followed",{"_index":1163,"title":{},"body":{"injectables/UtilsService.html":{}}}],["forbidnonwhitelisted",{"_index":1332,"title":{},"body":{"miscellaneous/variables.html":{}}}],["formatted",{"_index":655,"title":{},"body":{"interfaces/GetTimeParams.html":{},"injectables/UtilsService.html":{}}}],["forroutes",{"_index":302,"title":{},"body":{"modules/AppModule.html":{}}}],["found",{"_index":366,"title":{},"body":{"controllers/AuthAdminController.html":{}}}],["full",{"_index":720,"title":{},"body":{"controllers/HealthController.html":{}}}],["function",{"_index":737,"title":{},"body":{"injectables/IpMiddleware.html":{},"injectables/LanguageMiddleware.html":{},"coverage.html":{}}}],["functions",{"_index":1291,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gb",{"_index":726,"title":{},"body":{"controllers/HealthController.html":{}}}],["generalconfig",{"_index":223,"title":{},"body":{"modules/AppModule.html":{}}}],["generalobject",{"_index":913,"title":{},"body":{"classes/UpdateUserCommand.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["generalresponse",{"_index":345,"title":{"classes/GeneralResponse.html":{}},"body":{"controllers/AuthAdminController.html":{},"injectables/AuthAdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GeneralResponse.html":{},"classes/ResetPasswordEntity.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/UtilsService.html":{},"coverage.html":{}}}],["generatenumericalcode",{"_index":1094,"title":{},"body":{"injectables/UtilsService.html":{}}}],["generatenumericalcode(codelength",{"_index":1116,"title":{},"body":{"injectables/UtilsService.html":{}}}],["get('db",{"_index":705,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('db')@healthcheck",{"_index":692,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('disk",{"_index":715,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('disk')@healthcheck",{"_index":690,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('memory",{"_index":708,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('memory')@healthcheck",{"_index":694,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('profile",{"_index":964,"title":{},"body":{"controllers/UserController.html":{}}}],["get('profile')@useguards(jwtauthenticationguard",{"_index":958,"title":{},"body":{"controllers/UserController.html":{}}}],["get('sign",{"_index":376,"title":{},"body":{"controllers/AuthAdminController.html":{},"controllers/AuthController.html":{}}}],["getgeneralresponse",{"_index":1095,"title":{},"body":{"injectables/UtilsService.html":{}}}],["getgeneralresponse(value",{"_index":1119,"title":{},"body":{"injectables/UtilsService.html":{}}}],["gethttpmessage",{"_index":121,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["gethttpmessage(exception",{"_index":132,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["getjwtpayload",{"_index":416,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["getjwtpayload(undefined",{"_index":435,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["getjwttoken",{"_index":417,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["getjwttoken(payload",{"_index":438,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["getjwttokens",{"_index":418,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["getjwttokens(user",{"_index":442,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["getnewaccessandrefreshtoken",{"_index":419,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["getnewaccessandrefreshtoken(user",{"_index":445,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["getprofile",{"_index":952,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["getprofile(@req",{"_index":965,"title":{},"body":{"controllers/UserController.html":{}}}],["getprofile(undefined",{"_index":957,"title":{},"body":{"controllers/UserController.html":{}}}],["getprofile(userid",{"_index":1018,"title":{},"body":{"injectables/UserService.html":{}}}],["getrefreshtoken",{"_index":420,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["getrefreshtoken(payload",{"_index":447,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["getrefreshtokenoptions",{"_index":421,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["getrefreshtokenoptions(isadmin",{"_index":449,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["getsalt",{"_index":1096,"title":{},"body":{"injectables/UtilsService.html":{}}}],["gettime",{"_index":1097,"title":{},"body":{"injectables/UtilsService.html":{}}}],["gettime(undefined",{"_index":1122,"title":{},"body":{"injectables/UtilsService.html":{}}}],["gettimeparams",{"_index":651,"title":{"interfaces/GetTimeParams.html":{}},"body":{"interfaces/GetTimeParams.html":{},"injectables/UtilsService.html":{},"coverage.html":{}}}],["getting",{"_index":1296,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":337,"title":{},"body":{"controllers/AuthAdminController.html":{},"controllers/AuthController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getuser(conditions",{"_index":1020,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserbyemail",{"_index":999,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserbyemail(email",{"_index":1022,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserbyid",{"_index":1000,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserbyid(userid",{"_index":1024,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserentitytype",{"_index":1001,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserhandler",{"_index":659,"title":{"classes/GetUserHandler.html":{}},"body":{"classes/GetUserHandler.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getuserifrefreshtokenmatches",{"_index":422,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["getuserifrefreshtokenmatches(refreshtoken",{"_index":452,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["getusernotfoundmsg",{"_index":1002,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserquery",{"_index":668,"title":{"classes/GetUserQuery.html":{}},"body":{"classes/GetUserHandler.html":{},"classes/GetUserQuery.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["getuserquery(conditions",{"_index":1057,"title":{},"body":{"injectables/UserService.html":{}}}],["getversion",{"_index":190,"title":{},"body":{"controllers/AppController.html":{}}}],["global",{"_index":573,"title":{},"body":{"modules/AuthModule.html":{}}}],["graph",{"_index":1302,"title":{},"body":{"modules.html":{}}}],["guards/auth",{"_index":334,"title":{},"body":{"controllers/AuthAdminController.html":{}}}],["handle",{"_index":72,"title":{},"body":{"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterResetPasswordHandler.html":{},"classes/AfterSignInEventHandler.html":{},"injectables/LoggingInterceptor.html":{}}}],["handle(event",{"_index":77,"title":{},"body":{"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterResetPasswordHandler.html":{},"classes/AfterSignInEventHandler.html":{}}}],["handler.decorator",{"_index":83,"title":{},"body":{"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterResetPasswordHandler.html":{},"classes/AfterSignInEventHandler.html":{}}}],["hash",{"_index":1111,"title":{},"body":{"injectables/UtilsService.html":{}}}],["hashed",{"_index":1172,"title":{},"body":{"injectables/UtilsService.html":{}}}],["hashedcode",{"_index":1073,"title":{},"body":{"injectables/UserService.html":{}}}],["hashedvalue",{"_index":1170,"title":{},"body":{"injectables/UtilsService.html":{}}}],["hashedvalue.slice(0",{"_index":1177,"title":{},"body":{"injectables/UtilsService.html":{}}}],["hashedvalue.slice(64",{"_index":1175,"title":{},"body":{"injectables/UtilsService.html":{}}}],["hashvalue",{"_index":1089,"title":{},"body":{"injectables/UtilsService.html":{}}}],["header",{"_index":783,"title":{},"body":{"injectables/LanguageMiddleware.html":{}}}],["headerresolver",{"_index":253,"title":{},"body":{"modules/AppModule.html":{}}}],["headerresolver(['accept",{"_index":282,"title":{},"body":{"modules/AppModule.html":{}}}],["headers",{"_index":830,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["health",{"_index":702,"title":{},"body":{"controllers/HealthController.html":{}}}],["health.controller",{"_index":729,"title":{},"body":{"modules/HealthModule.html":{}}}],["healthcheck",{"_index":697,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":696,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":686,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthmodule",{"_index":631,"title":{"modules/HealthModule.html":{}},"body":{"modules/CommonModule.html":{},"modules/HealthModule.html":{},"modules.html":{},"overview.html":{}}}],["here",{"_index":1164,"title":{},"body":{"injectables/UtilsService.html":{}}}],["hex",{"_index":1173,"title":{},"body":{"injectables/UtilsService.html":{}}}],["host",{"_index":128,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["host.switchtohttp",{"_index":161,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["http",{"_index":266,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggingInterceptor.html":{}}}],["httpadapter",{"_index":158,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpadapter.getrequesturl(ctx.getrequest",{"_index":182,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpadapter.reply(ctx.getresponse",{"_index":185,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpadapterhost",{"_index":123,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpexception",{"_index":134,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpmessage",{"_index":145,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["https",{"_index":1348,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpstatus",{"_index":135,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpstatus.internal_server_error",{"_index":166,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["hydrateddocument",{"_index":941,"title":{},"body":{"classes/User.html":{},"classes/UserResetPassword.html":{},"miscellaneous/typealiases.html":{}}}],["i18n",{"_index":257,"title":{},"body":{"modules/AppModule.html":{},"injectables/UtilsService.html":{},"dependencies.html":{}}}],["i18ncontext",{"_index":1148,"title":{},"body":{"injectables/UtilsService.html":{}}}],["i18ncontext.current().lang",{"_index":1205,"title":{},"body":{"injectables/UtilsService.html":{}}}],["i18nmodule",{"_index":254,"title":{},"body":{"modules/AppModule.html":{}}}],["i18nmodule.forrootasync",{"_index":271,"title":{},"body":{"modules/AppModule.html":{}}}],["i18nservice",{"_index":1106,"title":{},"body":{"injectables/UtilsService.html":{}}}],["iat",{"_index":770,"title":{},"body":{"interfaces/JwtPayloadInterface.html":{}}}],["icommandhandler",{"_index":902,"title":{},"body":{"classes/SignUpUserHandler.html":{},"classes/UpdateUserHandler.html":{}}}],["id",{"_index":968,"title":{},"body":{"classes/UserEntity.html":{},"injectables/UserService.html":{}}}],["ideally",{"_index":1165,"title":{},"body":{"injectables/UtilsService.html":{}}}],["identifier",{"_index":1208,"title":{},"body":{"coverage.html":{}}}],["ieventhandler",{"_index":71,"title":{},"body":{"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterResetPasswordHandler.html":{},"classes/AfterSignInEventHandler.html":{}}}],["ignoreid",{"_index":1012,"title":{},"body":{"injectables/UserService.html":{}}}],["imgsrc",{"_index":1345,"title":{},"body":{"miscellaneous/variables.html":{}}}],["impl",{"_index":673,"title":{},"body":{"classes/GetUserHandler.html":{}}}],["impl/after",{"_index":84,"title":{},"body":{"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterResetPasswordHandler.html":{},"classes/AfterSignInEventHandler.html":{}}}],["impl/signup",{"_index":906,"title":{},"body":{"classes/SignUpUserHandler.html":{}}}],["impl/update",{"_index":920,"title":{},"body":{"classes/UpdateUserHandler.html":{}}}],["implements",{"_index":70,"title":{},"body":{"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterResetPasswordHandler.html":{},"classes/AfterSignInEventHandler.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"classes/GetUserHandler.html":{},"injectables/IpMiddleware.html":{},"injectables/LanguageMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ObjectIDPipe.html":{},"classes/SignUpUserHandler.html":{},"classes/UpdateUserHandler.html":{}}}],["import",{"_index":29,"title":{},"body":{"injectables/AdminLocalStrategy.html":{},"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterResetPasswordHandler.html":{},"classes/AfterSignInEventHandler.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthAdminController.html":{},"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"modules/CommonModule.html":{},"classes/ConfirmResetPasswordDto.html":{},"modules/CoreModule.html":{},"classes/GeneralResponse.html":{},"classes/GetUserHandler.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/IpMiddleware.html":{},"injectables/JwtAdminAuthenticationGuard.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminRefreshTokenGuard.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtRefreshTokenGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ObjectIDPipe.html":{},"classes/RefreshTokenDto.html":{},"interfaces/RequestInterface.html":{},"classes/ResetPasswordDto.html":{},"classes/ResetPasswordEntity.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"classes/SignUpUserCommand.html":{},"classes/SignUpUserHandler.html":{},"classes/UpdateUserCommand.html":{},"classes/UpdateUserHandler.html":{},"classes/User.html":{},"injectables/UserAdminService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResetPassword.html":{},"injectables/UserService.html":{},"modules/UtilsModule.html":{},"injectables/UtilsService.html":{}}}],["imports",{"_index":212,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/HealthModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"injectables/AdminLocalStrategy.html":{},"interfaces/AdminSignInPayloadInterface.html":{},"classes/AfterAdminSignInEvent.html":{},"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterResetPasswordEvent.html":{},"classes/AfterResetPasswordHandler.html":{},"classes/AfterSignInEvent.html":{},"classes/AfterSignInEventHandler.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"controllers/AuthAdminController.html":{},"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"classes/ConfirmResetPasswordDto.html":{},"classes/GeneralResponse.html":{},"interfaces/GetTimeParams.html":{},"classes/GetUserHandler.html":{},"classes/GetUserQuery.html":{},"controllers/HealthController.html":{},"injectables/IpMiddleware.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{},"interfaces/JwtPayloadInterface.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtTokensInterface.html":{},"injectables/LanguageMiddleware.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ObjectIDPipe.html":{},"classes/RefreshTokenDto.html":{},"interfaces/RequestInterface.html":{},"interfaces/ResetPasswordData.html":{},"classes/ResetPasswordDto.html":{},"classes/ResetPasswordEntity.html":{},"classes/SignInDto.html":{},"interfaces/SignInPayloadInterface.html":{},"classes/SignUpDto.html":{},"classes/SignUpUserCommand.html":{},"classes/SignUpUserHandler.html":{},"classes/UpdateUserCommand.html":{},"classes/UpdateUserHandler.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserEntity.html":{},"classes/UserResetPassword.html":{},"injectables/UserService.html":{},"injectables/UtilsService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AdminLocalStrategy.html":{},"interfaces/AdminSignInPayloadInterface.html":{},"classes/AfterAdminSignInEvent.html":{},"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterResetPasswordEvent.html":{},"classes/AfterResetPasswordHandler.html":{},"classes/AfterSignInEvent.html":{},"classes/AfterSignInEventHandler.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthAdminController.html":{},"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"modules/CommonModule.html":{},"classes/ConfirmResetPasswordDto.html":{},"modules/CoreModule.html":{},"classes/GeneralResponse.html":{},"interfaces/GetTimeParams.html":{},"classes/GetUserHandler.html":{},"classes/GetUserQuery.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/IpMiddleware.html":{},"injectables/JwtAdminAuthenticationGuard.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminRefreshTokenGuard.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtAuthenticationGuard.html":{},"interfaces/JwtPayloadInterface.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtRefreshTokenGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtTokensInterface.html":{},"injectables/LanguageMiddleware.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ObjectIDPipe.html":{},"classes/RefreshTokenDto.html":{},"interfaces/RequestInterface.html":{},"interfaces/ResetPasswordData.html":{},"classes/ResetPasswordDto.html":{},"classes/ResetPasswordEntity.html":{},"classes/SignInDto.html":{},"interfaces/SignInPayloadInterface.html":{},"classes/SignUpDto.html":{},"classes/SignUpUserCommand.html":{},"classes/SignUpUserHandler.html":{},"classes/UpdateUserCommand.html":{},"classes/UpdateUserHandler.html":{},"classes/User.html":{},"injectables/UserAdminService.html":{},"controllers/UserController.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"classes/UserResetPassword.html":{},"injectables/UserService.html":{},"modules/UtilsModule.html":{},"injectables/UtilsService.html":{}}}],["inject",{"_index":270,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AdminLocalStrategy.html":{},"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"injectables/AuthService.html":{},"injectables/IpMiddleware.html":{},"injectables/JwtAdminAuthenticationGuard.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminRefreshTokenGuard.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtRefreshTokenGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ObjectIDPipe.html":{},"injectables/UserAdminService.html":{},"injectables/UserService.html":{},"injectables/UtilsService.html":{}},"body":{"injectables/AdminLocalStrategy.html":{},"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"injectables/AuthService.html":{},"injectables/IpMiddleware.html":{},"injectables/JwtAdminAuthenticationGuard.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminRefreshTokenGuard.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtRefreshTokenGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ObjectIDPipe.html":{},"injectables/UserAdminService.html":{},"injectables/UserService.html":{},"injectables/UtilsService.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AdminLocalStrategy.html":{},"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"injectables/AuthService.html":{},"injectables/IpMiddleware.html":{},"injectables/JwtAdminAuthenticationGuard.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminRefreshTokenGuard.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtRefreshTokenGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ObjectIDPipe.html":{},"injectables/UserAdminService.html":{},"injectables/UserService.html":{},"injectables/UtilsService.html":{},"overview.html":{}}}],["injectmodel",{"_index":672,"title":{},"body":{"classes/GetUserHandler.html":{},"classes/SignUpUserHandler.html":{},"classes/UpdateUserHandler.html":{}}}],["inline",{"_index":1344,"title":{},"body":{"miscellaneous/variables.html":{}}}],["instanceof",{"_index":150,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["integer",{"_index":1193,"title":{},"body":{"injectables/UtilsService.html":{}}}],["integration",{"_index":247,"title":{},"body":{"modules/AppModule.html":{}}}],["intercept",{"_index":797,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["intercept(context",{"_index":800,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["interface",{"_index":48,"title":{"interfaces/AdminSignInPayloadInterface.html":{},"interfaces/GetTimeParams.html":{},"interfaces/JwtPayloadInterface.html":{},"interfaces/JwtTokensInterface.html":{},"interfaces/RequestInterface.html":{},"interfaces/ResetPasswordData.html":{},"interfaces/SignInPayloadInterface.html":{}},"body":{"interfaces/AdminSignInPayloadInterface.html":{},"interfaces/GetTimeParams.html":{},"interfaces/JwtPayloadInterface.html":{},"interfaces/JwtTokensInterface.html":{},"interfaces/RequestInterface.html":{},"interfaces/ResetPasswordData.html":{},"interfaces/SignInPayloadInterface.html":{},"coverage.html":{}}}],["interfaces",{"_index":50,"title":{},"body":{"interfaces/AdminSignInPayloadInterface.html":{},"interfaces/GetTimeParams.html":{},"interfaces/JwtPayloadInterface.html":{},"interfaces/JwtTokensInterface.html":{},"interfaces/RequestInterface.html":{},"interfaces/ResetPasswordData.html":{},"interfaces/SignInPayloadInterface.html":{},"overview.html":{}}}],["intersectiontype",{"_index":881,"title":{},"body":{"classes/ResetPasswordEntity.html":{}}}],["intersectiontype(generalresponse",{"_index":882,"title":{},"body":{"classes/ResetPasswordEntity.html":{}}}],["ip",{"_index":172,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/IpMiddleware.html":{},"dependencies.html":{}}}],["ipmiddleware",{"_index":240,"title":{"injectables/IpMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/IpMiddleware.html":{},"coverage.html":{}}}],["iqueryhandler",{"_index":662,"title":{},"body":{"classes/GetUserHandler.html":{}}}],["isadmin",{"_index":53,"title":{},"body":{"interfaces/AdminSignInPayloadInterface.html":{},"injectables/AuthCommonService.html":{},"interfaces/SignInPayloadInterface.html":{},"classes/User.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{}}}],["isadminmode",{"_index":1033,"title":{},"body":{"injectables/UserService.html":{}}}],["isafterdate",{"_index":1098,"title":{},"body":{"injectables/UtilsService.html":{}}}],["isafterdate(undefined",{"_index":1124,"title":{},"body":{"injectables/UtilsService.html":{}}}],["isdefined",{"_index":619,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ConfirmResetPasswordDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{}}}],["isdefined()@isnotempty()@isstring()@isemail()@maxlength(255",{"_index":638,"title":{},"body":{"classes/ConfirmResetPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{}}}],["isdefined()@isnotempty()@isstring()@isjwt",{"_index":861,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["isdefined()@isnotempty()@isstring()@length(6",{"_index":636,"title":{},"body":{"classes/ConfirmResetPasswordDto.html":{}}}],["isdefined()@isnotempty()@isstring()@maxlength(255",{"_index":891,"title":{},"body":{"classes/SignUpDto.html":{}}}],["isdefined()@isnotempty()@isstring()@maxlength(32",{"_index":607,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["isdefined()@isnotempty()@isstring()@minlength(6)@maxlength(32",{"_index":886,"title":{},"body":{"classes/SignInDto.html":{}}}],["isdefined()@isnotempty()@isstring()@minlength(6)@maxlength(32)@isstrongpassword",{"_index":609,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ConfirmResetPasswordDto.html":{},"classes/SignUpDto.html":{}}}],["isdevelopmentenv",{"_index":1099,"title":{},"body":{"injectables/UtilsService.html":{}}}],["isemail",{"_index":641,"title":{},"body":{"classes/ConfirmResetPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{}}}],["isglobal",{"_index":289,"title":{},"body":{"modules/AppModule.html":{}}}],["isjwt",{"_index":863,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["islive",{"_index":155,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["isn't",{"_index":858,"title":{},"body":{"injectables/ObjectIDPipe.html":{}}}],["isnotempty",{"_index":620,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ConfirmResetPasswordDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{}}}],["isproductionenv",{"_index":1100,"title":{},"body":{"injectables/UtilsService.html":{}}}],["isrefreshtokenmatching",{"_index":480,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["isstagingenv",{"_index":1101,"title":{},"body":{"injectables/UtilsService.html":{}}}],["isstring",{"_index":621,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ConfirmResetPasswordDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{}}}],["isstrongpassword",{"_index":622,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ConfirmResetPasswordDto.html":{},"classes/SignUpDto.html":{}}}],["istestenv",{"_index":1102,"title":{},"body":{"injectables/UtilsService.html":{}}}],["isvalidobjectid",{"_index":1103,"title":{},"body":{"injectables/UtilsService.html":{}}}],["isvalidobjectid(stringid",{"_index":1130,"title":{},"body":{"injectables/UtilsService.html":{}}}],["isvalidpassword",{"_index":466,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["joi",{"_index":1271,"title":{},"body":{"dependencies.html":{}}}],["join",{"_index":258,"title":{},"body":{"modules/AppModule.html":{}}}],["join(__dirname",{"_index":275,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt",{"_index":751,"title":{},"body":{"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminRefreshTokenGuard.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.refreshtokenexpiretime",{"_index":494,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["jwt.refreshtokensecretkey",{"_index":492,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["jwtadminauthenticationguard",{"_index":342,"title":{"injectables/JwtAdminAuthenticationGuard.html":{}},"body":{"controllers/AuthAdminController.html":{},"injectables/JwtAdminAuthenticationGuard.html":{},"coverage.html":{}}}],["jwtadminrefreshstrategy",{"_index":551,"title":{"injectables/JwtAdminRefreshStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtadminrefreshtokenguard",{"_index":333,"title":{"injectables/JwtAdminRefreshTokenGuard.html":{}},"body":{"controllers/AuthAdminController.html":{},"injectables/JwtAdminRefreshTokenGuard.html":{},"coverage.html":{}}}],["jwtadminstrategy",{"_index":552,"title":{"injectables/JwtAdminStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtAdminStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtauthenticationguard",{"_index":528,"title":{"injectables/JwtAuthenticationGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthenticationGuard.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":752,"title":{},"body":{"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":560,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":572,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":469,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["jwtpayloadinterface",{"_index":439,"title":{"interfaces/JwtPayloadInterface.html":{}},"body":{"injectables/AuthCommonService.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{},"interfaces/JwtPayloadInterface.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwtrefreshstrategy",{"_index":553,"title":{"injectables/JwtRefreshStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtRefreshStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtrefreshtokenguard",{"_index":526,"title":{"injectables/JwtRefreshTokenGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtRefreshTokenGuard.html":{},"coverage.html":{}}}],["jwtservice",{"_index":425,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["jwtsignoptions",{"_index":451,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["jwtstrategy",{"_index":554,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwttokensinterface",{"_index":461,"title":{"interfaces/JwtTokensInterface.html":{}},"body":{"injectables/AuthCommonService.html":{},"interfaces/JwtTokensInterface.html":{},"coverage.html":{}}}],["key",{"_index":576,"title":{},"body":{"modules/AuthModule.html":{},"classes/GetUserQuery.html":{},"injectables/UtilsService.html":{}}}],["lang",{"_index":281,"title":{},"body":{"modules/AppModule.html":{},"injectables/UtilsService.html":{}}}],["language",{"_index":283,"title":{},"body":{"modules/AppModule.html":{},"injectables/LanguageMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/RequestInterface.html":{}}}],["language:${language",{"_index":844,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["languagemiddleware",{"_index":242,"title":{"injectables/LanguageMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/LanguageMiddleware.html":{},"coverage.html":{}}}],["languages",{"_index":1287,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["latency",{"_index":794,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["layer",{"_index":866,"title":{},"body":{"interfaces/RequestInterface.html":{}}}],["legend",{"_index":200,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/UserModule.html":{},"modules/UtilsModule.html":{},"overview.html":{}}}],["length",{"_index":642,"title":{},"body":{"classes/ConfirmResetPasswordDto.html":{},"injectables/UtilsService.html":{}}}],["length(6",{"_index":644,"title":{},"body":{"classes/ConfirmResetPasswordDto.html":{}}}],["letters",{"_index":615,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ConfirmResetPasswordDto.html":{},"classes/SignUpDto.html":{}}}],["license",{"_index":1309,"title":{},"body":{"properties.html":{}}}],["limit",{"_index":296,"title":{},"body":{"modules/AppModule.html":{}}}],["literal",{"_index":682,"title":{},"body":{"classes/GetUserQuery.html":{},"injectables/UtilsService.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":288,"title":{},"body":{"modules/AppModule.html":{}}}],["loaderoptions",{"_index":274,"title":{},"body":{"modules/AppModule.html":{}}}],["local",{"_index":32,"title":{},"body":{"injectables/AdminLocalStrategy.html":{},"controllers/AuthAdminController.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localhost",{"_index":843,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["localstrategy",{"_index":555,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["log",{"_index":792,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["logger",{"_index":105,"title":{},"body":{"classes/AfterResetPasswordHandler.html":{},"classes/AllExceptionsFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["logger.debug",{"_index":107,"title":{},"body":{"classes/AfterResetPasswordHandler.html":{}}}],["logger.error(responsebody",{"_index":184,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["logger.verbose(logmessage",{"_index":846,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["logginginterceptor",{"_index":238,"title":{"injectables/LoggingInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["logmessage",{"_index":842,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["logs",{"_index":149,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["lowercase",{"_index":614,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ConfirmResetPasswordDto.html":{},"classes/SignUpDto.html":{}}}],["mainly",{"_index":790,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["manager",{"_index":227,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["matching",{"_index":47,"title":{},"body":{"injectables/AdminLocalStrategy.html":{},"interfaces/AdminSignInPayloadInterface.html":{},"classes/AfterAdminSignInEvent.html":{},"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterResetPasswordEvent.html":{},"classes/AfterResetPasswordHandler.html":{},"classes/AfterSignInEvent.html":{},"classes/AfterSignInEventHandler.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthAdminController.html":{},"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"modules/CommonModule.html":{},"classes/ConfirmResetPasswordDto.html":{},"modules/CoreModule.html":{},"classes/GeneralResponse.html":{},"interfaces/GetTimeParams.html":{},"classes/GetUserHandler.html":{},"classes/GetUserQuery.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/IpMiddleware.html":{},"injectables/JwtAdminAuthenticationGuard.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminRefreshTokenGuard.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtAuthenticationGuard.html":{},"interfaces/JwtPayloadInterface.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtRefreshTokenGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtTokensInterface.html":{},"injectables/LanguageMiddleware.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ObjectIDPipe.html":{},"classes/RefreshTokenDto.html":{},"interfaces/RequestInterface.html":{},"interfaces/ResetPasswordData.html":{},"classes/ResetPasswordDto.html":{},"classes/ResetPasswordEntity.html":{},"classes/SignInDto.html":{},"interfaces/SignInPayloadInterface.html":{},"classes/SignUpDto.html":{},"classes/SignUpUserCommand.html":{},"classes/SignUpUserHandler.html":{},"classes/UpdateUserCommand.html":{},"classes/UpdateUserHandler.html":{},"classes/User.html":{},"injectables/UserAdminService.html":{},"controllers/UserController.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"classes/UserResetPassword.html":{},"injectables/UserService.html":{},"modules/UtilsModule.html":{},"injectables/UtilsService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matchvalue",{"_index":1090,"title":{},"body":{"injectables/UtilsService.html":{}}}],["max",{"_index":1185,"title":{},"body":{"injectables/UtilsService.html":{}}}],["maxlength",{"_index":623,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ConfirmResetPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{}}}],["maxlength(255",{"_index":643,"title":{},"body":{"classes/ConfirmResetPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{}}}],["maxlength(32",{"_index":626,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ConfirmResetPasswordDto.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{}}}],["memory",{"_index":703,"title":{},"body":{"controllers/HealthController.html":{}}}],["memoryhealthindicator",{"_index":699,"title":{},"body":{"controllers/HealthController.html":{}}}],["message",{"_index":171,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ChangePasswordDto.html":{},"classes/ConfirmResetPasswordDto.html":{},"classes/SignUpDto.html":{}}}],["metadata",{"_index":1281,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":169,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/LoggingInterceptor.html":{}}}],["method.touppercase",{"_index":838,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["methods",{"_index":8,"title":{},"body":{"injectables/AdminLocalStrategy.html":{},"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterResetPasswordHandler.html":{},"classes/AfterSignInEventHandler.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthAdminController.html":{},"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GetUserHandler.html":{},"controllers/HealthController.html":{},"injectables/IpMiddleware.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ObjectIDPipe.html":{},"classes/SignUpUserHandler.html":{},"classes/UpdateUserHandler.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/UtilsService.html":{}}}],["middleeware",{"_index":300,"title":{},"body":{"modules/AppModule.html":{}}}],["middlewareconsumer",{"_index":215,"title":{},"body":{"modules/AppModule.html":{}}}],["min",{"_index":1183,"title":{},"body":{"injectables/UtilsService.html":{}}}],["minlength",{"_index":624,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ConfirmResetPasswordDto.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{}}}],["minlength(6",{"_index":627,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ConfirmResetPasswordDto.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{}}}],["minmax",{"_index":1181,"title":{},"body":{"injectables/UtilsService.html":{}}}],["minmax[codelength",{"_index":1190,"title":{},"body":{"injectables/UtilsService.html":{}}}],["minmax[minmaxkey].max",{"_index":1192,"title":{},"body":{"injectables/UtilsService.html":{}}}],["minmax[minmaxkey].min",{"_index":1191,"title":{},"body":{"injectables/UtilsService.html":{}}}],["minmaxkey",{"_index":1189,"title":{},"body":{"injectables/UtilsService.html":{}}}],["minusamount",{"_index":656,"title":{},"body":{"interfaces/GetTimeParams.html":{},"injectables/UtilsService.html":{}}}],["minutes",{"_index":1197,"title":{},"body":{"injectables/UtilsService.html":{}}}],["miscellaneous",{"_index":1285,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mmiddleware",{"_index":304,"title":{},"body":{"modules/AppModule.html":{}}}],["model",{"_index":665,"title":{},"body":{"classes/GetUserHandler.html":{},"classes/SignUpUserHandler.html":{},"classes/UpdateUserHandler.html":{}}}],["module",{"_index":196,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/HealthModule.html":{},"modules/UserModule.html":{},"modules/UtilsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/HealthModule.html":{},"modules/UserModule.html":{},"modules/UtilsModule.html":{},"overview.html":{}}}],["modules",{"_index":198,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/HealthModule.html":{},"modules/UserModule.html":{},"modules/UtilsModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":1145,"title":{},"body":{"injectables/UtilsService.html":{},"dependencies.html":{}}}],["moment(sourcedate).isafter(compareddate",{"_index":1203,"title":{},"body":{"injectables/UtilsService.html":{}}}],["moment.moment",{"_index":1202,"title":{},"body":{"injectables/UtilsService.html":{}}}],["mongodb",{"_index":814,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"interfaces/RequestInterface.html":{}}}],["mongodb.objectid",{"_index":869,"title":{},"body":{"interfaces/RequestInterface.html":{}}}],["mongoose",{"_index":671,"title":{},"body":{"classes/GetUserHandler.html":{},"controllers/HealthController.html":{},"classes/SignUpUserHandler.html":{},"classes/UpdateUserHandler.html":{},"classes/User.html":{},"classes/UserResetPassword.html":{},"injectables/UtilsService.html":{},"dependencies.html":{}}}],["mongoosehealthindicator",{"_index":698,"title":{},"body":{"controllers/HealthController.html":{}}}],["mongoosemodule",{"_index":232,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forfeature",{"_index":986,"title":{},"body":{"modules/UserModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":284,"title":{},"body":{"modules/AppModule.html":{}}}],["name",{"_index":18,"title":{},"body":{"injectables/AdminLocalStrategy.html":{},"interfaces/AdminSignInPayloadInterface.html":{},"classes/AfterAdminSignInEvent.html":{},"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterResetPasswordEvent.html":{},"classes/AfterResetPasswordHandler.html":{},"classes/AfterSignInEvent.html":{},"classes/AfterSignInEventHandler.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthAdminController.html":{},"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GetUserHandler.html":{},"classes/GetUserQuery.html":{},"injectables/IpMiddleware.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{},"interfaces/JwtPayloadInterface.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ObjectIDPipe.html":{},"interfaces/SignInPayloadInterface.html":{},"classes/SignUpDto.html":{},"classes/SignUpUserCommand.html":{},"classes/SignUpUserHandler.html":{},"classes/UpdateUserCommand.html":{},"classes/UpdateUserHandler.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["nest",{"_index":796,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["nestinterceptor",{"_index":808,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["nestjs",{"_index":256,"title":{},"body":{"modules/AppModule.html":{},"injectables/UtilsService.html":{},"dependencies.html":{}}}],["nestjs/axios",{"_index":1250,"title":{},"body":{"dependencies.html":{}}}],["nestjs/cache",{"_index":226,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":35,"title":{},"body":{"injectables/AdminLocalStrategy.html":{},"classes/AfterResetPasswordHandler.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthAdminController.html":{},"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/IpMiddleware.html":{},"injectables/JwtAdminAuthenticationGuard.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminRefreshTokenGuard.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtRefreshTokenGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ObjectIDPipe.html":{},"injectables/UserAdminService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/UtilsModule.html":{},"injectables/UtilsService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":136,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/AuthCommonService.html":{},"modules/AuthModule.html":{},"injectables/LoggingInterceptor.html":{},"injectables/UserService.html":{},"injectables/UtilsService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":137,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/cqrs",{"_index":80,"title":{},"body":{"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterResetPasswordHandler.html":{},"classes/AfterSignInEventHandler.html":{},"injectables/AuthAdminService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/GetUserHandler.html":{},"classes/SignUpUserHandler.html":{},"classes/UpdateUserHandler.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/cqrs/dist/decorators/events",{"_index":82,"title":{},"body":{"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterResetPasswordHandler.html":{},"classes/AfterSignInEventHandler.html":{}}}],["nestjs/devtools",{"_index":246,"title":{},"body":{"modules/AppModule.html":{}}}],["nestjs/jwt",{"_index":460,"title":{},"body":{"injectables/AuthCommonService.html":{},"modules/AuthModule.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":233,"title":{},"body":{"modules/AppModule.html":{},"classes/GetUserHandler.html":{},"classes/SignUpUserHandler.html":{},"classes/UpdateUserHandler.html":{},"classes/User.html":{},"modules/UserModule.html":{},"classes/UserResetPassword.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":34,"title":{},"body":{"injectables/AdminLocalStrategy.html":{},"controllers/AuthAdminController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtAdminAuthenticationGuard.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminRefreshTokenGuard.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtRefreshTokenGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1256,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":1258,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":351,"title":{},"body":{"controllers/AuthAdminController.html":{},"controllers/AuthController.html":{},"classes/GeneralResponse.html":{},"classes/ResetPasswordEntity.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":701,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/throttler",{"_index":229,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":738,"title":{},"body":{"injectables/IpMiddleware.html":{},"injectables/LanguageMiddleware.html":{}}}],["nestmodule",{"_index":218,"title":{},"body":{"modules/AppModule.html":{}}}],["new",{"_index":179,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ObjectIDPipe.html":{},"classes/SignUpUserHandler.html":{},"classes/UpdateUserHandler.html":{},"injectables/UserService.html":{},"injectables/UtilsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newpassword",{"_index":606,"title":{},"body":{"classes/ChangePasswordDto.html":{},"injectables/UserService.html":{}}}],["next",{"_index":802,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["notfoundexception",{"_index":1039,"title":{},"body":{"injectables/UserService.html":{}}}],["notfoundexception(this.getusernotfoundmsg",{"_index":1055,"title":{},"body":{"injectables/UserService.html":{}}}],["now",{"_index":819,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["null",{"_index":477,"title":{},"body":{"injectables/AuthCommonService.html":{},"injectables/UserService.html":{}}}],["number",{"_index":658,"title":{},"body":{"interfaces/GetTimeParams.html":{},"interfaces/JwtPayloadInterface.html":{},"injectables/UtilsService.html":{},"dependencies.html":{}}}],["numbers",{"_index":613,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ConfirmResetPasswordDto.html":{},"classes/SignUpDto.html":{}}}],["object",{"_index":917,"title":{},"body":{"classes/UpdateUserCommand.html":{},"injectables/UserService.html":{}}}],["object.ts",{"_index":1316,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["objectid",{"_index":813,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"injectables/ObjectIDPipe.html":{}}}],["objectidpipe",{"_index":847,"title":{"injectables/ObjectIDPipe.html":{}},"body":{"injectables/ObjectIDPipe.html":{},"coverage.html":{}}}],["observable",{"_index":809,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["op",{"_index":836,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["optional",{"_index":20,"title":{},"body":{"injectables/AdminLocalStrategy.html":{},"interfaces/AdminSignInPayloadInterface.html":{},"classes/AfterAdminSignInEvent.html":{},"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterResetPasswordEvent.html":{},"classes/AfterResetPasswordHandler.html":{},"classes/AfterSignInEvent.html":{},"classes/AfterSignInEventHandler.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthAdminController.html":{},"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/GetTimeParams.html":{},"classes/GetUserHandler.html":{},"classes/GetUserQuery.html":{},"injectables/IpMiddleware.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{},"interfaces/JwtPayloadInterface.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ObjectIDPipe.html":{},"classes/ResetPasswordEntity.html":{},"interfaces/SignInPayloadInterface.html":{},"classes/SignUpUserCommand.html":{},"classes/SignUpUserHandler.html":{},"classes/UpdateUserCommand.html":{},"classes/UpdateUserHandler.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"injectables/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":280,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthCommonService.html":{},"injectables/UtilsService.html":{}}}],["options.expiresin",{"_index":499,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["originalvaluehash",{"_index":1176,"title":{},"body":{"injectables/UtilsService.html":{}}}],["out",{"_index":210,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthAdminController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/UserModule.html":{},"modules/UtilsModule.html":{},"overview.html":{}}}],["out')@useguards(jwtadminauthenticationguard",{"_index":323,"title":{},"body":{"controllers/AuthAdminController.html":{}}}],["out')@useguards(jwtauthenticationguard",{"_index":518,"title":{},"body":{"controllers/AuthController.html":{}}}],["overview",{"_index":1304,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1242,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":815,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"injectables/ObjectIDPipe.html":{}}}],["parameters",{"_index":16,"title":{},"body":{"injectables/AdminLocalStrategy.html":{},"classes/AfterAdminSignInEvent.html":{},"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterResetPasswordEvent.html":{},"classes/AfterResetPasswordHandler.html":{},"classes/AfterSignInEvent.html":{},"classes/AfterSignInEventHandler.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthAdminController.html":{},"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GetUserHandler.html":{},"classes/GetUserQuery.html":{},"injectables/IpMiddleware.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ObjectIDPipe.html":{},"classes/SignUpUserCommand.html":{},"classes/SignUpUserHandler.html":{},"classes/UpdateUserCommand.html":{},"classes/UpdateUserHandler.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/UtilsService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":829,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["params.interface",{"_index":1155,"title":{},"body":{"injectables/UtilsService.html":{}}}],["params.interface.ts",{"_index":654,"title":{},"body":{"interfaces/GetTimeParams.html":{},"coverage.html":{}}}],["passport",{"_index":31,"title":{},"body":{"injectables/AdminLocalStrategy.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":568,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":33,"title":{},"body":{"injectables/AdminLocalStrategy.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":763,"title":{},"body":{"injectables/JwtAdminStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":24,"title":{},"body":{"injectables/AdminLocalStrategy.html":{},"classes/AfterResetPasswordHandler.html":{},"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"classes/ConfirmResetPasswordDto.html":{},"injectables/LocalStrategy.html":{},"interfaces/ResetPasswordData.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"classes/SignUpUserHandler.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/UtilsService.html":{},"coverage.html":{}}}],["password')@useguards(jwtauthenticationguard",{"_index":955,"title":{},"body":{"controllers/UserController.html":{}}}],["password.dto",{"_index":532,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["password.dto.ts",{"_index":604,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ConfirmResetPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["password.dto.ts:15",{"_index":608,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ResetPasswordDto.html":{}}}],["password.dto.ts:18",{"_index":639,"title":{},"body":{"classes/ConfirmResetPasswordDto.html":{}}}],["password.dto.ts:24",{"_index":637,"title":{},"body":{"classes/ConfirmResetPasswordDto.html":{}}}],["password.dto.ts:29",{"_index":618,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["password.dto.ts:38",{"_index":640,"title":{},"body":{"classes/ConfirmResetPasswordDto.html":{}}}],["password.entity",{"_index":535,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["password.entity.ts",{"_index":877,"title":{},"body":{"classes/ResetPasswordEntity.html":{},"coverage.html":{}}}],["password.entity.ts:9",{"_index":879,"title":{},"body":{"classes/ResetPasswordEntity.html":{}}}],["password.event",{"_index":104,"title":{},"body":{"classes/AfterResetPasswordHandler.html":{},"injectables/AuthService.html":{}}}],["password.event.handler.ts",{"_index":101,"title":{},"body":{"classes/AfterResetPasswordHandler.html":{},"coverage.html":{}}}],["password.event.handler.ts:10",{"_index":102,"title":{},"body":{"classes/AfterResetPasswordHandler.html":{}}}],["password.event.ts",{"_index":94,"title":{},"body":{"classes/AfterResetPasswordEvent.html":{},"coverage.html":{}}}],["password.event.ts:1",{"_index":96,"title":{},"body":{"classes/AfterResetPasswordEvent.html":{}}}],["password.event.ts:3",{"_index":99,"title":{},"body":{"classes/AfterResetPasswordEvent.html":{}}}],["password.event.ts:4",{"_index":98,"title":{},"body":{"classes/AfterResetPasswordEvent.html":{}}}],["password.event.ts:5",{"_index":97,"title":{},"body":{"classes/AfterResetPasswordEvent.html":{}}}],["password.schema",{"_index":942,"title":{},"body":{"classes/User.html":{}}}],["password.schema.ts",{"_index":988,"title":{},"body":{"classes/UserResetPassword.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["password.schema.ts:12",{"_index":990,"title":{},"body":{"classes/UserResetPassword.html":{}}}],["password.schema.ts:15",{"_index":991,"title":{},"body":{"classes/UserResetPassword.html":{}}}],["password/confirm",{"_index":510,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch",{"_index":524,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["patch('change",{"_index":954,"title":{},"body":{"controllers/UserController.html":{}}}],["patch('reset",{"_index":509,"title":{},"body":{"controllers/AuthController.html":{}}}],["path",{"_index":181,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthAdminController.html":{},"controllers/HealthController.html":{}}}],["payload",{"_index":441,"title":{},"body":{"injectables/AuthCommonService.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["payload.interface",{"_index":458,"title":{},"body":{"injectables/AuthCommonService.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["payload.interface.ts",{"_index":768,"title":{},"body":{"interfaces/JwtPayloadInterface.html":{},"coverage.html":{}}}],["pipe",{"_index":832,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["pipetransform",{"_index":855,"title":{},"body":{"injectables/ObjectIDPipe.html":{}}}],["please",{"_index":146,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["plusamount",{"_index":657,"title":{},"body":{"interfaces/GetTimeParams.html":{},"injectables/UserService.html":{},"injectables/UtilsService.html":{}}}],["port",{"_index":268,"title":{},"body":{"modules/AppModule.html":{}}}],["post",{"_index":326,"title":{},"body":{"controllers/AuthAdminController.html":{},"controllers/AuthController.html":{}}}],["post('refresh",{"_index":374,"title":{},"body":{"controllers/AuthAdminController.html":{},"controllers/AuthController.html":{}}}],["post('sign",{"_index":370,"title":{},"body":{"controllers/AuthAdminController.html":{},"controllers/AuthController.html":{}}}],["prefix",{"_index":503,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["private",{"_index":120,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"injectables/AuthService.html":{},"classes/GetUserHandler.html":{},"controllers/HealthController.html":{},"classes/SignUpUserHandler.html":{},"classes/UpdateUserHandler.html":{},"injectables/UserService.html":{},"injectables/UtilsService.html":{}}}],["process.env.jwt_refresh_token_secret",{"_index":755,"title":{},"body":{"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["process.env.jwt_secret",{"_index":765,"title":{},"body":{"injectables/JwtAdminStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["production",{"_index":1325,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production_env",{"_index":140,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/LoggingInterceptor.html":{},"injectables/UtilsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["promise",{"_index":28,"title":{},"body":{"injectables/AdminLocalStrategy.html":{},"controllers/AuthAdminController.html":{},"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GetUserHandler.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"classes/SignUpUserHandler.html":{},"classes/UpdateUserHandler.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/UtilsService.html":{}}}],["prop",{"_index":926,"title":{},"body":{"classes/User.html":{},"classes/UserResetPassword.html":{}}}],["prop({default",{"_index":930,"title":{},"body":{"classes/User.html":{}}}],["prop({type",{"_index":936,"title":{},"body":{"classes/User.html":{}}}],["properties",{"_index":52,"title":{"properties.html":{}},"body":{"interfaces/AdminSignInPayloadInterface.html":{},"classes/AfterAdminSignInEvent.html":{},"classes/AfterResetPasswordEvent.html":{},"classes/AfterSignInEvent.html":{},"classes/ChangePasswordDto.html":{},"classes/ConfirmResetPasswordDto.html":{},"classes/GeneralResponse.html":{},"interfaces/GetTimeParams.html":{},"classes/GetUserQuery.html":{},"interfaces/JwtPayloadInterface.html":{},"interfaces/JwtTokensInterface.html":{},"classes/RefreshTokenDto.html":{},"interfaces/RequestInterface.html":{},"interfaces/ResetPasswordData.html":{},"classes/ResetPasswordDto.html":{},"classes/ResetPasswordEntity.html":{},"classes/SignInDto.html":{},"interfaces/SignInPayloadInterface.html":{},"classes/SignUpDto.html":{},"classes/SignUpUserCommand.html":{},"classes/UpdateUserCommand.html":{},"classes/User.html":{},"classes/UserEntity.html":{},"classes/UserResetPassword.html":{},"injectables/UtilsService.html":{},"properties.html":{}}}],["protection",{"_index":1244,"title":{},"body":{"dependencies.html":{}}}],["provide",{"_index":298,"title":{},"body":{"modules/AppModule.html":{}}}],["providers",{"_index":203,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/UserModule.html":{},"modules/UtilsModule.html":{},"overview.html":{}}}],["public",{"_index":59,"title":{},"body":{"classes/AfterAdminSignInEvent.html":{},"classes/AfterResetPasswordEvent.html":{},"classes/AfterSignInEvent.html":{},"classes/GetUserQuery.html":{},"classes/SignUpUserCommand.html":{},"classes/UpdateUserCommand.html":{}}}],["queries/handlers",{"_index":985,"title":{},"body":{"modules/UserModule.html":{}}}],["queries/impl",{"_index":1041,"title":{},"body":{"injectables/UserService.html":{}}}],["query",{"_index":828,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["querybus",{"_index":1009,"title":{},"body":{"injectables/UserService.html":{}}}],["queryhandler",{"_index":670,"title":{},"body":{"classes/GetUserHandler.html":{}}}],["queryhandler(getuserquery",{"_index":675,"title":{},"body":{"classes/GetUserHandler.html":{}}}],["queryhandlers",{"_index":984,"title":{},"body":{"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["queryresolver",{"_index":255,"title":{},"body":{"modules/AppModule.html":{}}}],["random",{"_index":1139,"title":{},"body":{"injectables/UtilsService.html":{},"dependencies.html":{}}}],["randombytes",{"_index":1149,"title":{},"body":{"injectables/UtilsService.html":{}}}],["randombytes(16).tostring('hex",{"_index":1168,"title":{},"body":{"injectables/UtilsService.html":{}}}],["randomnumber",{"_index":1146,"title":{},"body":{"injectables/UtilsService.html":{}}}],["randomnumber(options",{"_index":1194,"title":{},"body":{"injectables/UtilsService.html":{}}}],["raw",{"_index":824,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"interfaces/RequestInterface.html":{}}}],["readonly",{"_index":60,"title":{},"body":{"classes/AfterAdminSignInEvent.html":{},"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterResetPasswordEvent.html":{},"classes/AfterSignInEvent.html":{},"classes/AfterSignInEventHandler.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AuthAdminController.html":{},"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GetUserQuery.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ObjectIDPipe.html":{},"classes/SignUpUserCommand.html":{},"classes/UpdateUserCommand.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/UtilsService.html":{}}}],["record",{"_index":357,"title":{},"body":{"controllers/AuthAdminController.html":{}}}],["reflect",{"_index":1280,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":335,"title":{},"body":{"controllers/AuthAdminController.html":{},"controllers/AuthController.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminRefreshTokenGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtRefreshTokenGuard.html":{},"coverage.html":{}}}],["refresh.strategy",{"_index":567,"title":{},"body":{"modules/AuthModule.html":{}}}],["refresh.strategy.ts",{"_index":746,"title":{},"body":{"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"coverage.html":{}}}],["refresh.strategy.ts:12",{"_index":747,"title":{},"body":{"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["refresh.strategy.ts:20",{"_index":749,"title":{},"body":{"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["refreshtoken",{"_index":61,"title":{},"body":{"classes/AfterAdminSignInEvent.html":{},"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterSignInEvent.html":{},"classes/AfterSignInEventHandler.html":{},"controllers/AuthAdminController.html":{},"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtTokensInterface.html":{},"classes/RefreshTokenDto.html":{},"classes/User.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{}}}],["refreshtoken(user",{"_index":310,"title":{},"body":{"controllers/AuthAdminController.html":{},"injectables/AuthAdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["refreshtokendto",{"_index":312,"title":{"classes/RefreshTokenDto.html":{}},"body":{"controllers/AuthAdminController.html":{},"injectables/AuthAdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["refreshtokenfieldname",{"_index":478,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["reply",{"_index":733,"title":{},"body":{"injectables/IpMiddleware.html":{}}}],["req",{"_index":320,"title":{},"body":{"controllers/AuthAdminController.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["req.user",{"_index":372,"title":{},"body":{"controllers/AuthAdminController.html":{},"controllers/AuthController.html":{},"miscellaneous/variables.html":{}}}],["request",{"_index":162,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthAdminController.html":{},"injectables/IpMiddleware.html":{},"injectables/LanguageMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/RequestInterface.html":{},"dependencies.html":{}}}],["request.clientip",{"_index":173,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/IpMiddleware.html":{}}}],["request.headers['accept",{"_index":781,"title":{},"body":{"injectables/LanguageMiddleware.html":{}}}],["request.language",{"_index":785,"title":{},"body":{"injectables/LanguageMiddleware.html":{}}}],["request.method",{"_index":170,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["request.traceid",{"_index":175,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["requestinterface",{"_index":143,"title":{"interfaces/RequestInterface.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthAdminController.html":{},"controllers/AuthController.html":{},"injectables/IpMiddleware.html":{},"injectables/LanguageMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/RequestInterface.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["requestip",{"_index":740,"title":{},"body":{"injectables/IpMiddleware.html":{}}}],["requestip.getclientip(request",{"_index":741,"title":{},"body":{"injectables/IpMiddleware.html":{}}}],["requestmethod",{"_index":219,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod.all",{"_index":303,"title":{},"body":{"modules/AppModule.html":{}}}],["required",{"_index":784,"title":{},"body":{"injectables/LanguageMiddleware.html":{}}}],["res",{"_index":777,"title":{},"body":{"injectables/LanguageMiddleware.html":{}}}],["reset",{"_index":93,"title":{},"body":{"classes/AfterResetPasswordEvent.html":{},"classes/AfterResetPasswordHandler.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CommonModule.html":{},"classes/ConfirmResetPasswordDto.html":{},"classes/User.html":{},"modules/UserModule.html":{},"modules/UtilsModule.html":{},"coverage.html":{},"overview.html":{}}}],["resetpassword",{"_index":505,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["resetpassword(data",{"_index":514,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetpassword(email",{"_index":1028,"title":{},"body":{"injectables/UserService.html":{}}}],["resetpassword(undefined",{"_index":589,"title":{},"body":{"injectables/AuthService.html":{}}}],["resetpassworddata",{"_index":872,"title":{"interfaces/ResetPasswordData.html":{}},"body":{"interfaces/ResetPasswordData.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["resetpassworddto",{"_index":515,"title":{"classes/ResetPasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["resetpasswordentity",{"_index":533,"title":{"classes/ResetPasswordEntity.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ResetPasswordEntity.html":{},"coverage.html":{}}}],["resolvers",{"_index":278,"title":{},"body":{"modules/AppModule.html":{}}}],["response",{"_index":347,"title":{},"body":{"controllers/AuthAdminController.html":{},"injectables/AuthAdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ResetPasswordEntity.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/UtilsService.html":{}}}],["response.ts",{"_index":647,"title":{},"body":{"classes/GeneralResponse.html":{},"coverage.html":{}}}],["response.ts:5",{"_index":650,"title":{},"body":{"classes/GeneralResponse.html":{}}}],["responsebody",{"_index":167,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["responses",{"_index":793,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["responsetime",{"_index":840,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["responsetime}ms",{"_index":845,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["responsible",{"_index":791,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["result",{"_index":648,"title":{},"body":{"classes/GeneralResponse.html":{},"injectables/UtilsService.html":{}}}],["results",{"_index":46,"title":{},"body":{"injectables/AdminLocalStrategy.html":{},"interfaces/AdminSignInPayloadInterface.html":{},"classes/AfterAdminSignInEvent.html":{},"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterResetPasswordEvent.html":{},"classes/AfterResetPasswordHandler.html":{},"classes/AfterSignInEvent.html":{},"classes/AfterSignInEventHandler.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthAdminController.html":{},"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"modules/CommonModule.html":{},"classes/ConfirmResetPasswordDto.html":{},"modules/CoreModule.html":{},"classes/GeneralResponse.html":{},"interfaces/GetTimeParams.html":{},"classes/GetUserHandler.html":{},"classes/GetUserQuery.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/IpMiddleware.html":{},"injectables/JwtAdminAuthenticationGuard.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminRefreshTokenGuard.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtAuthenticationGuard.html":{},"interfaces/JwtPayloadInterface.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtRefreshTokenGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtTokensInterface.html":{},"injectables/LanguageMiddleware.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ObjectIDPipe.html":{},"classes/RefreshTokenDto.html":{},"interfaces/RequestInterface.html":{},"interfaces/ResetPasswordData.html":{},"classes/ResetPasswordDto.html":{},"classes/ResetPasswordEntity.html":{},"classes/SignInDto.html":{},"interfaces/SignInPayloadInterface.html":{},"classes/SignUpDto.html":{},"classes/SignUpUserCommand.html":{},"classes/SignUpUserHandler.html":{},"classes/UpdateUserCommand.html":{},"classes/UpdateUserHandler.html":{},"classes/User.html":{},"injectables/UserAdminService.html":{},"controllers/UserController.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"classes/UserResetPassword.html":{},"injectables/UserService.html":{},"modules/UtilsModule.html":{},"injectables/UtilsService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":44,"title":{},"body":{"injectables/AdminLocalStrategy.html":{},"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterSignInEventHandler.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"controllers/AuthAdminController.html":{},"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/GetUserHandler.html":{},"controllers/HealthController.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ObjectIDPipe.html":{},"classes/SignUpUserHandler.html":{},"classes/UpdateUserHandler.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/UtilsService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":27,"title":{},"body":{"injectables/AdminLocalStrategy.html":{},"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterResetPasswordHandler.html":{},"classes/AfterSignInEventHandler.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthAdminController.html":{},"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GetUserHandler.html":{},"controllers/HealthController.html":{},"injectables/IpMiddleware.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ObjectIDPipe.html":{},"classes/SignUpUserHandler.html":{},"classes/UpdateUserHandler.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/UtilsService.html":{}}}],["routerpath",{"_index":827,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["rxjs",{"_index":810,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":812,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["salt",{"_index":1114,"title":{},"body":{"injectables/UtilsService.html":{}}}],["saveresetpassworddata",{"_index":1003,"title":{},"body":{"injectables/UserService.html":{}}}],["saveresetpassworddata(userid",{"_index":1030,"title":{},"body":{"injectables/UserService.html":{}}}],["schema",{"_index":939,"title":{},"body":{"classes/User.html":{},"modules/UserModule.html":{},"classes/UserResetPassword.html":{},"injectables/UtilsService.html":{}}}],["schema.types.objectid",{"_index":1137,"title":{},"body":{"injectables/UtilsService.html":{}}}],["schema.types.objectid(stringid",{"_index":1156,"title":{},"body":{"injectables/UtilsService.html":{}}}],["schemafactory",{"_index":940,"title":{},"body":{"classes/User.html":{},"classes/UserResetPassword.html":{}}}],["schemafactory.createforclass(user",{"_index":946,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(userresetpassword",{"_index":995,"title":{},"body":{"classes/UserResetPassword.html":{},"miscellaneous/variables.html":{}}}],["schemas/user.schema",{"_index":674,"title":{},"body":{"classes/GetUserHandler.html":{},"classes/SignUpUserHandler.html":{},"classes/UpdateUserHandler.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["scriptsrc",{"_index":1347,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scryptsync",{"_index":1150,"title":{},"body":{"injectables/UtilsService.html":{}}}],["scryptsync(value",{"_index":1161,"title":{},"body":{"injectables/UtilsService.html":{}}}],["secret",{"_index":495,"title":{},"body":{"injectables/AuthCommonService.html":{},"modules/AuthModule.html":{}}}],["secretkey",{"_index":491,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["secretorkey",{"_index":754,"title":{},"body":{"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["self",{"_index":1341,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sentry",{"_index":138,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/LoggingInterceptor.html":{},"miscellaneous/functions.html":{}}}],["sentry.captureexception(exception",{"_index":183,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["sentry.starttransaction",{"_index":835,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["sentry/node",{"_index":139,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/LoggingInterceptor.html":{},"dependencies.html":{}}}],["seret",{"_index":575,"title":{},"body":{"modules/AuthModule.html":{}}}],["serializeuserdata",{"_index":1004,"title":{},"body":{"injectables/UserService.html":{}}}],["serializeuserdata(user",{"_index":1032,"title":{},"body":{"injectables/UserService.html":{}}}],["service",{"_index":368,"title":{},"body":{"controllers/AuthAdminController.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["services/auth",{"_index":86,"title":{},"body":{"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterSignInEventHandler.html":{},"modules/AuthModule.html":{}}}],["services/auth.admin.service",{"_index":36,"title":{},"body":{"injectables/AdminLocalStrategy.html":{},"controllers/AuthAdminController.html":{},"modules/AuthModule.html":{}}}],["services/auth.service",{"_index":525,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["services/user.admin.service",{"_index":981,"title":{},"body":{"modules/UserModule.html":{}}}],["services/user.service",{"_index":960,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["set",{"_index":1294,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setdescription('apis",{"_index":1353,"title":{},"body":{"miscellaneous/variables.html":{}}}],["settitle('exchange",{"_index":1352,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setupsentry",{"_index":1228,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setupsentry(configservice",{"_index":1293,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setversion('1.0",{"_index":1355,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shared/configs/app.config",{"_index":224,"title":{},"body":{"modules/AppModule.html":{}}}],["shared/configs/constants",{"_index":329,"title":{},"body":{"controllers/AuthAdminController.html":{},"classes/ResetPasswordEntity.html":{},"injectables/UtilsService.html":{}}}],["shared/configs/env.validation.schema",{"_index":237,"title":{},"body":{"modules/AppModule.html":{}}}],["shared/decorators/get",{"_index":338,"title":{},"body":{"controllers/AuthAdminController.html":{},"controllers/AuthController.html":{}}}],["shared/dto/signup.dto",{"_index":530,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignUpUserCommand.html":{},"injectables/UserService.html":{}}}],["shared/entities/general",{"_index":346,"title":{},"body":{"controllers/AuthAdminController.html":{},"injectables/AuthAdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ResetPasswordEntity.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/UtilsService.html":{}}}],["shared/entities/user.entity",{"_index":332,"title":{},"body":{"controllers/AuthAdminController.html":{},"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["shared/filters/all",{"_index":234,"title":{},"body":{"modules/AppModule.html":{}}}],["shared/guards/admin",{"_index":343,"title":{},"body":{"controllers/AuthAdminController.html":{}}}],["shared/guards/auth.guard",{"_index":529,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["shared/interceptors/logging.interceptor",{"_index":239,"title":{},"body":{"modules/AppModule.html":{}}}],["shared/middlewares/ip.middleware",{"_index":241,"title":{},"body":{"modules/AppModule.html":{}}}],["shared/middlewares/language.middleware",{"_index":243,"title":{},"body":{"modules/AppModule.html":{}}}],["shared/types/general",{"_index":916,"title":{},"body":{"classes/UpdateUserCommand.html":{},"injectables/UserService.html":{}}}],["shared/types/request.interface",{"_index":331,"title":{},"body":{"controllers/AuthAdminController.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["signin",{"_index":308,"title":{},"body":{"controllers/AuthAdminController.html":{},"controllers/AuthController.html":{}}}],["signin(@req",{"_index":371,"title":{},"body":{"controllers/AuthAdminController.html":{},"controllers/AuthController.html":{}}}],["signin(req",{"_index":317,"title":{},"body":{"controllers/AuthAdminController.html":{},"controllers/AuthController.html":{}}}],["signin.event",{"_index":85,"title":{},"body":{"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterSignInEventHandler.html":{},"injectables/AuthAdminService.html":{},"injectables/AuthService.html":{}}}],["signin.event.handler.ts",{"_index":69,"title":{},"body":{"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterSignInEventHandler.html":{},"coverage.html":{}}}],["signin.event.handler.ts:12",{"_index":78,"title":{},"body":{"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterSignInEventHandler.html":{}}}],["signin.event.handler.ts:9",{"_index":75,"title":{},"body":{"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterSignInEventHandler.html":{}}}],["signin.event.ts",{"_index":58,"title":{},"body":{"classes/AfterAdminSignInEvent.html":{},"classes/AfterSignInEvent.html":{},"coverage.html":{}}}],["signin.event.ts:1",{"_index":64,"title":{},"body":{"classes/AfterAdminSignInEvent.html":{},"classes/AfterSignInEvent.html":{}}}],["signin.event.ts:3",{"_index":66,"title":{},"body":{"classes/AfterAdminSignInEvent.html":{},"classes/AfterSignInEvent.html":{}}}],["signin.event.ts:4",{"_index":65,"title":{},"body":{"classes/AfterAdminSignInEvent.html":{},"classes/AfterSignInEvent.html":{}}}],["signindto",{"_index":390,"title":{"classes/SignInDto.html":{}},"body":{"injectables/AuthAdminService.html":{},"injectables/AuthService.html":{},"classes/SignInDto.html":{},"coverage.html":{}}}],["signinpayloadinterface",{"_index":436,"title":{"interfaces/SignInPayloadInterface.html":{}},"body":{"injectables/AuthCommonService.html":{},"interfaces/SignInPayloadInterface.html":{},"coverage.html":{}}}],["signoptions",{"_index":577,"title":{},"body":{"modules/AuthModule.html":{}}}],["signout",{"_index":309,"title":{},"body":{"controllers/AuthAdminController.html":{},"injectables/AuthAdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signout(@getuser",{"_index":378,"title":{},"body":{"controllers/AuthAdminController.html":{},"controllers/AuthController.html":{}}}],["signout(user",{"_index":321,"title":{},"body":{"controllers/AuthAdminController.html":{},"injectables/AuthAdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signup",{"_index":506,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(@body",{"_index":542,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(data",{"_index":520,"title":{},"body":{"controllers/AuthController.html":{}}}],["signupdto",{"_index":521,"title":{"classes/SignUpDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignUpDto.html":{},"classes/SignUpUserCommand.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["signupusercommand",{"_index":894,"title":{"classes/SignUpUserCommand.html":{}},"body":{"classes/SignUpUserCommand.html":{},"classes/SignUpUserHandler.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["signupusercommand(copyofdata",{"_index":1049,"title":{},"body":{"injectables/UserService.html":{}}}],["signupuserhandler",{"_index":900,"title":{"classes/SignUpUserHandler.html":{}},"body":{"classes/SignUpUserHandler.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["size",{"_index":721,"title":{},"body":{"controllers/HealthController.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AdminLocalStrategy.html":{},"interfaces/AdminSignInPayloadInterface.html":{},"classes/AfterAdminSignInEvent.html":{},"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterResetPasswordEvent.html":{},"classes/AfterResetPasswordHandler.html":{},"classes/AfterSignInEvent.html":{},"classes/AfterSignInEventHandler.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthAdminController.html":{},"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"modules/CommonModule.html":{},"classes/ConfirmResetPasswordDto.html":{},"modules/CoreModule.html":{},"classes/GeneralResponse.html":{},"interfaces/GetTimeParams.html":{},"classes/GetUserHandler.html":{},"classes/GetUserQuery.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/IpMiddleware.html":{},"injectables/JwtAdminAuthenticationGuard.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminRefreshTokenGuard.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtAuthenticationGuard.html":{},"interfaces/JwtPayloadInterface.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtRefreshTokenGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtTokensInterface.html":{},"injectables/LanguageMiddleware.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ObjectIDPipe.html":{},"classes/RefreshTokenDto.html":{},"interfaces/RequestInterface.html":{},"interfaces/ResetPasswordData.html":{},"classes/ResetPasswordDto.html":{},"classes/ResetPasswordEntity.html":{},"classes/SignInDto.html":{},"interfaces/SignInPayloadInterface.html":{},"classes/SignUpDto.html":{},"classes/SignUpUserCommand.html":{},"classes/SignUpUserHandler.html":{},"classes/UpdateUserCommand.html":{},"classes/UpdateUserHandler.html":{},"classes/User.html":{},"injectables/UserAdminService.html":{},"controllers/UserController.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"classes/UserResetPassword.html":{},"injectables/UserService.html":{},"modules/UtilsModule.html":{},"injectables/UtilsService.html":{}}}],["sourcedate",{"_index":1201,"title":{},"body":{"injectables/UtilsService.html":{}}}],["src/.../constants.ts",{"_index":1321,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../general",{"_index":1315,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../get",{"_index":1323,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../index.ts",{"_index":1322,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../languages.enum.ts",{"_index":1288,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":1292,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../request.interface.ts",{"_index":1314,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../reset",{"_index":1318,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../user.schema.ts",{"_index":1317,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":189,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:8",{"_index":192,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":211,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:94",{"_index":216,"title":{},"body":{"modules/AppModule.html":{}}}],["src/common/auth/auth.module.ts",{"_index":556,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/common/auth/controllers/auth.admin.controller.ts",{"_index":307,"title":{},"body":{"controllers/AuthAdminController.html":{},"coverage.html":{}}}],["src/common/auth/controllers/auth.admin.controller.ts:31",{"_index":319,"title":{},"body":{"controllers/AuthAdminController.html":{}}}],["src/common/auth/controllers/auth.admin.controller.ts:38",{"_index":315,"title":{},"body":{"controllers/AuthAdminController.html":{}}}],["src/common/auth/controllers/auth.admin.controller.ts:48",{"_index":324,"title":{},"body":{"controllers/AuthAdminController.html":{}}}],["src/common/auth/controllers/auth.controller.ts",{"_index":502,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/common/auth/controllers/auth.controller.ts:32",{"_index":517,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/common/auth/controllers/auth.controller.ts:38",{"_index":519,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/common/auth/controllers/auth.controller.ts:44",{"_index":513,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/common/auth/controllers/auth.controller.ts:52",{"_index":523,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/common/auth/controllers/auth.controller.ts:57",{"_index":516,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/common/auth/controllers/auth.controller.ts:64",{"_index":511,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/common/auth/dto/confirm",{"_index":635,"title":{},"body":{"classes/ConfirmResetPasswordDto.html":{},"coverage.html":{}}}],["src/common/auth/dto/refresh",{"_index":859,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/common/auth/dto/reset",{"_index":875,"title":{},"body":{"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["src/common/auth/dto/signin.dto.ts",{"_index":884,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["src/common/auth/dto/signin.dto.ts:16",{"_index":885,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/common/auth/dto/signin.dto.ts:23",{"_index":887,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/common/auth/entities/reset",{"_index":876,"title":{},"body":{"classes/ResetPasswordEntity.html":{},"coverage.html":{}}}],["src/common/auth/events/handlers/afrer",{"_index":68,"title":{},"body":{"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterResetPasswordHandler.html":{},"classes/AfterSignInEventHandler.html":{},"coverage.html":{}}}],["src/common/auth/events/handlers/index.ts",{"_index":1214,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/auth/events/impl/after",{"_index":57,"title":{},"body":{"classes/AfterAdminSignInEvent.html":{},"classes/AfterResetPasswordEvent.html":{},"classes/AfterSignInEvent.html":{},"coverage.html":{}}}],["src/common/auth/guards/auth",{"_index":758,"title":{},"body":{"injectables/JwtAdminRefreshTokenGuard.html":{},"injectables/JwtRefreshTokenGuard.html":{},"coverage.html":{}}}],["src/common/auth/services/auth",{"_index":412,"title":{},"body":{"injectables/AuthCommonService.html":{},"coverage.html":{}}}],["src/common/auth/services/auth.admin.service.ts",{"_index":380,"title":{},"body":{"injectables/AuthAdminService.html":{},"coverage.html":{}}}],["src/common/auth/services/auth.admin.service.ts:13",{"_index":385,"title":{},"body":{"injectables/AuthAdminService.html":{}}}],["src/common/auth/services/auth.admin.service.ts:21",{"_index":387,"title":{},"body":{"injectables/AuthAdminService.html":{}}}],["src/common/auth/services/auth.admin.service.ts:38",{"_index":391,"title":{},"body":{"injectables/AuthAdminService.html":{}}}],["src/common/auth/services/auth.admin.service.ts:59",{"_index":388,"title":{},"body":{"injectables/AuthAdminService.html":{}}}],["src/common/auth/services/auth.service.ts",{"_index":581,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/common/auth/services/auth.service.ts:18",{"_index":583,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/common/auth/services/auth.service.ts:26",{"_index":592,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/common/auth/services/auth.service.ts:40",{"_index":588,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/common/auth/services/auth.service.ts:56",{"_index":591,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/common/auth/services/auth.service.ts:62",{"_index":587,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/common/auth/services/auth.service.ts:68",{"_index":590,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/common/auth/services/auth.service.ts:85",{"_index":585,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/common/auth/strategies/admin.local.strategy.ts",{"_index":6,"title":{},"body":{"injectables/AdminLocalStrategy.html":{},"coverage.html":{}}}],["src/common/auth/strategies/admin.local.strategy.ts:10",{"_index":15,"title":{},"body":{"injectables/AdminLocalStrategy.html":{}}}],["src/common/auth/strategies/admin.local.strategy.ts:15",{"_index":25,"title":{},"body":{"injectables/AdminLocalStrategy.html":{}}}],["src/common/auth/strategies/jwt",{"_index":745,"title":{},"body":{"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"coverage.html":{}}}],["src/common/auth/strategies/jwt.strategy.ts",{"_index":772,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/common/auth/strategies/jwt.strategy.ts:17",{"_index":774,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/common/auth/strategies/jwt.strategy.ts:9",{"_index":773,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/common/auth/strategies/local.strategy.ts",{"_index":786,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/common/auth/strategies/local.strategy.ts:12",{"_index":788,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/common/auth/strategies/local.strategy.ts:7",{"_index":787,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/common/auth/types/admin.signin.payload.ts",{"_index":51,"title":{},"body":{"interfaces/AdminSignInPayloadInterface.html":{},"coverage.html":{}}}],["src/common/auth/types/jwt",{"_index":767,"title":{},"body":{"interfaces/JwtPayloadInterface.html":{},"interfaces/JwtTokensInterface.html":{},"coverage.html":{}}}],["src/common/auth/types/signin.payload.ts",{"_index":888,"title":{},"body":{"interfaces/SignInPayloadInterface.html":{},"coverage.html":{}}}],["src/common/common.module.ts",{"_index":632,"title":{},"body":{"modules/CommonModule.html":{}}}],["src/common/user/commands/handlers/index.ts",{"_index":1221,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/user/commands/handlers/signup",{"_index":901,"title":{},"body":{"classes/SignUpUserHandler.html":{},"coverage.html":{}}}],["src/common/user/commands/handlers/update",{"_index":919,"title":{},"body":{"classes/UpdateUserHandler.html":{},"coverage.html":{}}}],["src/common/user/commands/impl/signup",{"_index":895,"title":{},"body":{"classes/SignUpUserCommand.html":{},"coverage.html":{}}}],["src/common/user/commands/impl/update",{"_index":912,"title":{},"body":{"classes/UpdateUserCommand.html":{},"coverage.html":{}}}],["src/common/user/controllers/user.controller.ts",{"_index":950,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/common/user/controllers/user.controller.ts:17",{"_index":956,"title":{},"body":{"controllers/UserController.html":{}}}],["src/common/user/controllers/user.controller.ts:26",{"_index":959,"title":{},"body":{"controllers/UserController.html":{}}}],["src/common/user/dto/change",{"_index":603,"title":{},"body":{"classes/ChangePasswordDto.html":{},"coverage.html":{}}}],["src/common/user/queries/handlers/get",{"_index":660,"title":{},"body":{"classes/GetUserHandler.html":{},"coverage.html":{}}}],["src/common/user/queries/handlers/index.ts",{"_index":1222,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/user/queries/impl/get",{"_index":679,"title":{},"body":{"classes/GetUserQuery.html":{},"coverage.html":{}}}],["src/common/user/schemas/reset",{"_index":987,"title":{},"body":{"classes/UserResetPassword.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/common/user/schemas/user.schema.ts",{"_index":923,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/common/user/schemas/user.schema.ts:13",{"_index":929,"title":{},"body":{"classes/User.html":{}}}],["src/common/user/schemas/user.schema.ts:16",{"_index":932,"title":{},"body":{"classes/User.html":{}}}],["src/common/user/schemas/user.schema.ts:19",{"_index":933,"title":{},"body":{"classes/User.html":{}}}],["src/common/user/schemas/user.schema.ts:22",{"_index":934,"title":{},"body":{"classes/User.html":{}}}],["src/common/user/schemas/user.schema.ts:25",{"_index":927,"title":{},"body":{"classes/User.html":{}}}],["src/common/user/schemas/user.schema.ts:30",{"_index":937,"title":{},"body":{"classes/User.html":{}}}],["src/common/user/schemas/user.schema.ts:33",{"_index":931,"title":{},"body":{"classes/User.html":{}}}],["src/common/user/schemas/user.schema.ts:36",{"_index":928,"title":{},"body":{"classes/User.html":{}}}],["src/common/user/schemas/user.schema.ts:39",{"_index":938,"title":{},"body":{"classes/User.html":{}}}],["src/common/user/services/user.admin.service.ts",{"_index":948,"title":{},"body":{"injectables/UserAdminService.html":{},"coverage.html":{}}}],["src/common/user/services/user.service.ts",{"_index":996,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/common/user/services/user.service.ts:107",{"_index":1015,"title":{},"body":{"injectables/UserService.html":{}}}],["src/common/user/services/user.service.ts:134",{"_index":1031,"title":{},"body":{"injectables/UserService.html":{}}}],["src/common/user/services/user.service.ts:150",{"_index":1036,"title":{},"body":{"injectables/UserService.html":{}}}],["src/common/user/services/user.service.ts:184",{"_index":1034,"title":{},"body":{"injectables/UserService.html":{}}}],["src/common/user/services/user.service.ts:202",{"_index":1026,"title":{},"body":{"injectables/UserService.html":{}}}],["src/common/user/services/user.service.ts:206",{"_index":1027,"title":{},"body":{"injectables/UserService.html":{}}}],["src/common/user/services/user.service.ts:21",{"_index":1010,"title":{},"body":{"injectables/UserService.html":{}}}],["src/common/user/services/user.service.ts:29",{"_index":1017,"title":{},"body":{"injectables/UserService.html":{}}}],["src/common/user/services/user.service.ts:45",{"_index":1013,"title":{},"body":{"injectables/UserService.html":{}}}],["src/common/user/services/user.service.ts:60",{"_index":1023,"title":{},"body":{"injectables/UserService.html":{}}}],["src/common/user/services/user.service.ts:64",{"_index":1025,"title":{},"body":{"injectables/UserService.html":{}}}],["src/common/user/services/user.service.ts:77",{"_index":1021,"title":{},"body":{"injectables/UserService.html":{}}}],["src/common/user/services/user.service.ts:81",{"_index":1038,"title":{},"body":{"injectables/UserService.html":{}}}],["src/common/user/services/user.service.ts:85",{"_index":1019,"title":{},"body":{"injectables/UserService.html":{}}}],["src/common/user/services/user.service.ts:91",{"_index":1029,"title":{},"body":{"injectables/UserService.html":{}}}],["src/common/user/types/reset",{"_index":873,"title":{},"body":{"interfaces/ResetPasswordData.html":{},"coverage.html":{}}}],["src/common/user/user.module.ts",{"_index":979,"title":{},"body":{"modules/UserModule.html":{}}}],["src/common/utils/types/get",{"_index":652,"title":{},"body":{"interfaces/GetTimeParams.html":{},"coverage.html":{}}}],["src/common/utils/utils.module.ts",{"_index":1086,"title":{},"body":{"modules/UtilsModule.html":{}}}],["src/common/utils/utils.service.ts",{"_index":1088,"title":{},"body":{"injectables/UtilsService.html":{},"coverage.html":{}}}],["src/common/utils/utils.service.ts:105",{"_index":1126,"title":{},"body":{"injectables/UtilsService.html":{}}}],["src/common/utils/utils.service.ts:109",{"_index":1128,"title":{},"body":{"injectables/UtilsService.html":{}}}],["src/common/utils/utils.service.ts:113",{"_index":1129,"title":{},"body":{"injectables/UtilsService.html":{}}}],["src/common/utils/utils.service.ts:117",{"_index":1127,"title":{},"body":{"injectables/UtilsService.html":{}}}],["src/common/utils/utils.service.ts:121",{"_index":1123,"title":{},"body":{"injectables/UtilsService.html":{}}}],["src/common/utils/utils.service.ts:133",{"_index":1125,"title":{},"body":{"injectables/UtilsService.html":{}}}],["src/common/utils/utils.service.ts:143",{"_index":1134,"title":{},"body":{"injectables/UtilsService.html":{}}}],["src/common/utils/utils.service.ts:19",{"_index":1107,"title":{},"body":{"injectables/UtilsService.html":{}}}],["src/common/utils/utils.service.ts:25",{"_index":1131,"title":{},"body":{"injectables/UtilsService.html":{}}}],["src/common/utils/utils.service.ts:29",{"_index":1136,"title":{},"body":{"injectables/UtilsService.html":{}}}],["src/common/utils/utils.service.ts:33",{"_index":1120,"title":{},"body":{"injectables/UtilsService.html":{}}}],["src/common/utils/utils.service.ts:39",{"_index":1121,"title":{},"body":{"injectables/UtilsService.html":{}}}],["src/common/utils/utils.service.ts:43",{"_index":1109,"title":{},"body":{"injectables/UtilsService.html":{}}}],["src/common/utils/utils.service.ts:49",{"_index":1112,"title":{},"body":{"injectables/UtilsService.html":{}}}],["src/common/utils/utils.service.ts:53",{"_index":1115,"title":{},"body":{"injectables/UtilsService.html":{}}}],["src/common/utils/utils.service.ts:62",{"_index":1138,"title":{},"body":{"injectables/UtilsService.html":{}}}],["src/common/utils/utils.service.ts:68",{"_index":1144,"title":{},"body":{"injectables/UtilsService.html":{}}}],["src/common/utils/utils.service.ts:81",{"_index":1117,"title":{},"body":{"injectables/UtilsService.html":{}}}],["src/core/core.module.ts",{"_index":645,"title":{},"body":{"modules/CoreModule.html":{}}}],["src/core/health/health.controller.ts",{"_index":687,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/core/health/health.controller.ts:24",{"_index":693,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/core/health/health.controller.ts:30",{"_index":695,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/core/health/health.controller.ts:39",{"_index":691,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/core/health/health.module.ts",{"_index":728,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/main.ts",{"_index":1227,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/shared/configs/constants.ts",{"_index":1234,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/decorators/get",{"_index":1235,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/dto/signup.dto.ts",{"_index":889,"title":{},"body":{"classes/SignUpDto.html":{},"coverage.html":{}}}],["src/shared/dto/signup.dto.ts:17",{"_index":890,"title":{},"body":{"classes/SignUpDto.html":{}}}],["src/shared/dto/signup.dto.ts:23",{"_index":892,"title":{},"body":{"classes/SignUpDto.html":{}}}],["src/shared/dto/signup.dto.ts:37",{"_index":893,"title":{},"body":{"classes/SignUpDto.html":{}}}],["src/shared/entities/general",{"_index":646,"title":{},"body":{"classes/GeneralResponse.html":{},"coverage.html":{}}}],["src/shared/entities/user.entity.ts",{"_index":967,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["src/shared/entities/user.entity.ts:2",{"_index":970,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/shared/entities/user.entity.ts:3",{"_index":969,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/shared/entities/user.entity.ts:4",{"_index":972,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/shared/entities/user.entity.ts:5",{"_index":974,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/shared/entities/user.entity.ts:6",{"_index":973,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/shared/entities/user.entity.ts:7",{"_index":971,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/shared/filters/all",{"_index":116,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["src/shared/guards/admin",{"_index":742,"title":{},"body":{"injectables/JwtAdminAuthenticationGuard.html":{},"coverage.html":{}}}],["src/shared/guards/auth.guard.ts",{"_index":766,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"coverage.html":{}}}],["src/shared/interceptors/logging.interceptor.ts",{"_index":789,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["src/shared/interceptors/logging.interceptor.ts:21",{"_index":799,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/shared/interceptors/logging.interceptor.ts:28",{"_index":804,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/shared/middlewares/ip.middleware.ts",{"_index":731,"title":{},"body":{"injectables/IpMiddleware.html":{},"coverage.html":{}}}],["src/shared/middlewares/ip.middleware.ts:9",{"_index":736,"title":{},"body":{"injectables/IpMiddleware.html":{}}}],["src/shared/middlewares/language.middleware.ts",{"_index":776,"title":{},"body":{"injectables/LanguageMiddleware.html":{},"coverage.html":{}}}],["src/shared/middlewares/language.middleware.ts:11",{"_index":778,"title":{},"body":{"injectables/LanguageMiddleware.html":{}}}],["src/shared/pipes/objectid.pipe.ts",{"_index":848,"title":{},"body":{"injectables/ObjectIDPipe.html":{},"coverage.html":{}}}],["src/shared/pipes/objectid.pipe.ts:10",{"_index":851,"title":{},"body":{"injectables/ObjectIDPipe.html":{}}}],["src/shared/pipes/objectid.pipe.ts:13",{"_index":854,"title":{},"body":{"injectables/ObjectIDPipe.html":{}}}],["src/shared/types/general",{"_index":1319,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/shared/types/languages.enum.ts",{"_index":1289,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/shared/types/request.interface.ts",{"_index":864,"title":{},"body":{"interfaces/RequestInterface.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["staging",{"_index":1326,"title":{},"body":{"miscellaneous/variables.html":{}}}],["staging_env",{"_index":141,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/LoggingInterceptor.html":{},"classes/ResetPasswordEntity.html":{},"injectables/UtilsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["staging_env].includes",{"_index":156,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["started",{"_index":1297,"title":{"index.html":{}},"body":{}}],["statements",{"_index":1209,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":354,"title":{},"body":{"controllers/AuthAdminController.html":{}}}],["statuscode",{"_index":168,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["statusmessage",{"_index":817,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["stopatfirsterror",{"_index":1333,"title":{},"body":{"miscellaneous/variables.html":{}}}],["storage",{"_index":717,"title":{},"body":{"controllers/HealthController.html":{}}}],["strategies/admin.local.strategy",{"_index":570,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/jwt",{"_index":566,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/jwt.strategy",{"_index":565,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":569,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":30,"title":{},"body":{"injectables/AdminLocalStrategy.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":23,"title":{},"body":{"injectables/AdminLocalStrategy.html":{},"interfaces/AdminSignInPayloadInterface.html":{},"classes/AfterAdminSignInEvent.html":{},"classes/AfterResetPasswordEvent.html":{},"classes/AfterSignInEvent.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AuthCommonService.html":{},"classes/ChangePasswordDto.html":{},"classes/ConfirmResetPasswordDto.html":{},"classes/GetUserQuery.html":{},"interfaces/JwtPayloadInterface.html":{},"interfaces/JwtTokensInterface.html":{},"injectables/LocalStrategy.html":{},"injectables/ObjectIDPipe.html":{},"classes/RefreshTokenDto.html":{},"interfaces/RequestInterface.html":{},"interfaces/ResetPasswordData.html":{},"classes/ResetPasswordDto.html":{},"classes/ResetPasswordEntity.html":{},"classes/SignInDto.html":{},"interfaces/SignInPayloadInterface.html":{},"classes/SignUpDto.html":{},"classes/UpdateUserCommand.html":{},"classes/User.html":{},"classes/UserEntity.html":{},"classes/UserResetPassword.html":{},"injectables/UserService.html":{},"injectables/UtilsService.html":{},"miscellaneous/variables.html":{}}}],["stringid",{"_index":1132,"title":{},"body":{"injectables/UtilsService.html":{}}}],["stylesrc",{"_index":1342,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sub",{"_index":771,"title":{},"body":{"interfaces/JwtPayloadInterface.html":{}}}],["subtract(minusamount",{"_index":1198,"title":{},"body":{"injectables/UtilsService.html":{}}}],["successfully",{"_index":358,"title":{},"body":{"controllers/AuthAdminController.html":{}}}],["super",{"_index":42,"title":{},"body":{"injectables/AdminLocalStrategy.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":1299,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1300,"title":{},"body":{"modules.html":{}}}],["swaggermodule.createdocument(app",{"_index":1358,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggermodule.setup(configservice.get('apidocroute",{"_index":1359,"title":{},"body":{"miscellaneous/variables.html":{}}}],["symbol",{"_index":617,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ConfirmResetPasswordDto.html":{},"classes/SignUpDto.html":{}}}],["t",{"_index":1104,"title":{},"body":{"injectables/UtilsService.html":{}}}],["t(key",{"_index":1133,"title":{},"body":{"injectables/UtilsService.html":{}}}],["table",{"_index":1241,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1240,"title":{},"body":{"coverage.html":{}}}],["tap",{"_index":811,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["teriggered",{"_index":108,"title":{},"body":{"classes/AfterResetPasswordHandler.html":{}}}],["terminusmodule",{"_index":730,"title":{},"body":{"modules/HealthModule.html":{}}}],["test",{"_index":1327,"title":{},"body":{"miscellaneous/variables.html":{}}}],["test_env",{"_index":1153,"title":{},"body":{"injectables/UtilsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["test_env].includes(configservice.get('env",{"_index":1350,"title":{},"body":{"miscellaneous/variables.html":{}}}],["this.authcommonservice.updaterefreshtoken(userid",{"_index":114,"title":{},"body":{"classes/AfterSignInEventHandler.html":{}}}],["this.authservice.validateuser",{"_index":45,"title":{},"body":{"injectables/AdminLocalStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["this.checkemailexist(copyofdata.email",{"_index":1045,"title":{},"body":{"injectables/UserService.html":{}}}],["this.commandbus.execute",{"_index":1048,"title":{},"body":{"injectables/UserService.html":{}}}],["this.commandbus.execute(new",{"_index":1058,"title":{},"body":{"injectables/UserService.html":{}}}],["this.commonservice.checkuser(email",{"_index":402,"title":{},"body":{"injectables/AuthAdminService.html":{},"injectables/AuthService.html":{}}}],["this.commonservice.emptyrefreshtoken(user.id",{"_index":410,"title":{},"body":{"injectables/AuthAdminService.html":{},"injectables/AuthService.html":{}}}],["this.commonservice.getjwttokens",{"_index":405,"title":{},"body":{"injectables/AuthAdminService.html":{}}}],["this.commonservice.getjwttokens(user",{"_index":593,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.commonservice.getnewaccessandrefreshtoken(userinfo",{"_index":400,"title":{},"body":{"injectables/AuthAdminService.html":{},"injectables/AuthService.html":{}}}],["this.commonservice.getuserifrefreshtokenmatches",{"_index":398,"title":{},"body":{"injectables/AuthAdminService.html":{},"injectables/AuthService.html":{}}}],["this.commonservice.updaterefreshtoken(userid",{"_index":90,"title":{},"body":{"classes/AfterAdminSignInEventHandler.html":{}}}],["this.configservice.get('app.env",{"_index":834,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["this.configservice.get('env",{"_index":157,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/UtilsService.html":{}}}],["this.configservice.get('user.resetpasswordexpire",{"_index":1076,"title":{},"body":{"injectables/UserService.html":{}}}],["this.configservice.get(expiretime",{"_index":498,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["this.configservice.get(secretkey",{"_index":496,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["this.disk.checkstorage('disk",{"_index":722,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.emptyrefreshtoken(user._id.tohexstring",{"_index":482,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["this.encryptvalue(value",{"_index":1169,"title":{},"body":{"injectables/UtilsService.html":{}}}],["this.eventbus.publish",{"_index":407,"title":{},"body":{"injectables/AuthAdminService.html":{},"injectables/AuthService.html":{}}}],["this.eventbus.publish(new",{"_index":597,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.gethttpmessage(exception",{"_index":164,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.getjwtpayload",{"_index":470,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["this.getjwttoken(jwtpayload",{"_index":472,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["this.getjwttoken(payload",{"_index":483,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["this.getrefreshtoken(jwtpayload",{"_index":473,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["this.getrefreshtoken(payload",{"_index":484,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["this.getrefreshtokenoptions(isadmin",{"_index":490,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["this.getsalt",{"_index":1158,"title":{},"body":{"injectables/UtilsService.html":{}}}],["this.getuser",{"_index":1054,"title":{},"body":{"injectables/UserService.html":{}}}],["this.getuser(conditions",{"_index":1052,"title":{},"body":{"injectables/UserService.html":{}}}],["this.getuserbyemail(email",{"_index":1061,"title":{},"body":{"injectables/UserService.html":{}}}],["this.getuserbyid(userid",{"_index":1060,"title":{},"body":{"injectables/UserService.html":{}}}],["this.health.check",{"_index":709,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.health.check([async",{"_index":706,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.httpadapterhost",{"_index":159,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.i18nservice.t(key",{"_index":1204,"title":{},"body":{"injectables/UtilsService.html":{}}}],["this.jwtservice.signasync",{"_index":489,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["this.jwtservice.signasync(payload",{"_index":488,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["this.memory.checkheap('memory_heap",{"_index":710,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.memory.checkrss('memory_rss",{"_index":713,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.model",{"_index":909,"title":{},"body":{"classes/SignUpUserHandler.html":{}}}],["this.model.findbyidandupdate(userid",{"_index":922,"title":{},"body":{"classes/UpdateUserHandler.html":{}}}],["this.model.findone(conditions",{"_index":678,"title":{},"body":{"classes/GetUserHandler.html":{}}}],["this.mongoose.pingcheck('mongoose",{"_index":707,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.querybus.execute(new",{"_index":1056,"title":{},"body":{"injectables/UserService.html":{}}}],["this.saveresetpassworddata(user._id.tohexstring",{"_index":1063,"title":{},"body":{"injectables/UserService.html":{}}}],["this.serializeuserdata(user",{"_index":1050,"title":{},"body":{"injectables/UserService.html":{}}}],["this.service.confirmresetpassword(data",{"_index":545,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.service.createuser(data",{"_index":543,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.service.getprofile(user.id",{"_index":966,"title":{},"body":{"controllers/UserController.html":{}}}],["this.service.refreshtoken(user",{"_index":375,"title":{},"body":{"controllers/AuthAdminController.html":{},"controllers/AuthController.html":{}}}],["this.service.resetpassword(data",{"_index":544,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.service.signout(user",{"_index":379,"title":{},"body":{"controllers/AuthAdminController.html":{},"controllers/AuthController.html":{}}}],["this.service.updatepassword(user.id",{"_index":963,"title":{},"body":{"controllers/UserController.html":{}}}],["this.updaterefreshtoken",{"_index":485,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["this.updateuser(user._id.tohexstring",{"_index":1072,"title":{},"body":{"injectables/UserService.html":{}}}],["this.updateuser(userid",{"_index":1077,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.confirmresetpassword(email",{"_index":601,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.create(data",{"_index":595,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.getuserbyemail(email",{"_index":465,"title":{},"body":{"injectables/AuthCommonService.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["this.userservice.resetpassword(email",{"_index":596,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.serializeuserdata",{"_index":487,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["this.userservice.serializeuserdata(user",{"_index":409,"title":{},"body":{"injectables/AuthAdminService.html":{},"injectables/AuthService.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["this.userservice.updateuser(userid",{"_index":476,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["this.utilsservice.bcrypehash",{"_index":1047,"title":{},"body":{"injectables/UserService.html":{}}}],["this.utilsservice.bcrypehash(newpassword",{"_index":1080,"title":{},"body":{"injectables/UserService.html":{}}}],["this.utilsservice.bcrypehash(password",{"_index":1071,"title":{},"body":{"injectables/UserService.html":{}}}],["this.utilsservice.comparebcrypehash",{"_index":467,"title":{},"body":{"injectables/AuthCommonService.html":{},"injectables/UserService.html":{}}}],["this.utilsservice.generatenumericalcode().tostring",{"_index":1062,"title":{},"body":{"injectables/UserService.html":{}}}],["this.utilsservice.getgeneralresponse(true",{"_index":411,"title":{},"body":{"injectables/AuthAdminService.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.utilsservice.gettime",{"_index":1075,"title":{},"body":{"injectables/UserService.html":{}}}],["this.utilsservice.hashvalue(code",{"_index":1074,"title":{},"body":{"injectables/UserService.html":{}}}],["this.utilsservice.hashvalue(refreshtoken",{"_index":500,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["this.utilsservice.isafterdate",{"_index":1065,"title":{},"body":{"injectables/UserService.html":{}}}],["this.utilsservice.isdevelopmentenv",{"_index":599,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.utilsservice.isstagingenv",{"_index":600,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.utilsservice.isvalidobjectid(value",{"_index":856,"title":{},"body":{"injectables/ObjectIDPipe.html":{}}}],["this.utilsservice.matchvalue",{"_index":481,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["this.utilsservice.matchvalue(code",{"_index":1068,"title":{},"body":{"injectables/UserService.html":{}}}],["this.utilsservice.t('errors.code_is_invalid",{"_index":1070,"title":{},"body":{"injectables/UserService.html":{}}}],["this.utilsservice.t('errors.invalid_current_password",{"_index":1078,"title":{},"body":{"injectables/UserService.html":{}}}],["this.utilsservice.t('errors.user_not_found",{"_index":1082,"title":{},"body":{"injectables/UserService.html":{}}}],["this.utilsservice.t('errors.wrong_current_password",{"_index":1079,"title":{},"body":{"injectables/UserService.html":{}}}],["threshold",{"_index":727,"title":{},"body":{"controllers/HealthController.html":{}}}],["thresholdpercent",{"_index":723,"title":{},"body":{"controllers/HealthController.html":{}}}],["throttlermodule",{"_index":228,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule.forrootasync",{"_index":292,"title":{},"body":{"modules/AppModule.html":{}}}],["throw",{"_index":401,"title":{},"body":{"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"injectables/AuthService.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"injectables/ObjectIDPipe.html":{},"injectables/UserService.html":{}}}],["throwerror",{"_index":463,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["till",{"_index":1141,"title":{},"body":{"injectables/UtilsService.html":{}}}],["time",{"_index":653,"title":{},"body":{"interfaces/GetTimeParams.html":{},"injectables/UtilsService.html":{},"coverage.html":{}}}],["time.toisostring",{"_index":1199,"title":{},"body":{"injectables/UtilsService.html":{}}}],["time.unix",{"_index":1200,"title":{},"body":{"injectables/UtilsService.html":{}}}],["timestamp",{"_index":178,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["timestamps",{"_index":944,"title":{},"body":{"classes/User.html":{}}}],["timingsafeequal",{"_index":1151,"title":{},"body":{"injectables/UtilsService.html":{}}}],["todo",{"_index":259,"title":{},"body":{"modules/AppModule.html":{}}}],["token",{"_index":314,"title":{},"body":{"controllers/AuthAdminController.html":{},"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminRefreshTokenGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtRefreshTokenGuard.html":{},"interfaces/JwtTokensInterface.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{}}}],["token.dto",{"_index":341,"title":{},"body":{"controllers/AuthAdminController.html":{},"injectables/AuthAdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["token.dto.ts",{"_index":860,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:8",{"_index":862,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["token.guard",{"_index":336,"title":{},"body":{"controllers/AuthAdminController.html":{},"controllers/AuthController.html":{}}}],["token.guard.ts",{"_index":759,"title":{},"body":{"injectables/JwtAdminRefreshTokenGuard.html":{},"injectables/JwtRefreshTokenGuard.html":{},"coverage.html":{}}}],["tokens",{"_index":404,"title":{},"body":{"injectables/AuthAdminService.html":{},"injectables/AuthService.html":{}}}],["tokens.interface",{"_index":462,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["tokens.interface.ts",{"_index":775,"title":{},"body":{"interfaces/JwtTokensInterface.html":{},"coverage.html":{}}}],["toobjectid",{"_index":1105,"title":{},"body":{"injectables/UtilsService.html":{}}}],["toobjectid(stringid",{"_index":1135,"title":{},"body":{"injectables/UtilsService.html":{}}}],["tools",{"_index":261,"title":{},"body":{"modules/AppModule.html":{}}}],["trace",{"_index":176,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["traceid",{"_index":174,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/RequestInterface.html":{}}}],["transaction",{"_index":818,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["transaction.finish",{"_index":841,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["transform",{"_index":849,"title":{},"body":{"injectables/ObjectIDPipe.html":{},"miscellaneous/variables.html":{}}}],["transform(value",{"_index":852,"title":{},"body":{"injectables/ObjectIDPipe.html":{}}}],["transformer",{"_index":1268,"title":{},"body":{"dependencies.html":{}}}],["trigger",{"_index":406,"title":{},"body":{"injectables/AuthAdminService.html":{},"injectables/AuthService.html":{}}}],["true",{"_index":91,"title":{},"body":{"classes/AfterAdminSignInEventHandler.html":{},"modules/AppModule.html":{},"injectables/AuthAdminService.html":{},"modules/AuthModule.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{},"classes/UpdateUserHandler.html":{},"classes/User.html":{},"injectables/UtilsService.html":{},"miscellaneous/variables.html":{}}}],["ttl",{"_index":294,"title":{},"body":{"modules/AppModule.html":{}}}],["type",{"_index":19,"title":{},"body":{"injectables/AdminLocalStrategy.html":{},"interfaces/AdminSignInPayloadInterface.html":{},"classes/AfterAdminSignInEvent.html":{},"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterResetPasswordEvent.html":{},"classes/AfterResetPasswordHandler.html":{},"classes/AfterSignInEvent.html":{},"classes/AfterSignInEventHandler.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthAdminController.html":{},"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"classes/ConfirmResetPasswordDto.html":{},"classes/GeneralResponse.html":{},"interfaces/GetTimeParams.html":{},"classes/GetUserHandler.html":{},"classes/GetUserQuery.html":{},"injectables/IpMiddleware.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{},"interfaces/JwtPayloadInterface.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtTokensInterface.html":{},"injectables/LanguageMiddleware.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ObjectIDPipe.html":{},"classes/RefreshTokenDto.html":{},"interfaces/RequestInterface.html":{},"interfaces/ResetPasswordData.html":{},"classes/ResetPasswordDto.html":{},"classes/ResetPasswordEntity.html":{},"classes/SignInDto.html":{},"interfaces/SignInPayloadInterface.html":{},"classes/SignUpDto.html":{},"classes/SignUpUserCommand.html":{},"classes/SignUpUserHandler.html":{},"classes/UpdateUserCommand.html":{},"classes/UpdateUserHandler.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserEntity.html":{},"classes/UserResetPassword.html":{},"injectables/UserService.html":{},"injectables/UtilsService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1312,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":154,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/UtilsService.html":{}}}],["types/get",{"_index":1154,"title":{},"body":{"injectables/UtilsService.html":{}}}],["types/jwt",{"_index":457,"title":{},"body":{"injectables/AuthCommonService.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["types/request.interface",{"_index":144,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/IpMiddleware.html":{},"injectables/LanguageMiddleware.html":{},"injectables/LoggingInterceptor.html":{}}}],["types/reset",{"_index":1043,"title":{},"body":{"injectables/UserService.html":{}}}],["types/signin.payload",{"_index":459,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["unauthenticated",{"_index":363,"title":{},"body":{"controllers/AuthAdminController.html":{}}}],["unauthorized",{"_index":364,"title":{},"body":{"controllers/AuthAdminController.html":{}}}],["unauthorizedexception",{"_index":392,"title":{},"body":{"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"injectables/AuthService.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["unauthorizedexception(this.utilsservice.t('errors.invalid_authentication",{"_index":464,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["undefined",{"_index":386,"title":{},"body":{"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"injectables/AuthService.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/ObjectIDPipe.html":{},"classes/ResetPasswordEntity.html":{},"injectables/UserService.html":{},"injectables/UtilsService.html":{}}}],["unknown",{"_index":434,"title":{},"body":{"injectables/AuthCommonService.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":1310,"title":{},"body":{"properties.html":{}}}],["unsafe",{"_index":1343,"title":{},"body":{"miscellaneous/variables.html":{}}}],["up",{"_index":522,"title":{},"body":{"controllers/AuthController.html":{}}}],["updatedat",{"_index":925,"title":{},"body":{"classes/User.html":{}}}],["updatepassword",{"_index":1005,"title":{},"body":{"injectables/UserService.html":{}}}],["updatepassword(userid",{"_index":1035,"title":{},"body":{"injectables/UserService.html":{}}}],["updaterefreshtoken",{"_index":423,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["updaterefreshtoken(userid",{"_index":454,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["updateuser",{"_index":1006,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuser(userid",{"_index":1037,"title":{},"body":{"injectables/UserService.html":{}}}],["updateusercommand",{"_index":911,"title":{"classes/UpdateUserCommand.html":{}},"body":{"classes/UpdateUserCommand.html":{},"classes/UpdateUserHandler.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateusercommand(userid",{"_index":1059,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserhandler",{"_index":918,"title":{"classes/UpdateUserHandler.html":{}},"body":{"classes/UpdateUserHandler.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["uppercase",{"_index":616,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ConfirmResetPasswordDto.html":{},"classes/SignUpDto.html":{}}}],["uri",{"_index":285,"title":{},"body":{"modules/AppModule.html":{}}}],["url",{"_index":826,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["use",{"_index":279,"title":{},"body":{"modules/AppModule.html":{},"injectables/IpMiddleware.html":{},"injectables/LanguageMiddleware.html":{}}}],["use(request",{"_index":732,"title":{},"body":{"injectables/IpMiddleware.html":{},"injectables/LanguageMiddleware.html":{}}}],["useclass",{"_index":299,"title":{},"body":{"modules/AppModule.html":{}}}],["used",{"_index":716,"title":{},"body":{"controllers/HealthController.html":{}}}],["usefactory",{"_index":265,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards",{"_index":327,"title":{},"body":{"controllers/AuthAdminController.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["useguards(authguard('admin",{"_index":369,"title":{},"body":{"controllers/AuthAdminController.html":{}}}],["useguards(authguard('local",{"_index":539,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtadminauthenticationguard",{"_index":377,"title":{},"body":{"controllers/AuthAdminController.html":{}}}],["useguards(jwtadminrefreshtokenguard",{"_index":373,"title":{},"body":{"controllers/AuthAdminController.html":{}}}],["useguards(jwtauthenticationguard",{"_index":540,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["useguards(jwtrefreshtokenguard",{"_index":541,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtrefreshtokenguard)@post('refresh",{"_index":512,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(undefined)@post('sign",{"_index":318,"title":{},"body":{"controllers/AuthAdminController.html":{},"controllers/AuthController.html":{}}}],["user",{"_index":316,"title":{"classes/User.html":{}},"body":{"controllers/AuthAdminController.html":{},"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GetUserHandler.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/RequestInterface.html":{},"classes/SignUpUserHandler.html":{},"classes/UpdateUserHandler.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user._id.tohexstring",{"_index":486,"title":{},"body":{"injectables/AuthCommonService.html":{},"injectables/UserService.html":{}}}],["user.adminrefreshtoken",{"_index":757,"title":{},"body":{"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{}}}],["user.command",{"_index":907,"title":{},"body":{"classes/SignUpUserHandler.html":{},"classes/UpdateUserHandler.html":{},"injectables/UserService.html":{}}}],["user.command.ts",{"_index":896,"title":{},"body":{"classes/SignUpUserCommand.html":{},"classes/UpdateUserCommand.html":{},"coverage.html":{}}}],["user.command.ts:3",{"_index":898,"title":{},"body":{"classes/SignUpUserCommand.html":{},"classes/UpdateUserCommand.html":{}}}],["user.command.ts:4",{"_index":899,"title":{},"body":{"classes/SignUpUserCommand.html":{}}}],["user.command.ts:5",{"_index":915,"title":{},"body":{"classes/UpdateUserCommand.html":{}}}],["user.command.ts:6",{"_index":914,"title":{},"body":{"classes/UpdateUserCommand.html":{}}}],["user.decorator",{"_index":339,"title":{},"body":{"controllers/AuthAdminController.html":{},"controllers/AuthController.html":{}}}],["user.decorator.ts",{"_index":1236,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.email",{"_index":399,"title":{},"body":{"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"injectables/AuthService.html":{},"classes/SignUpUserHandler.html":{}}}],["user.handler.ts",{"_index":661,"title":{},"body":{"classes/GetUserHandler.html":{},"classes/SignUpUserHandler.html":{},"classes/UpdateUserHandler.html":{},"coverage.html":{}}}],["user.handler.ts:11",{"_index":669,"title":{},"body":{"classes/GetUserHandler.html":{},"classes/SignUpUserHandler.html":{},"classes/UpdateUserHandler.html":{}}}],["user.handler.ts:8",{"_index":666,"title":{},"body":{"classes/GetUserHandler.html":{},"classes/SignUpUserHandler.html":{},"classes/UpdateUserHandler.html":{}}}],["user.isadmin",{"_index":403,"title":{},"body":{"injectables/AuthAdminService.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{}}}],["user.name",{"_index":471,"title":{},"body":{"injectables/AuthCommonService.html":{},"classes/SignUpUserHandler.html":{},"modules/UserModule.html":{}}}],["user.password",{"_index":468,"title":{},"body":{"injectables/AuthCommonService.html":{},"classes/SignUpUserHandler.html":{},"injectables/UserService.html":{}}}],["user.query.ts",{"_index":680,"title":{},"body":{"classes/GetUserQuery.html":{},"coverage.html":{}}}],["user.query.ts:1",{"_index":683,"title":{},"body":{"classes/GetUserQuery.html":{}}}],["user.query.ts:2",{"_index":684,"title":{},"body":{"classes/GetUserQuery.html":{}}}],["user.resetpassword.code",{"_index":1069,"title":{},"body":{"injectables/UserService.html":{}}}],["user.resetpassword.expireat",{"_index":1067,"title":{},"body":{"injectables/UserService.html":{}}}],["user.save",{"_index":910,"title":{},"body":{"classes/SignUpUserHandler.html":{}}}],["user/user.module",{"_index":561,"title":{},"body":{"modules/AuthModule.html":{},"modules/CommonModule.html":{}}}],["user?.email",{"_index":839,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["user?.resetpassword?.code",{"_index":1064,"title":{},"body":{"injectables/UserService.html":{}}}],["user[refreshtokenfieldname",{"_index":479,"title":{},"body":{"injectables/AuthCommonService.html":{}}}],["useradminservice",{"_index":947,"title":{"injectables/UserAdminService.html":{}},"body":{"injectables/UserAdminService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["usercontroller",{"_index":949,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdocument",{"_index":443,"title":{},"body":{"injectables/AuthCommonService.html":{},"classes/GetUserHandler.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["userentity",{"_index":311,"title":{"classes/UserEntity.html":{}},"body":{"controllers/AuthAdminController.html":{},"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestInterface.html":{},"controllers/UserController.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userid",{"_index":62,"title":{},"body":{"classes/AfterAdminSignInEvent.html":{},"classes/AfterAdminSignInEventHandler.html":{},"classes/AfterResetPasswordEvent.html":{},"classes/AfterResetPasswordHandler.html":{},"classes/AfterSignInEvent.html":{},"classes/AfterSignInEventHandler.html":{},"injectables/AuthCommonService.html":{},"injectables/AuthService.html":{},"interfaces/ResetPasswordData.html":{},"classes/UpdateUserCommand.html":{},"classes/UpdateUserHandler.html":{},"injectables/UserService.html":{}}}],["userinfo",{"_index":396,"title":{},"body":{"injectables/AuthAdminService.html":{},"injectables/AuthService.html":{}}}],["usermodule",{"_index":550,"title":{"modules/UserModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["usernamefield",{"_index":43,"title":{},"body":{"injectables/AdminLocalStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["userresetpassword",{"_index":935,"title":{"classes/UserResetPassword.html":{}},"body":{"classes/User.html":{},"classes/UserResetPassword.html":{},"coverage.html":{}}}],["userresetpassworddocument",{"_index":992,"title":{},"body":{"classes/UserResetPassword.html":{},"miscellaneous/typealiases.html":{}}}],["userresetpasswordschema",{"_index":994,"title":{},"body":{"classes/UserResetPassword.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userschema",{"_index":945,"title":{},"body":{"classes/User.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":384,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"injectables/AuthService.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":795,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["utils.service",{"_index":1087,"title":{},"body":{"modules/UtilsModule.html":{}}}],["utils/utils.module",{"_index":558,"title":{},"body":{"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/UserModule.html":{}}}],["utilsmodule",{"_index":250,"title":{"modules/UtilsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/UserModule.html":{},"modules/UtilsModule.html":{},"modules.html":{},"overview.html":{}}}],["utilsservice",{"_index":248,"title":{"injectables/UtilsService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthAdminService.html":{},"injectables/AuthCommonService.html":{},"injectables/AuthService.html":{},"injectables/ObjectIDPipe.html":{},"injectables/UserService.html":{},"modules/UtilsModule.html":{},"injectables/UtilsService.html":{},"coverage.html":{},"overview.html":{}}}],["utilsservice.isproductionenv",{"_index":267,"title":{},"body":{"modules/AppModule.html":{}}}],["validate",{"_index":10,"title":{},"body":{"injectables/AdminLocalStrategy.html":{},"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":22,"title":{},"body":{"injectables/AdminLocalStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":748,"title":{},"body":{"injectables/JwtAdminRefreshStrategy.html":{},"injectables/JwtAdminStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":381,"title":{},"body":{"injectables/AuthAdminService.html":{},"injectables/AuthService.html":{}}}],["validateuser(undefined",{"_index":389,"title":{},"body":{"injectables/AuthAdminService.html":{},"injectables/AuthService.html":{}}}],["validationpipe",{"_index":1330,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validationschema",{"_index":290,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":625,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ConfirmResetPasswordDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"dependencies.html":{}}}],["validator.swagger.io",{"_index":1346,"title":{},"body":{"miscellaneous/variables.html":{}}}],["value",{"_index":432,"title":{},"body":{"injectables/AuthCommonService.html":{},"injectables/ObjectIDPipe.html":{},"classes/ResetPasswordEntity.html":{},"injectables/UserService.html":{},"injectables/UtilsService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1215,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1320,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":193,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthAdminController.html":{},"controllers/HealthController.html":{},"properties.html":{}}}],["versioningtype.uri",{"_index":1336,"title":{},"body":{"miscellaneous/variables.html":{}}}],["versionkey",{"_index":943,"title":{},"body":{"classes/User.html":{},"classes/UserResetPassword.html":{}}}],["void",{"_index":103,"title":{},"body":{"classes/AfterResetPasswordHandler.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/IpMiddleware.html":{},"injectables/LanguageMiddleware.html":{}}}],["watch",{"_index":277,"title":{},"body":{"modules/AppModule.html":{}}}],["whitelist",{"_index":1331,"title":{},"body":{"miscellaneous/variables.html":{}}}],["work",{"_index":263,"title":{},"body":{"modules/AppModule.html":{}}}],["xxxx",{"_index":1140,"title":{},"body":{"injectables/UtilsService.html":{}}}],["zoom",{"_index":209,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/UserModule.html":{},"modules/UtilsModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AdminLocalStrategy.html":{"url":"injectables/AdminLocalStrategy.html","title":"injectable - AdminLocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AdminLocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/auth/strategies/admin.local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthAdminService)\n                    \n                \n                        \n                            \n                                Defined in src/common/auth/strategies/admin.local.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthAdminService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/auth/strategies/admin.local.strategy.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { AuthAdminService } from '../services/auth.admin.service';\n\n@Injectable()\nexport class AdminLocalStrategy extends PassportStrategy(\n  Strategy,\n  'admin-local',\n) {\n  constructor(private authService: AuthAdminService) {\n    super({ usernameField: 'email' });\n  }\n\n  async validate(email: string, password: string): Promise {\n    return this.authService.validateUser({ email, password });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AdminSignInPayloadInterface.html":{"url":"interfaces/AdminSignInPayloadInterface.html","title":"interface - AdminSignInPayloadInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AdminSignInPayloadInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/auth/types/admin.signin.payload.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            isAdmin\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isAdmin\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isAdmin:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface AdminSignInPayloadInterface {\n  email: string;\n  name: string;\n  isAdmin?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AfterAdminSignInEvent.html":{"url":"classes/AfterAdminSignInEvent.html","title":"class - AfterAdminSignInEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AfterAdminSignInEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/auth/events/impl/after-admin-signin.event.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                refreshToken\n                            \n                            \n                                    Public\n                                    Readonly\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userId: string, refreshToken: string)\n                    \n                \n                        \n                            \n                                Defined in src/common/auth/events/impl/after-admin-signin.event.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshToken\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/common/auth/events/impl/after-admin-signin.event.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/common/auth/events/impl/after-admin-signin.event.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class AfterAdminSignInEvent {\n  constructor(\n    public readonly userId: string,\n    public readonly refreshToken: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AfterAdminSignInEventHandler.html":{"url":"classes/AfterAdminSignInEventHandler.html","title":"class - AfterAdminSignInEventHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AfterAdminSignInEventHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/auth/events/handlers/afrer-admin-signin.event.handler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        IEventHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commonService: AuthCommonService)\n                    \n                \n                        \n                            \n                                Defined in src/common/auth/events/handlers/afrer-admin-signin.event.handler.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commonService\n                                                  \n                                                        \n                                                                        AuthCommonService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(event: AfterAdminSignInEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/common/auth/events/handlers/afrer-admin-signin.event.handler.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                AfterAdminSignInEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IEventHandler } from '@nestjs/cqrs';\nimport { EventsHandler } from '@nestjs/cqrs/dist/decorators/events-handler.decorator';\nimport { AfterAdminSignInEvent } from '../impl/after-admin-signin.event';\nimport { AuthCommonService } from '../../services/auth-common.service';\n\n@EventsHandler(AfterAdminSignInEvent)\nexport class AfterAdminSignInEventHandler\n  implements IEventHandler\n{\n  constructor(private readonly commonService: AuthCommonService) {}\n\n  handle(event: AfterAdminSignInEvent) {\n    const { userId, refreshToken } = event;\n\n    return this.commonService.updateRefreshToken(userId, refreshToken, true);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AfterResetPasswordEvent.html":{"url":"classes/AfterResetPasswordEvent.html","title":"class - AfterResetPasswordEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AfterResetPasswordEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/auth/events/impl/after-reset-password.event.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                code\n                            \n                            \n                                    Public\n                                    Readonly\n                                email\n                            \n                            \n                                    Public\n                                    Readonly\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userId: string, email: string, code: string)\n                    \n                \n                        \n                            \n                                Defined in src/common/auth/events/impl/after-reset-password.event.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        email\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        code\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/common/auth/events/impl/after-reset-password.event.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/common/auth/events/impl/after-reset-password.event.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/common/auth/events/impl/after-reset-password.event.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class AfterResetPasswordEvent {\n  constructor(\n    public readonly userId: string,\n    public readonly email: string,\n    public readonly code: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AfterResetPasswordHandler.html":{"url":"classes/AfterResetPasswordHandler.html","title":"class - AfterResetPasswordHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AfterResetPasswordHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/auth/events/handlers/afrer-reset-password.event.handler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        IEventHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(event: AfterResetPasswordEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/common/auth/events/handlers/afrer-reset-password.event.handler.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                AfterResetPasswordEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IEventHandler } from '@nestjs/cqrs';\nimport { EventsHandler } from '@nestjs/cqrs/dist/decorators/events-handler.decorator';\nimport { AfterResetPasswordEvent } from '../impl/after-reset-password.event';\nimport { Logger } from '@nestjs/common';\n\n@EventsHandler(AfterResetPasswordEvent)\nexport class AfterResetPasswordHandler\n  implements IEventHandler\n{\n  handle(event: AfterResetPasswordEvent) {\n    const { userId, email, code } = event;\n\n    Logger.debug(\n      `After reset password has been teriggered, data: ${userId}, ${email}, ${code}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AfterSignInEvent.html":{"url":"classes/AfterSignInEvent.html","title":"class - AfterSignInEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AfterSignInEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/auth/events/impl/after-signin.event.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                refreshToken\n                            \n                            \n                                    Public\n                                    Readonly\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userId: string, refreshToken: string)\n                    \n                \n                        \n                            \n                                Defined in src/common/auth/events/impl/after-signin.event.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshToken\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/common/auth/events/impl/after-signin.event.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/common/auth/events/impl/after-signin.event.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class AfterSignInEvent {\n  constructor(\n    public readonly userId: string,\n    public readonly refreshToken: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AfterSignInEventHandler.html":{"url":"classes/AfterSignInEventHandler.html","title":"class - AfterSignInEventHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AfterSignInEventHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/auth/events/handlers/afrer-signin.event.handler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        IEventHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authCommonService: AuthCommonService)\n                    \n                \n                        \n                            \n                                Defined in src/common/auth/events/handlers/afrer-signin.event.handler.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authCommonService\n                                                  \n                                                        \n                                                                        AuthCommonService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(event: AfterSignInEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/common/auth/events/handlers/afrer-signin.event.handler.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                AfterSignInEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IEventHandler } from '@nestjs/cqrs';\nimport { EventsHandler } from '@nestjs/cqrs/dist/decorators/events-handler.decorator';\nimport { AfterSignInEvent } from '../impl/after-signin.event';\nimport { AuthCommonService } from '../../services/auth-common.service';\n\n@EventsHandler(AfterSignInEvent)\nexport class AfterSignInEventHandler\n  implements IEventHandler\n{\n  constructor(private readonly authCommonService: AuthCommonService) {}\n\n  handle(event: AfterSignInEvent) {\n    const { userId, refreshToken } = event;\n\n    return this.authCommonService.updateRefreshToken(userId, refreshToken);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AllExceptionsFilter.html":{"url":"classes/AllExceptionsFilter.html","title":"class - AllExceptionsFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionsFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/filters/all-exceptions.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                            \n                                    Private\n                                getHttpMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpAdapterHost: HttpAdapterHost, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/shared/filters/all-exceptions.filter.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpAdapterHost\n                                                  \n                                                        \n                                                                    HttpAdapterHost\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: Error, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/filters/all-exceptions.filter.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getHttpMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHttpMessage(exception)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/filters/all-exceptions.filter.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  HttpStatus,\n  Logger,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { HttpAdapterHost } from '@nestjs/core';\nimport * as Sentry from '@sentry/node';\nimport { PRODUCTION_ENV, STAGING_ENV } from '../configs/constants';\nimport { RequestInterface } from '../types/request.interface';\n\n@Catch()\nexport class AllExceptionsFilter implements ExceptionFilter {\n  constructor(\n    private readonly httpAdapterHost: HttpAdapterHost,\n    private readonly configService: ConfigService,\n  ) {}\n\n  private getHttpMessage(exception): string {\n    let httpMessage = 'Please check app logs';\n\n    if (exception instanceof HttpException) {\n      httpMessage = (exception as any).response.message;\n    } else if (exception?.message) {\n      httpMessage = exception.message;\n    } else if (typeof exception === 'string') {\n      httpMessage = exception;\n    }\n\n    return httpMessage;\n  }\n\n  catch(exception: Error, host: ArgumentsHost): void {\n    const isLive = [PRODUCTION_ENV, STAGING_ENV].includes(\n      this.configService.get('env'),\n    );\n    const { httpAdapter } = this.httpAdapterHost;\n    const ctx = host.switchToHttp();\n    const request: RequestInterface = ctx.getRequest();\n    const httpMessage = this.getHttpMessage(exception);\n    const httpStatus =\n      exception instanceof HttpException\n        ? exception.getStatus()\n        : HttpStatus.INTERNAL_SERVER_ERROR;\n\n    const responseBody = {\n      statusCode: httpStatus,\n      method: request.method,\n      message: httpMessage,\n      ip: request.clientIP,\n      traceId: request.traceId,\n      trace: exception?.stack,\n      timestamp: new Date().toISOString(),\n      path: httpAdapter.getRequestUrl(ctx.getRequest()),\n    };\n\n    if (isLive) {\n      Sentry.captureException(exception);\n    } else {\n      Logger.error(responseBody);\n    }\n\n    httpAdapter.reply(ctx.getResponse(), responseBody, httpStatus);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getVersion\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getVersion\n                        \n                    \n                \n            \n            \n                \n                    \n                    getVersion()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\n\n@Controller({\n  version: '1',\n})\nexport class AppController {\n  @Get()\n  getVersion(): string {\n    return 'API version 1';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nCommonModule\n\nCommonModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCommonModule->AppModule\n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CommonModule\n                        \n                        \n                            CoreModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import {\n  MiddlewareConsumer,\n  Module,\n  NestModule,\n  RequestMethod,\n} from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { AppController } from './app.controller';\nimport { CommonModule } from './common/common.module';\nimport generalConfig from './shared/configs/app.config';\nimport { CacheModule } from '@nestjs/cache-manager';\nimport { ThrottlerModule } from '@nestjs/throttler';\nimport { APP_FILTER, APP_INTERCEPTOR } from '@nestjs/core';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { AllExceptionsFilter } from './shared/filters/all-exceptions.filter';\nimport envValidationSchema from './shared/configs/env.validation.schema';\nimport { LoggingInterceptor } from './shared/interceptors/logging.interceptor';\nimport { IpMiddleware } from './shared/middlewares/ip.middleware';\nimport { LanguageMiddleware } from './shared/middlewares/language.middleware';\nimport { CoreModule } from './core/core.module';\nimport { DevtoolsModule } from '@nestjs/devtools-integration';\nimport { UtilsService } from './common/utils/utils.service';\nimport { UtilsModule } from './common/utils/utils.module';\nimport {\n  AcceptLanguageResolver,\n  HeaderResolver,\n  I18nModule,\n  QueryResolver,\n} from 'nestjs-i18n';\nimport { join } from 'path';\n\n@Module({\n  imports: [\n    CommonModule,\n    // TODO DEV tools doesn't work\n    DevtoolsModule.registerAsync({\n      imports: [UtilsModule],\n      useFactory: async (utilsService: UtilsService) => ({\n        http: !utilsService.isProductionEnv(),\n        port: 9000,\n      }),\n      inject: [UtilsService],\n    }),\n    I18nModule.forRootAsync({\n      useFactory: (configService: ConfigService) => ({\n        fallbackLanguage: configService.getOrThrow('i18n.fallbackLanguage'),\n        loaderOptions: {\n          path: join(__dirname, `/${configService.get('i18n.srcDir')}/`),\n          watch: true,\n        },\n      }),\n      resolvers: [\n        { use: QueryResolver, options: ['lang'] },\n        AcceptLanguageResolver,\n        new HeaderResolver(['accept-language']),\n      ],\n      inject: [ConfigService],\n    }),\n    MongooseModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        uri: configService.get('db.uri'),\n      }),\n      inject: [ConfigService],\n    }),\n    ConfigModule.forRoot({\n      load: [generalConfig],\n      isGlobal: true,\n      validationSchema: envValidationSchema,\n    }),\n    CacheModule.register({\n      isGlobal: true,\n    }),\n    ThrottlerModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => ({\n        ttl: config.get('throttle.ttl'),\n        limit: config.get('throttle.limit'),\n      }),\n    }),\n    CoreModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    { provide: APP_INTERCEPTOR, useClass: LoggingInterceptor },\n    {\n      provide: APP_FILTER,\n      useClass: AllExceptionsFilter,\n    },\n  ],\n})\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    // IP middleeware\n    consumer\n      .apply(IpMiddleware)\n      .forRoutes({ path: '*', method: RequestMethod.ALL });\n\n    // Language mmiddleware\n    consumer.apply(LanguageMiddleware).forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthAdminController.html":{"url":"controllers/AuthAdminController.html","title":"controller - AuthAdminController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthAdminController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/auth/controllers/auth.admin.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                refreshToken\n                            \n                            \n                                    \n                                    \n                                    Async\n                                signIn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                signOut\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(user: UserEntity, data: RefreshTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAdminRefreshTokenGuard)@Post('refresh-token')\n                \n            \n\n            \n                \n                    Defined in src/common/auth/controllers/auth.admin.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                RefreshTokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(req: RequestInterface)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('sign-in')\n                \n            \n\n            \n                \n                    Defined in src/common/auth/controllers/auth.admin.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                RequestInterface\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        signOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    signOut(user: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Get('sign-out')@UseGuards(JwtAdminAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/common/auth/controllers/auth.admin.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, Req, UseGuards } from '@nestjs/common';\nimport { ADMIN_CONTROLLER_KEY } from '../../../shared/configs/constants';\nimport { AuthGuard } from '@nestjs/passport';\nimport { RequestInterface } from '@/shared/types/request.interface';\nimport { UserEntity } from '@/shared/entities/user.entity';\nimport { JwtAdminRefreshTokenGuard } from '../guards/auth-admin-refresh-token.guard';\nimport { GetUser } from '@/shared/decorators/get-user.decorator';\nimport { RefreshTokenDto } from '../dto/refresh-token.dto';\nimport { AuthAdminService } from '../services/auth.admin.service';\nimport { JwtAdminAuthenticationGuard } from '@/shared/guards/admin-auth.guard';\nimport { GeneralResponse } from '@/shared/entities/general-response';\nimport { ApiBearerAuth, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n@ApiTags('admin', 'auth')\n@ApiResponse({\n  status: 201,\n  description: 'The record has been successfully created.',\n})\n@ApiResponse({ status: 400, description: 'Bad request' })\n@ApiResponse({ status: 401, description: 'UnAuthenticated or UnAuthorized' })\n@ApiResponse({ status: 404, description: 'Not found' })\n@Controller({\n  path: `${ADMIN_CONTROLLER_KEY}/auth`,\n  version: '',\n})\nexport class AuthAdminController {\n  constructor(private readonly service: AuthAdminService) {}\n\n  @UseGuards(AuthGuard('admin-local'))\n  @Post('sign-in')\n  async signIn(@Req() req: RequestInterface): Promise {\n    return req.user;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(JwtAdminRefreshTokenGuard)\n  @Post('refresh-token')\n  async refreshToken(\n    @GetUser() user: UserEntity,\n    @Body() data: RefreshTokenDto,\n  ): Promise {\n    return this.service.refreshToken(user, data);\n  }\n\n  @ApiBearerAuth()\n  @Get('sign-out')\n  @UseGuards(JwtAdminAuthenticationGuard)\n  async signOut(@GetUser() user: UserEntity): Promise {\n    return this.service.signOut(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthAdminService.html":{"url":"injectables/AuthAdminService.html","title":"injectable - AuthAdminService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthAdminService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/auth/services/auth.admin.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                signOut\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventBus: EventBus, commonService: AuthCommonService, userService: UserService, utilsService: UtilsService)\n                    \n                \n                        \n                            \n                                Defined in src/common/auth/services/auth.admin.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eventBus\n                                                  \n                                                        \n                                                                    EventBus\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        commonService\n                                                  \n                                                        \n                                                                        AuthCommonService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        utilsService\n                                                  \n                                                        \n                                                                        UtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(user: UserEntity, undefined: RefreshTokenDto)\n                \n            \n\n\n            \n                \n                    Defined in src/common/auth/services/auth.admin.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                RefreshTokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    signOut(user: UserEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/common/auth/services/auth.admin.service.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(undefined: SignInDto)\n                \n            \n\n\n            \n                \n                    Defined in src/common/auth/services/auth.admin.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                SignInDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { UserEntity } from '@/shared/entities/user.entity';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { RefreshTokenDto } from '../dto/refresh-token.dto';\nimport { UserService } from '@/common/user/services/user.service';\nimport { SignInDto } from '../dto/signin.dto';\nimport { EventBus } from '@nestjs/cqrs';\nimport { AfterAdminSignInEvent } from '../events/impl/after-admin-signin.event';\nimport { AuthCommonService } from './auth-common.service';\nimport { GeneralResponse } from '@/shared/entities/general-response';\nimport { UtilsService } from '@/common/utils/utils.service';\n\n@Injectable()\nexport class AuthAdminService {\n  constructor(\n    private readonly eventBus: EventBus,\n    private readonly commonService: AuthCommonService,\n    private readonly userService: UserService,\n    private readonly utilsService: UtilsService,\n  ) {}\n\n  async refreshToken(\n    user: UserEntity,\n    { refreshToken }: RefreshTokenDto,\n  ): Promise {\n    const userInfo = await this.commonService.getUserIfRefreshTokenMatches(\n      refreshToken,\n      user.email,\n      true,\n    );\n\n    if (userInfo) {\n      return this.commonService.getNewAccessAndRefreshToken(userInfo, true);\n    } else {\n      throw new UnauthorizedException();\n    }\n  }\n\n  async validateUser({ email, password }: SignInDto): Promise {\n    const user = await this.commonService.checkUser(email, password);\n\n    if (!user.isAdmin) {\n      throw new UnauthorizedException();\n    }\n\n    // tokens\n    const { token, refreshToken } = await this.commonService.getJwtTokens(\n      user,\n      true,\n    );\n\n    // trigger event\n    this.eventBus.publish(\n      new AfterAdminSignInEvent(user._id.toHexString(), refreshToken),\n    );\n\n    return this.userService.serializeUserData(user, token, refreshToken, true);\n  }\n\n  async signOut(user: UserEntity): Promise {\n    this.commonService.emptyRefreshToken(user.id, true);\n\n    return this.utilsService.getGeneralResponse(true);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthCommonService.html":{"url":"injectables/AuthCommonService.html","title":"injectable - AuthCommonService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthCommonService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/auth/services/auth-common.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkUser\n                            \n                            \n                                    Async\n                                emptyRefreshToken\n                            \n                            \n                                getJwtPayload\n                            \n                            \n                                    Async\n                                getJwtToken\n                            \n                            \n                                    Async\n                                getJwtTokens\n                            \n                            \n                                    Async\n                                getNewAccessAndRefreshToken\n                            \n                            \n                                    Async\n                                getRefreshToken\n                            \n                            \n                                getRefreshTokenOptions\n                            \n                            \n                                    Async\n                                getUserIfRefreshTokenMatches\n                            \n                            \n                                    Async\n                                updateRefreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, utilsService: UtilsService, jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/common/auth/services/auth-common.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        utilsService\n                                                  \n                                                        \n                                                                        UtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        checkUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkUser(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/auth/services/auth-common.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        emptyRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    emptyRefreshToken(userId: string, isAdmin)\n                \n            \n\n\n            \n                \n                    Defined in src/common/auth/services/auth-common.service.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    isAdmin\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getJwtPayload\n                        \n                    \n                \n            \n            \n                \ngetJwtPayload(undefined: SignInPayloadInterface)\n                \n            \n\n\n            \n                \n                    Defined in src/common/auth/services/auth-common.service.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                SignInPayloadInterface\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SignInPayloadInterface\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getJwtToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getJwtToken(payload: JwtPayloadInterface)\n                \n            \n\n\n            \n                \n                    Defined in src/common/auth/services/auth-common.service.ts:137\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayloadInterface\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getJwtTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    getJwtTokens(user: UserDocument, isAdmin)\n                \n            \n\n\n            \n                \n                    Defined in src/common/auth/services/auth-common.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserDocument\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    isAdmin\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getNewAccessAndRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNewAccessAndRefreshToken(user: UserDocument, isAdmin)\n                \n            \n\n\n            \n                \n                    Defined in src/common/auth/services/auth-common.service.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserDocument\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    isAdmin\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRefreshToken(payload: JwtPayloadInterface, isAdmin)\n                \n            \n\n\n            \n                \n                    Defined in src/common/auth/services/auth-common.service.ts:141\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayloadInterface\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    isAdmin\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRefreshTokenOptions\n                        \n                    \n                \n            \n            \n                \ngetRefreshTokenOptions(isAdmin)\n                \n            \n\n\n            \n                \n                    Defined in src/common/auth/services/auth-common.service.ts:148\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    isAdmin\n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     JwtSignOptions\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserIfRefreshTokenMatches\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserIfRefreshTokenMatches(refreshToken: string, email: string, isAdmin)\n                \n            \n\n\n            \n                \n                    Defined in src/common/auth/services/auth-common.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    isAdmin\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRefreshToken(userId: string, refreshToken: string, isAdmin)\n                \n            \n\n\n            \n                \n                    Defined in src/common/auth/services/auth-common.service.ts:167\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    isAdmin\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { UserDocument } from '@/common/user/schemas/user.schema';\nimport { UserService } from '@/common/user/services/user.service';\nimport { UtilsService } from '@/common/utils/utils.service';\nimport { UserEntity } from '@/shared/entities/user.entity';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { JwtPayloadInterface } from '../types/jwt-payload.interface';\nimport { SignInPayloadInterface } from '../types/signin.payload';\nimport { JwtService, JwtSignOptions } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtTokensInterface } from '../types/jwt-tokens.interface';\n\n@Injectable()\nexport class AuthCommonService {\n  constructor(\n    private readonly userService: UserService,\n    private readonly utilsService: UtilsService,\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  async checkUser(email: string, password: string): Promise {\n    const throwError = () => {\n      throw new UnauthorizedException(this.utilsService.t('errors.INVALID_AUTHENTICATION'));\n    };\n\n    // check email & password\n    const user = await this.userService.getUserByEmail(email);\n    if (!user) {\n      throwError();\n    }\n\n    // check password\n    const isValidPassword = await this.utilsService.compareBcrypeHash(\n      password,\n      user.password,\n    );\n    if (!isValidPassword) {\n      throwError();\n    }\n\n    return user;\n  }\n\n  async getJwtTokens(\n    user: UserDocument,\n    isAdmin = false,\n  ): Promise {\n    const jwtPayload = this.getJwtPayload({\n      name: user.name,\n      email: user.email,\n      isAdmin,\n    });\n\n    const token = await this.getJwtToken(jwtPayload);\n\n    const refreshToken = await this.getRefreshToken(jwtPayload, isAdmin);\n\n    return {\n      token,\n      refreshToken,\n    };\n  }\n\n  async emptyRefreshToken(userId: string, isAdmin = false) {\n    const fieldName = isAdmin ? 'adminRefreshToken' : 'refreshToken';\n    return this.userService.updateUser(userId, {\n      [fieldName]: null,\n    });\n  }\n\n  async getUserIfRefreshTokenMatches(\n    refreshToken: string,\n    email: string,\n    isAdmin = false,\n  ) {\n    const refreshTokenFieldName = isAdmin\n      ? 'adminRefreshToken'\n      : 'refreshToken';\n\n    const user = await this.userService.getUserByEmail(email);\n    if (!user[refreshTokenFieldName]) {\n      throw new UnauthorizedException();\n    }\n\n    const isRefreshTokenMatching = await this.utilsService.matchValue(\n      refreshToken,\n      user[refreshTokenFieldName],\n    );\n\n    if (isRefreshTokenMatching) {\n      await this.emptyRefreshToken(user._id.toHexString(), isAdmin);\n      return user;\n    } else {\n      throw new UnauthorizedException();\n    }\n  }\n\n  async getNewAccessAndRefreshToken(\n    user: UserDocument,\n    isAdmin = false,\n  ): Promise {\n    const payload: JwtPayloadInterface = this.getJwtPayload({\n      email: user.email,\n      name: user.name,\n      isAdmin,\n    });\n    const token = await this.getJwtToken(payload);\n\n    const refreshToken = await this.getRefreshToken(payload, isAdmin);\n\n    await this.updateRefreshToken(\n      user._id.toHexString(),\n      refreshToken,\n      isAdmin,\n    );\n\n    return this.userService.serializeUserData(\n      user,\n      token,\n      refreshToken,\n      isAdmin,\n    );\n  }\n\n  getJwtPayload({\n    email,\n    name,\n    isAdmin = false,\n  }: SignInPayloadInterface): SignInPayloadInterface {\n    return {\n      email,\n      name,\n      isAdmin: isAdmin || undefined,\n    };\n  }\n\n  async getJwtToken(payload: JwtPayloadInterface) {\n    return this.jwtService.signAsync(payload);\n  }\n\n  async getRefreshToken(payload: JwtPayloadInterface, isAdmin = false) {\n    return this.jwtService.signAsync(\n      payload,\n      this.getRefreshTokenOptions(isAdmin),\n    );\n  }\n\n  getRefreshTokenOptions(isAdmin = false): JwtSignOptions {\n    const secretKey = isAdmin\n      ? 'jwt.refreshTokenSecretKey'\n      : 'jwt.refreshTokenSecretKey';\n    const expireTime = isAdmin\n      ? 'jwt.refreshTokenExpireTime'\n      : 'jwt.refreshTokenExpireTime';\n    const options: JwtSignOptions = {\n      secret: this.configService.get(secretKey),\n    };\n    const expiration: string = this.configService.get(expireTime);\n\n    if (expiration) {\n      options.expiresIn = expiration;\n    }\n\n    return options;\n  }\n\n  async updateRefreshToken(\n    userId: string,\n    refreshToken: string,\n    isAdmin = false,\n  ) {\n    const fieldName = isAdmin ? 'adminRefreshToken' : 'refreshToken';\n    return this.userService.updateUser(userId, {\n      [fieldName]: await this.utilsService.hashValue(refreshToken),\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/auth/controllers/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                confirmResetPassword\n                            \n                            \n                                    \n                                    \n                                    Async\n                                refreshToken\n                            \n                            \n                                    \n                                    Async\n                                resetPassword\n                            \n                            \n                                    \n                                    \n                                    Async\n                                signIn\n                            \n                            \n                                    \n                                    \n                                    Async\n                                signOut\n                            \n                            \n                                    \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        confirmResetPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirmResetPassword(data: ConfirmResetPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('reset-password/confirm')\n                \n            \n\n            \n                \n                    Defined in src/common/auth/controllers/auth.controller.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                ConfirmResetPasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(user: UserEntity, data: RefreshTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtRefreshTokenGuard)@Post('refresh-token')\n                \n            \n\n            \n                \n                    Defined in src/common/auth/controllers/auth.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                RefreshTokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    resetPassword(data: ResetPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('reset-password')\n                \n            \n\n            \n                \n                    Defined in src/common/auth/controllers/auth.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                ResetPasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(req: RequestInterface)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('sign-in')\n                \n            \n\n            \n                \n                    Defined in src/common/auth/controllers/auth.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                RequestInterface\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        signOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    signOut(user: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('sign-out')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/common/auth/controllers/auth.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(data: SignUpDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('sign-up')\n                \n            \n\n            \n                \n                    Defined in src/common/auth/controllers/auth.controller.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                SignUpDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Patch,\n  Post,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthService } from '../services/auth.service';\nimport { UserEntity } from '@/shared/entities/user.entity';\nimport { GetUser } from '@/shared/decorators/get-user.decorator';\nimport { JwtRefreshTokenGuard } from '@/common/auth/guards/auth-refresh-token.guard';\nimport { RefreshTokenDto } from '../dto/refresh-token.dto';\nimport { JwtAuthenticationGuard } from '@/shared/guards/auth.guard';\nimport { GeneralResponse } from '@/shared/entities/general-response';\nimport { AuthGuard } from '@nestjs/passport';\nimport { RequestInterface } from '@/shared/types/request.interface';\nimport { ApiTags } from '@nestjs/swagger';\nimport { SignUpDto } from '../../../shared/dto/signup.dto';\nimport { ResetPasswordDto } from '../dto/reset-password.dto';\nimport { ResetPasswordEntity } from '../entities/reset-password.entity';\nimport { ConfirmResetPasswordDto } from '../dto/confirm-reset-password.dto';\n\n@ApiTags('client', 'auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly service: AuthService) {}\n\n  @UseGuards(AuthGuard('local'))\n  @Post('sign-in')\n  async signIn(@Req() req: RequestInterface): Promise {\n    return req.user;\n  }\n\n  @Get('sign-out')\n  @UseGuards(JwtAuthenticationGuard)\n  async signOut(@GetUser() user: UserEntity): Promise {\n    return this.service.signOut(user);\n  }\n\n  @UseGuards(JwtRefreshTokenGuard)\n  @Post('refresh-token')\n  async refreshToken(\n    @GetUser() user: UserEntity,\n    @Body() data: RefreshTokenDto,\n  ): Promise {\n    return this.service.refreshToken(user, data);\n  }\n\n  @Post('sign-up')\n  async signUp(@Body() data: SignUpDto): Promise {\n    return this.service.createUser(data);\n  }\n\n  @Patch('reset-password')\n  async resetPassword(\n    @Body() data: ResetPasswordDto,\n  ): Promise {\n    return this.service.resetPassword(data);\n  }\n\n  @Patch('reset-password/confirm')\n  async confirmResetPassword(\n    @Body() data: ConfirmResetPasswordDto,\n  ): Promise {\n    return this.service.confirmResetPassword(data);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nUtilsModule\n\nUtilsModule\n\nAuthModule -->\n\nUtilsModule->AuthModule\n\n\n\n\n\nAdminLocalStrategy\n\nAdminLocalStrategy\n\nAuthModule -->\n\nAdminLocalStrategy->AuthModule\n\n\n\n\n\nAuthAdminService\n\nAuthAdminService\n\nAuthModule -->\n\nAuthAdminService->AuthModule\n\n\n\n\n\nAuthCommonService\n\nAuthCommonService\n\nAuthModule -->\n\nAuthCommonService->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtAdminRefreshStrategy\n\nJwtAdminRefreshStrategy\n\nAuthModule -->\n\nJwtAdminRefreshStrategy->AuthModule\n\n\n\n\n\nJwtAdminStrategy\n\nJwtAdminStrategy\n\nAuthModule -->\n\nJwtAdminStrategy->AuthModule\n\n\n\n\n\nJwtRefreshStrategy\n\nJwtRefreshStrategy\n\nAuthModule -->\n\nJwtRefreshStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AdminLocalStrategy\n                        \n                        \n                            AuthAdminService\n                        \n                        \n                            AuthCommonService\n                        \n                        \n                            AuthService\n                        \n                        \n                            JwtAdminRefreshStrategy\n                        \n                        \n                            JwtAdminStrategy\n                        \n                        \n                            JwtRefreshStrategy\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                        \n                            AuthAdminController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                        \n                            UtilsModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './services/auth.service';\nimport { AuthController } from './controllers/auth.controller';\nimport { UtilsModule } from '../utils/utils.module';\nimport { AuthAdminService } from './services/auth.admin.service';\nimport { AuthAdminController } from './controllers/auth.admin.controller';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { UserModule } from '../user/user.module';\nimport { EventHandlers } from './events/handlers';\nimport { CqrsModule } from '@nestjs/cqrs';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { JwtRefreshStrategy } from './strategies/jwt-refresh.strategy';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './strategies/local.strategy';\nimport { AdminLocalStrategy } from './strategies/admin.local.strategy';\nimport { JwtAdminRefreshStrategy } from './strategies/jwt-admin-refresh.strategy';\nimport { AuthCommonService } from './services/auth-common.service';\nimport { JwtAdminStrategy } from './strategies/jwt-admin.strategy';\n\n@Module({\n  imports: [\n    UtilsModule,\n    UserModule,\n    CqrsModule,\n    PassportModule,\n    JwtModule.registerAsync({\n      useFactory: (config: ConfigService) => {\n        return {\n          global: true,\n          secret: config.get('jwt.secretKey') || 'seret key',\n          signOptions: {\n            expiresIn: config.get('jwt.expireTime') || '15m',\n          },\n        };\n      },\n      inject: [ConfigService],\n    }),\n  ],\n  providers: [\n    AuthService,\n    AuthAdminService,\n    AuthCommonService,\n    LocalStrategy,\n    JwtStrategy,\n    JwtRefreshStrategy,\n    AdminLocalStrategy,\n    JwtAdminStrategy,\n    JwtAdminRefreshStrategy,\n    ...EventHandlers,\n  ],\n  controllers: [AuthController, AuthAdminController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/auth/services/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                confirmResetPassword\n                            \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                resetPassword\n                            \n                            \n                                    Async\n                                signOut\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventBus: EventBus, userService: UserService, utilsService: UtilsService, commonService: AuthCommonService)\n                    \n                \n                        \n                            \n                                Defined in src/common/auth/services/auth.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eventBus\n                                                  \n                                                        \n                                                                    EventBus\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        utilsService\n                                                  \n                                                        \n                                                                        UtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        commonService\n                                                  \n                                                        \n                                                                        AuthCommonService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        confirmResetPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirmResetPassword(undefined: ConfirmResetPasswordDto)\n                \n            \n\n\n            \n                \n                    Defined in src/common/auth/services/auth.service.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                ConfirmResetPasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(data: SignUpDto)\n                \n            \n\n\n            \n                \n                    Defined in src/common/auth/services/auth.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                SignUpDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(user: UserEntity, undefined: RefreshTokenDto)\n                \n            \n\n\n            \n                \n                    Defined in src/common/auth/services/auth.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                RefreshTokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    resetPassword(undefined: ResetPasswordDto)\n                \n            \n\n\n            \n                \n                    Defined in src/common/auth/services/auth.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                ResetPasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    signOut(user: UserEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/common/auth/services/auth.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(undefined: SignInDto)\n                \n            \n\n\n            \n                \n                    Defined in src/common/auth/services/auth.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                SignInDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { UserService } from '@/common/user/services/user.service';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { SignInDto } from '../dto/signin.dto';\nimport { UserEntity } from '@/shared/entities/user.entity';\nimport { EventBus } from '@nestjs/cqrs';\nimport { AfterSignInEvent } from '../events/impl/after-signin.event';\nimport { RefreshTokenDto } from '../dto/refresh-token.dto';\nimport { AuthCommonService } from './auth-common.service';\nimport { UtilsService } from '@/common/utils/utils.service';\nimport { GeneralResponse } from '@/shared/entities/general-response';\nimport { SignUpDto } from '../../../shared/dto/signup.dto';\nimport { ResetPasswordDto } from '../dto/reset-password.dto';\nimport { ResetPasswordEntity } from '../entities/reset-password.entity';\nimport { AfterResetPasswordEvent } from '../events/impl/after-reset-password.event';\nimport { ConfirmResetPasswordDto } from '../dto/confirm-reset-password.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly eventBus: EventBus,\n    private readonly userService: UserService,\n    private readonly utilsService: UtilsService,\n    private readonly commonService: AuthCommonService,\n  ) {}\n\n  async validateUser({ email, password }: SignInDto): Promise {\n    const user = await this.commonService.checkUser(email, password);\n\n    // tokens\n    const { token, refreshToken } = await this.commonService.getJwtTokens(user);\n\n    // trigger event\n    this.eventBus.publish(\n      new AfterSignInEvent(user._id.toHexString(), refreshToken),\n    );\n\n    return this.userService.serializeUserData(user, token, refreshToken);\n  }\n\n  async refreshToken(\n    user: UserEntity,\n    { refreshToken }: RefreshTokenDto,\n  ): Promise {\n    const userInfo = await this.commonService.getUserIfRefreshTokenMatches(\n      refreshToken,\n      user.email,\n    );\n\n    if (userInfo) {\n      return this.commonService.getNewAccessAndRefreshToken(userInfo);\n    } else {\n      throw new UnauthorizedException();\n    }\n  }\n\n  async signOut(user: UserEntity): Promise {\n    this.commonService.emptyRefreshToken(user.id);\n\n    return this.utilsService.getGeneralResponse(true);\n  }\n\n  async createUser(data: SignUpDto) {\n    await this.userService.create(data);\n\n    return this.utilsService.getGeneralResponse(true);\n  }\n\n  async resetPassword({\n    email,\n  }: ResetPasswordDto): Promise {\n    const { userId, code } = await this.userService.resetPassword(email);\n\n    // trigger event\n    this.eventBus.publish(new AfterResetPasswordEvent(userId, email, code));\n\n    return {\n      ...this.utilsService.getGeneralResponse(true),\n      code:\n        this.utilsService.isDevelopmentEnv() || this.utilsService.isStagingEnv()\n          ? code\n          : undefined,\n    };\n  }\n\n  async confirmResetPassword({\n    email,\n    code,\n    password,\n  }: ConfirmResetPasswordDto): Promise {\n    await this.userService.confirmResetPassword(email, code, password);\n\n    return this.utilsService.getGeneralResponse(true);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChangePasswordDto.html":{"url":"classes/ChangePasswordDto.html","title":"class - ChangePasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChangePasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/user/dto/change-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                currentPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                newPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        currentPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@MaxLength(32)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/user/dto/change-password.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@MinLength(6)@MaxLength(32)@IsStrongPassword({}, {message: 'new password should be at least 6 characters and a combination of numbers, lowercase letters, uppercase letters, and a symbol'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/user/dto/change-password.dto.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsDefined,\n  IsNotEmpty,\n  IsString,\n  IsStrongPassword,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class ChangePasswordDto {\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(32)\n  currentPassword: string;\n\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(6)\n  @MaxLength(32)\n  @IsStrongPassword(\n    {},\n    {\n      message:\n        'new password should be at least 6 characters and a combination of numbers, lowercase letters, uppercase letters, and a symbol',\n    },\n  )\n  newPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommonModule.html":{"url":"modules/CommonModule.html","title":"module - CommonModule","body":"\n                   \n\n\n\n\n    Modules\n    CommonModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CommonModule\n\n\n\ncluster_CommonModule_exports\n\n\n\ncluster_CommonModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nCommonModule\n\nCommonModule\n\nCommonModule -->\n\nAuthModule->CommonModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nCommonModule -->\n\nHealthModule->CommonModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nCommonModule -->\n\nUserModule->CommonModule\n\n\n\n\n\nUtilsModule\n\nUtilsModule\n\nCommonModule -->\n\nUtilsModule->CommonModule\n\n\n\n\n\nUtilsModule \n\nUtilsModule \n\nUtilsModule  -->\n\nCommonModule->UtilsModule \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/common.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            UtilsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UtilsModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HealthModule } from '../core/health/health.module';\nimport { UtilsModule } from './utils/utils.module';\nimport { UserModule } from './user/user.module';\nimport { AuthModule } from './auth/auth.module';\n\n@Module({\n  imports: [HealthModule, UtilsModule, UserModule, AuthModule],\n  exports: [UtilsModule],\n})\nexport class CommonModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConfirmResetPasswordDto.html":{"url":"classes/ConfirmResetPasswordDto.html","title":"class - ConfirmResetPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConfirmResetPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/auth/dto/confirm-reset-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                code\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@Length(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/auth/dto/confirm-reset-password.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@IsEmail()@MaxLength(255)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/auth/dto/confirm-reset-password.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@MinLength(6)@MaxLength(32)@IsStrongPassword({}, {message: 'password should be at least 6 characters and a combination of numbers, lowercase letters, uppercase letters, and a symbol'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/auth/dto/confirm-reset-password.dto.ts:38\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsDefined,\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  IsStrongPassword,\n  Length,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class ConfirmResetPasswordDto {\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  @IsEmail()\n  @MaxLength(255)\n  email: string;\n\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  @Length(6)\n  code: string;\n\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(6)\n  @MaxLength(32)\n  @IsStrongPassword(\n    {},\n    {\n      message:\n        'password should be at least 6 characters and a combination of numbers, lowercase letters, uppercase letters, and a symbol',\n    },\n  )\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CoreModule.html":{"url":"modules/CoreModule.html","title":"module - CoreModule","body":"\n                   \n\n\n\n\n    Modules\n    CoreModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/core.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\n@Module({})\nexport class CoreModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GeneralResponse.html":{"url":"classes/GeneralResponse.html","title":"class - GeneralResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GeneralResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/entities/general-response.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                result\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        result\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shared/entities/general-response.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class GeneralResponse {\n  @ApiProperty()\n  result: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GetTimeParams.html":{"url":"interfaces/GetTimeParams.html","title":"interface - GetTimeParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GetTimeParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/utils/types/get-time-params.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            formatted\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            minusAmount\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            plusAmount\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        formatted\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        formatted:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        minusAmount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        minusAmount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        plusAmount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        plusAmount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface GetTimeParams {\n  plusAmount?: number;\n  minusAmount?: number;\n  formatted?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUserHandler.html":{"url":"classes/GetUserHandler.html","title":"class - GetUserHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUserHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/user/queries/handlers/get-user.handler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        IQueryHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(model: Model)\n                    \n                \n                        \n                            \n                                Defined in src/common/user/queries/handlers/get-user.handler.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(undefined: GetUserQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/common/user/queries/handlers/get-user.handler.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                GetUserQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IQueryHandler, QueryHandler } from '@nestjs/cqrs';\nimport { Model } from 'mongoose';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { GetUserQuery } from '../impl';\nimport { User, UserDocument } from '../../schemas/user.schema';\n\n@QueryHandler(GetUserQuery)\nexport class GetUserHandler implements IQueryHandler {\n  constructor(@InjectModel(User.name) private model: Model) {}\n\n  async execute({ conditions }: GetUserQuery): Promise {\n    return this.model.findOne(conditions);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUserQuery.html":{"url":"classes/GetUserQuery.html","title":"class - GetUserQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUserQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/user/queries/impl/get-user.query.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                conditions\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(conditions: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/common/user/queries/impl/get-user.query.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        conditions\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        conditions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/common/user/queries/impl/get-user.query.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class GetUserQuery {\n  constructor(public readonly conditions: { [key: string]: any }) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/health/health.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                check\n                            \n                            \n                                    \n                                    \n                                checkDB\n                            \n                            \n                                    \n                                    \n                                checkMemory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        check\n                        \n                    \n                \n            \n            \n                \n                    \n                    check()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('disk')@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in src/core/health/health.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        checkDB\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkDB()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('db')@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in src/core/health/health.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        checkMemory\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkMemory()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('memory')@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in src/core/health/health.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport {\n  HealthCheckService,\n  HealthCheck,\n  MongooseHealthIndicator,\n  MemoryHealthIndicator,\n  DiskHealthIndicator,\n} from '@nestjs/terminus';\n\n@Controller({\n  version: '',\n  path: 'health',\n})\nexport class HealthController {\n  constructor(\n    private health: HealthCheckService,\n    private mongoose: MongooseHealthIndicator,\n    private memory: MemoryHealthIndicator,\n    private disk: DiskHealthIndicator,\n  ) {}\n\n  @Get('db')\n  @HealthCheck()\n  checkDB() {\n    return this.health.check([async () => this.mongoose.pingCheck('mongoose')]);\n  }\n\n  @Get('memory')\n  @HealthCheck()\n  checkMemory() {\n    return this.health.check([\n      async () => this.memory.checkHeap('memory_heap', 200 * 1024 * 1024),\n      async () => this.memory.checkRSS('memory_rss', 3000 * 1024 * 1024),\n    ]);\n  }\n\n  @Get('disk')\n  @HealthCheck()\n  check() {\n    return this.health.check([\n      // The used disk storage should not exceed 90% of the full disk size\n      () =>\n        this.disk.checkStorage('disk health', {\n          thresholdPercent: 0.9,\n          path: '/',\n        }),\n      // The used disk storage should not exceed 250 GB\n      () =>\n        this.disk.checkStorage('disk health', {\n          threshold: 250 * 1024 * 1024 * 1024,\n          path: '/',\n        }),\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HealthController } from './health.controller';\nimport { TerminusModule } from '@nestjs/terminus';\n\n@Module({\n  imports: [TerminusModule],\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IpMiddleware.html":{"url":"injectables/IpMiddleware.html","title":"injectable - IpMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IpMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/middlewares/ip.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(request: RequestInterface, reply: FastifyReply, done: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/middlewares/ip.middleware.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestInterface\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    reply\n                                    \n                                            FastifyReply\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { FastifyReply } from 'fastify';\n\nimport * as RequestIp from 'request-ip';\nimport { RequestInterface } from '../types/request.interface';\n\n@Injectable()\nexport class IpMiddleware implements NestMiddleware {\n  use(request: RequestInterface, reply: FastifyReply, done: () => void) {\n    request.clientIP = RequestIp.getClientIp(request);\n    done();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAdminAuthenticationGuard.html":{"url":"injectables/JwtAdminAuthenticationGuard.html","title":"injectable - JwtAdminAuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAdminAuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/guards/admin-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAdminAuthenticationGuard extends AuthGuard('jwt-admin') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAdminRefreshStrategy.html":{"url":"injectables/JwtAdminRefreshStrategy.html","title":"injectable - JwtAdminRefreshStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAdminRefreshStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/auth/strategies/jwt-admin-refresh.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/common/auth/strategies/jwt-admin-refresh.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: JwtPayloadInterface)\n                \n            \n\n\n            \n                \n                    Defined in src/common/auth/strategies/jwt-admin-refresh.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayloadInterface\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { UserService } from '@/common/user/services/user.service';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, ExtractJwt } from 'passport-jwt';\nimport { JwtPayloadInterface } from '../types/jwt-payload.interface';\nimport { UserEntity } from '@/shared/entities/user.entity';\n\n@Injectable()\nexport class JwtAdminRefreshStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-admin-refresh-token',\n) {\n  constructor(private userService: UserService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromBodyField('refreshToken'),\n      secretOrKey: process.env.JWT_REFRESH_TOKEN_SECRET,\n    });\n  }\n\n  async validate(payload: JwtPayloadInterface): Promise {\n    const { email } = payload;\n    const user = await this.userService.getUserByEmail(email);\n\n    console.log({ user });\n\n    if (!user || !user.isAdmin || !user.adminRefreshToken) {\n      throw new UnauthorizedException();\n    }\n\n    return this.userService.serializeUserData(user, undefined, undefined, true);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAdminRefreshTokenGuard.html":{"url":"injectables/JwtAdminRefreshTokenGuard.html","title":"injectable - JwtAdminRefreshTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAdminRefreshTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/auth/guards/auth-admin-refresh-token.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAdminRefreshTokenGuard extends AuthGuard(\n  'jwt-admin-refresh-token',\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAdminStrategy.html":{"url":"injectables/JwtAdminStrategy.html","title":"injectable - JwtAdminStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAdminStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/auth/strategies/jwt-admin.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/common/auth/strategies/jwt-admin.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: JwtPayloadInterface)\n                \n            \n\n\n            \n                \n                    Defined in src/common/auth/strategies/jwt-admin.strategy.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayloadInterface\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { UserService } from '@/common/user/services/user.service';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, ExtractJwt } from 'passport-jwt';\nimport { JwtPayloadInterface } from '../types/jwt-payload.interface';\nimport { UserEntity } from '@/shared/entities/user.entity';\n\n@Injectable()\nexport class JwtAdminStrategy extends PassportStrategy(Strategy, 'jwt-admin') {\n  constructor(private userService: UserService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: process.env.JWT_SECRET,\n    });\n  }\n\n  async validate(payload: JwtPayloadInterface): Promise {\n    const { email } = payload;\n    const user = await this.userService.getUserByEmail(email);\n\n    if (!user || !user.isAdmin || !user.adminRefreshToken) {\n      throw new UnauthorizedException();\n    }\n    return this.userService.serializeUserData(user, undefined, undefined, true);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthenticationGuard.html":{"url":"injectables/JwtAuthenticationGuard.html","title":"injectable - JwtAuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/guards/auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthenticationGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayloadInterface.html":{"url":"interfaces/JwtPayloadInterface.html","title":"interface - JwtPayloadInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayloadInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/auth/types/jwt-payload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            exp\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            iat\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        exp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        exp:     string | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        iat\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        iat:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayloadInterface {\n  email: string;\n  name: string;\n  iat?: string;\n  exp?: string | number;\n  sub?: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshStrategy.html":{"url":"injectables/JwtRefreshStrategy.html","title":"injectable - JwtRefreshStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/auth/strategies/jwt-refresh.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/common/auth/strategies/jwt-refresh.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: JwtPayloadInterface)\n                \n            \n\n\n            \n                \n                    Defined in src/common/auth/strategies/jwt-refresh.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayloadInterface\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { UserService } from '@/common/user/services/user.service';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, ExtractJwt } from 'passport-jwt';\nimport { JwtPayloadInterface } from '../types/jwt-payload.interface';\nimport { UserEntity } from '@/shared/entities/user.entity';\n\n@Injectable()\nexport class JwtRefreshStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh-token',\n) {\n  constructor(private userService: UserService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromBodyField('refreshToken'),\n      secretOrKey: process.env.JWT_REFRESH_TOKEN_SECRET,\n    });\n  }\n\n  async validate(payload: JwtPayloadInterface): Promise {\n    const { email } = payload;\n    const user = await this.userService.getUserByEmail(email);\n\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n\n    return this.userService.serializeUserData(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshTokenGuard.html":{"url":"injectables/JwtRefreshTokenGuard.html","title":"injectable - JwtRefreshTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/auth/guards/auth-refresh-token.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtRefreshTokenGuard extends AuthGuard('jwt-refresh-token') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/common/auth/strategies/jwt.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: JwtPayloadInterface)\n                \n            \n\n\n            \n                \n                    Defined in src/common/auth/strategies/jwt.strategy.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayloadInterface\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { UserService } from '@/common/user/services/user.service';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, ExtractJwt } from 'passport-jwt';\nimport { JwtPayloadInterface } from '../types/jwt-payload.interface';\nimport { UserEntity } from '@/shared/entities/user.entity';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor(private userService: UserService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: process.env.JWT_SECRET,\n    });\n  }\n\n  async validate(payload: JwtPayloadInterface): Promise {\n    const { email } = payload;\n    const user = await this.userService.getUserByEmail(email);\n\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return this.userService.serializeUserData(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtTokensInterface.html":{"url":"interfaces/JwtTokensInterface.html","title":"interface - JwtTokensInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtTokensInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/auth/types/jwt-tokens.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            refreshToken\n                                        \n                                \n                                \n                                        \n                                            token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        refreshToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refreshToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtTokensInterface {\n  token: string;\n  refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LanguageMiddleware.html":{"url":"injectables/LanguageMiddleware.html","title":"injectable - LanguageMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LanguageMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/middlewares/language.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(request: RequestInterface, res, done: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/middlewares/language.middleware.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestInterface\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NestMiddleware,\n} from '@nestjs/common';\nimport { FastifyReply } from 'fastify';\nimport { RequestInterface } from '../types/request.interface';\n\n@Injectable()\nexport class LanguageMiddleware implements NestMiddleware {\n  use(request: RequestInterface, res: FastifyReply['raw'], done: () => void) {\n    const language = request.headers['accept-language'];\n\n    if (!language) {\n      throw new BadRequestException('accept-language in header is required');\n    }\n\n    request.language = language;\n\n    done();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/auth/strategies/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/common/auth/strategies/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/auth/strategies/local.strategy.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super({ usernameField: 'email' });\n  }\n\n  async validate(email: string, password: string): Promise {\n    return this.authService.validateUser({ email, password });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingInterceptor.html":{"url":"injectables/LoggingInterceptor.html","title":"injectable - LoggingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/interceptors/logging.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Mainly responsible to log request responses and their latency using nest Logger\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/shared/interceptors/logging.interceptor.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        intercept\n                        \n                    \n                \n            \n            \n                \n                    \n                    intercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/interceptors/logging.interceptor.ts:28\n                \n            \n\n\n            \n                \n                    will be called on each HTTP request\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ExecutionContext\n\n                                    \n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        CallHandler\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  Logger,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { FastifyReply } from 'fastify';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { RequestInterface } from '../types/request.interface';\nimport * as Sentry from '@sentry/node';\nimport { ObjectId } from 'mongodb';\nimport { ConfigService } from '@nestjs/config';\nimport { PRODUCTION_ENV, STAGING_ENV } from '../configs/constants';\n/**\n * Mainly responsible to log request responses and their latency using nest Logger\n */\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n  constructor(private readonly configService: ConfigService) {}\n  /**\n   * will be called on each HTTP request\n   * @param context ExecutionContext\n   * @param next CallHandler\n   */\n  async intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Promise> {\n    const ctx = context.switchToHttp();\n    const statusMessage = '';\n    let transaction;\n    const now = Date.now();\n    const { statusCode }: FastifyReply = ctx.getResponse();\n    // const { statusCode, statusMessage }: FastifyReply = ctx.getResponse(); // for express adapter\n\n    const {\n      raw: { clientIP, language },\n      user,\n      method,\n      url,\n      traceId,\n      routerPath,\n      query,\n      params,\n      body,\n      headers,\n    }: RequestInterface = ctx.getRequest();\n\n    ctx.getRequest().traceId = new ObjectId();\n\n    return next\n      .handle()\n      .pipe(\n        tap(() => {\n          ctx.getRequest().start = now;\n\n          if (\n            [PRODUCTION_ENV, STAGING_ENV].includes(\n              this.configService.get('app.env'),\n            )\n          ) {\n            transaction = Sentry.startTransaction({\n              op: 'API-CALL',\n              name: `[${method.toUpperCase()}] ${routerPath}`,\n              data: {\n                traceId,\n                clientIP,\n                url,\n                user: {\n                  email: user?.email,\n                },\n                query,\n                params,\n                body,\n                headers,\n              },\n            });\n          }\n        }),\n      )\n      .pipe(\n        tap(() => {\n          const responseTime = Date.now() - now;\n\n          if (transaction) transaction.finish();\n\n          const logMessage = `${\n            clientIP || 'localhost'\n          } | [${method}] ${url} | language:${language} | ${\n            statusCode || ''\n          } ${responseTime}ms ${statusMessage || ''}`;\n\n          Logger.verbose(logMessage, 'LoggingInterceptor');\n        }),\n      );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ObjectIDPipe.html":{"url":"injectables/ObjectIDPipe.html","title":"injectable - ObjectIDPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ObjectIDPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/pipes/objectid.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(utilsService: UtilsService)\n                    \n                \n                        \n                            \n                                Defined in src/shared/pipes/objectid.pipe.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        utilsService\n                                                  \n                                                        \n                                                                        UtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: string, undefined: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/pipes/objectid.pipe.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { UtilsService } from '@/common/utils/utils.service';\nimport {\n  PipeTransform,\n  Injectable,\n  ArgumentMetadata,\n  BadRequestException,\n} from '@nestjs/common';\n\n@Injectable()\nexport class ObjectIDPipe implements PipeTransform {\n  constructor(private readonly utilsService: UtilsService) {}\n\n  transform(value: string, { type, data }: ArgumentMetadata) {\n    if (type === 'param') {\n      if (!this.utilsService.isValidObjectId(value)) {\n        throw new BadRequestException(`Value of ${data} isn't ObjectID`);\n      }\n    }\n\n    return value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/auth/dto/refresh-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@IsJWT()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/auth/dto/refresh-token.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDefined, IsJWT, IsNotEmpty, IsString } from 'class-validator';\n\nexport class RefreshTokenDto {\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  @IsJWT()\n  refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestInterface.html":{"url":"interfaces/RequestInterface.html","title":"interface - RequestInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/types/request.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Extends request interface to append app-layer properties to request\n\n            \n\n            \n                Extends\n            \n            \n                    FastifyRequest\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            clientIP\n                                        \n                                \n                                \n                                        \n                                            language\n                                        \n                                \n                                \n                                        \n                                            raw\n                                        \n                                \n                                \n                                        \n                                            traceId\n                                        \n                                \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clientIP\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        clientIP:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        language\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        language:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        raw\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        raw:         ExtendedRawRequet\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ExtendedRawRequet\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        traceId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        traceId:     mongodb.ObjectId\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     mongodb.ObjectId\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         UserEntity\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserEntity\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { FastifyRequest } from 'fastify';\nimport mongodb from 'mongodb';\nimport { UserEntity } from '../entities/user.entity';\n\ntype ExtendedRawRequet = FastifyRequest['raw'] & {\n  clientIP: string;\n\n  language: string;\n};\n/**\n * Extends request interface to append app-layer properties to request\n */\nexport interface RequestInterface extends FastifyRequest {\n  clientIP: string;\n\n  language: string;\n\n  raw: ExtendedRawRequet;\n\n  user: UserEntity;\n\n  traceId: mongodb.ObjectId;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResetPasswordData.html":{"url":"interfaces/ResetPasswordData.html","title":"interface - ResetPasswordData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ResetPasswordData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/user/types/reset-password-data.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            code\n                                        \n                                \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        code\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        code:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ResetPasswordData {\n  userId: string;\n  code: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResetPasswordDto.html":{"url":"classes/ResetPasswordDto.html","title":"class - ResetPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResetPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/auth/dto/reset-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@IsEmail()@MaxLength(255)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/auth/dto/reset-password.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsDefined,\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  MaxLength,\n} from 'class-validator';\n\nexport class ResetPasswordDto {\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  @IsEmail()\n  @MaxLength(255)\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResetPasswordEntity.html":{"url":"classes/ResetPasswordEntity.html","title":"class - ResetPasswordEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResetPasswordEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/auth/entities/reset-password.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                code\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/auth/entities/reset-password.entity.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { DEVELOPMENT_ENV, STAGING_ENV } from '@/shared/configs/constants';\nimport { GeneralResponse } from '@/shared/entities/general-response';\nimport { ApiProperty, IntersectionType } from '@nestjs/swagger';\n\nexport class ResetPasswordEntity extends IntersectionType(GeneralResponse) {\n  @ApiProperty({\n    description: `has value just in the ${DEVELOPMENT_ENV} and ${STAGING_ENV} environment`,\n  })\n  code?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/auth/dto/signin.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@IsEmail()@MaxLength(255)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/auth/dto/signin.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@MinLength(6)@MaxLength(32)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/auth/dto/signin.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsDefined,\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class SignInDto {\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  @IsEmail()\n  @MaxLength(255)\n  email: string;\n\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(6)\n  @MaxLength(32)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SignInPayloadInterface.html":{"url":"interfaces/SignInPayloadInterface.html","title":"interface - SignInPayloadInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SignInPayloadInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/auth/types/signin.payload.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            isAdmin\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isAdmin\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isAdmin:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface SignInPayloadInterface {\n  email: string;\n  name: string;\n  isAdmin?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignUpDto.html":{"url":"classes/SignUpDto.html","title":"class - SignUpDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignUpDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/dto/signup.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@IsEmail()@MaxLength(255)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shared/dto/signup.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@MaxLength(255)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shared/dto/signup.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsNotEmpty()@IsString()@MinLength(6)@MaxLength(32)@IsStrongPassword({}, {message: 'password should be at least 6 characters and a combination of numbers, lowercase letters, uppercase letters, and a symbol'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shared/dto/signup.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsDefined,\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  IsStrongPassword,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class SignUpDto {\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  @IsEmail()\n  @MaxLength(255)\n  email: string;\n\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(255)\n  name: string;\n\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(6)\n  @MaxLength(32)\n  @IsStrongPassword(\n    {},\n    {\n      message:\n        'password should be at least 6 characters and a combination of numbers, lowercase letters, uppercase letters, and a symbol',\n    },\n  )\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignUpUserCommand.html":{"url":"classes/SignUpUserCommand.html","title":"class - SignUpUserCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignUpUserCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/user/commands/impl/signup-user.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                data\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: SignUpDto)\n                    \n                \n                        \n                            \n                                Defined in src/common/user/commands/impl/signup-user.command.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        SignUpDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SignUpDto\n\n                    \n                \n                    \n                        \n                                Defined in src/common/user/commands/impl/signup-user.command.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { SignUpDto } from '../../../../shared/dto/signup.dto';\n\nexport class SignUpUserCommand {\n  constructor(public readonly data: SignUpDto) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignUpUserHandler.html":{"url":"classes/SignUpUserHandler.html","title":"class - SignUpUserHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignUpUserHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/user/commands/handlers/signup-user.handler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ICommandHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(model: Model)\n                    \n                \n                        \n                            \n                                Defined in src/common/user/commands/handlers/signup-user.handler.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(command: SignUpUserCommand)\n                \n            \n\n\n            \n                \n                    Defined in src/common/user/commands/handlers/signup-user.handler.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    command\n                                    \n                                                SignUpUserCommand\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { SignUpUserCommand } from '../impl/signup-user.command';\nimport { Model } from 'mongoose';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { User } from '../../schemas/user.schema';\n\n@CommandHandler(SignUpUserCommand)\nexport class SignUpUserHandler implements ICommandHandler {\n  constructor(@InjectModel(User.name) private model: Model) {}\n\n  async execute(command: SignUpUserCommand): Promise {\n    const {\n      data: { email, name, password },\n    } = command;\n\n    const user = new this.model();\n    user.email = email;\n    user.name = name;\n    user.password = password;\n\n    return user.save();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserCommand.html":{"url":"classes/UpdateUserCommand.html","title":"class - UpdateUserCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/user/commands/impl/update-user.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                data\n                            \n                            \n                                    Public\n                                    Readonly\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userId: string, data: GeneralObject)\n                    \n                \n                        \n                            \n                                Defined in src/common/user/commands/impl/update-user.command.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        GeneralObject\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GeneralObject\n\n                    \n                \n                    \n                        \n                                Defined in src/common/user/commands/impl/update-user.command.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/common/user/commands/impl/update-user.command.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GeneralObject } from '@/shared/types/general-object';\n\nexport class UpdateUserCommand {\n  constructor(\n    public readonly userId: string,\n    public readonly data: GeneralObject,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserHandler.html":{"url":"classes/UpdateUserHandler.html","title":"class - UpdateUserHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/user/commands/handlers/update-user.handler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ICommandHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(model: Model)\n                    \n                \n                        \n                            \n                                Defined in src/common/user/commands/handlers/update-user.handler.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(command: UpdateUserCommand)\n                \n            \n\n\n            \n                \n                    Defined in src/common/user/commands/handlers/update-user.handler.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    command\n                                    \n                                                UpdateUserCommand\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { UpdateUserCommand } from '../impl/update-user.command';\nimport { Model } from 'mongoose';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { User } from '../../schemas/user.schema';\n\n@CommandHandler(UpdateUserCommand)\nexport class UpdateUserHandler implements ICommandHandler {\n  constructor(@InjectModel(User.name) private model: Model) {}\n\n  async execute(command: UpdateUserCommand): Promise {\n    const { userId, data } = command;\n\n    return this.model.findByIdAndUpdate(userId, data, { new: true });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/user/schemas/user.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                adminRefreshToken\n                            \n                            \n                                    \n                                    Optional\n                                createdAt\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                    Optional\n                                isAdmin\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                    Optional\n                                refreshToken\n                            \n                            \n                                    \n                                    Optional\n                                resetPassword\n                            \n                            \n                                    \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        adminRefreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/user/schemas/user.schema.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/user/schemas/user.schema.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/user/schemas/user.schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        isAdmin\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/user/schemas/user.schema.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/user/schemas/user.schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/user/schemas/user.schema.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/user/schemas/user.schema.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        resetPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserResetPassword\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: UserResetPassword})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/user/schemas/user.schema.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/user/schemas/user.schema.ts:39\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument } from 'mongoose';\nimport { UserResetPassword } from './reset-password.schema';\n\nexport type UserDocument = HydratedDocument;\n\n@Schema({\n  versionKey: false,\n  timestamps: true,\n})\nexport class User {\n  @Prop({})\n  email: string;\n\n  @Prop({})\n  name: string;\n\n  @Prop({})\n  password: string;\n\n  @Prop({})\n  refreshToken?: string;\n\n  @Prop({})\n  adminRefreshToken?: string;\n\n  @Prop({\n    type: UserResetPassword,\n  })\n  resetPassword?: UserResetPassword;\n\n  @Prop({ default: false })\n  isAdmin?: boolean;\n\n  @Prop({})\n  createdAt?: string;\n\n  @Prop({})\n  updatedAt?: string;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserAdminService.html":{"url":"injectables/UserAdminService.html","title":"injectable - UserAdminService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserAdminService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/user/services/user.admin.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class UserAdminService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/user/controllers/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                changePassword\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    changePassword(undefined: RequestInterface, data: ChangePasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('change-password')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/common/user/controllers/user.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                RequestInterface\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                ChangePasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(undefined: RequestInterface)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('profile')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/common/user/controllers/user.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                RequestInterface\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Patch, Req, UseGuards } from '@nestjs/common';\nimport { UserService } from '../services/user.service';\nimport { ApiTags } from '@nestjs/swagger';\nimport { ChangePasswordDto } from '../dto/change-password.dto';\nimport { GeneralResponse } from '@/shared/entities/general-response';\nimport { JwtAuthenticationGuard } from '@/shared/guards/auth.guard';\nimport { RequestInterface } from '@/shared/types/request.interface';\nimport { UserEntity } from '@/shared/entities/user.entity';\n\n@ApiTags('client', 'user')\n@Controller('user')\nexport class UserController {\n  constructor(private readonly service: UserService) {}\n\n  @Patch('change-password')\n  @UseGuards(JwtAuthenticationGuard)\n  async changePassword(\n    @Req() { user }: RequestInterface,\n    @Body() data: ChangePasswordDto,\n  ): Promise {\n    return this.service.updatePassword(user.id, data);\n  }\n\n  @Get('profile')\n  @UseGuards(JwtAuthenticationGuard)\n  async getProfile(@Req() { user }: RequestInterface): Promise {\n    return this.service.getProfile(user.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserEntity.html":{"url":"classes/UserEntity.html","title":"class - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/entities/user.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                isAdmin\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                refreshToken\n                            \n                            \n                                    Optional\n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/shared/entities/user.entity.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/shared/entities/user.entity.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        isAdmin\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/shared/entities/user.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/shared/entities/user.entity.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/shared/entities/user.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/shared/entities/user.entity.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UserEntity {\n  id: string;\n  email: string;\n  name: string;\n  token?: string;\n  refreshToken?: string;\n  isAdmin?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_imports\n\n\n\n\nUtilsModule\n\nUtilsModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nUtilsModule->UserModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserAdminService\n\nUserAdminService\n\nUserModule -->\n\nUserAdminService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserAdminService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UtilsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './services/user.service';\nimport { UserController } from './controllers/user.controller';\nimport { UserAdminService } from './services/user.admin.service';\nimport { CqrsModule } from '@nestjs/cqrs';\nimport { UtilsModule } from '../utils/utils.module';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from './schemas/user.schema';\nimport { CommandHandlers } from './commands/handlers';\nimport { QueryHandlers } from './queries/handlers';\n\n@Module({\n  imports: [\n    CqrsModule,\n    UtilsModule,\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n  ],\n  providers: [\n    UserService,\n    UserAdminService,\n    ...CommandHandlers,\n    ...QueryHandlers,\n  ],\n  controllers: [UserController],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserResetPassword.html":{"url":"classes/UserResetPassword.html","title":"class - UserResetPassword","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserResetPassword\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/user/schemas/reset-password.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                code\n                            \n                            \n                                    \n                                expireAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/user/schemas/reset-password.schema.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        expireAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/user/schemas/reset-password.schema.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument } from 'mongoose';\n\nexport type UserResetPasswordDocument = HydratedDocument;\n\n@Schema({\n  _id: false,\n  versionKey: false,\n})\nexport class UserResetPassword {\n  @Prop({})\n  code: string;\n\n  @Prop({})\n  expireAt: string;\n}\n\nexport const UserResetPasswordSchema =\n  SchemaFactory.createForClass(UserResetPassword);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/user/services/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkEmailExist\n                            \n                            \n                                    Async\n                                confirmResetPassword\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                getUser\n                            \n                            \n                                    Async\n                                getUserByEmail\n                            \n                            \n                                    Async\n                                getUserById\n                            \n                            \n                                getUserEntityType\n                            \n                            \n                                getUserNotFoundMsg\n                            \n                            \n                                    Async\n                                resetPassword\n                            \n                            \n                                    Async\n                                saveResetPasswordData\n                            \n                            \n                                serializeUserData\n                            \n                            \n                                    Async\n                                updatePassword\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commandBus: CommandBus, queryBus: QueryBus, utilsService: UtilsService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/common/user/services/user.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commandBus\n                                                  \n                                                        \n                                                                    CommandBus\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryBus\n                                                  \n                                                        \n                                                                    QueryBus\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        utilsService\n                                                  \n                                                        \n                                                                        UtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        checkEmailExist\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkEmailExist(email: string, ignoreId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/user/services/user.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    ignoreId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        confirmResetPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirmResetPassword(email: string, code: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/user/services/user.service.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: SignUpDto)\n                \n            \n\n\n            \n                \n                    Defined in src/common/user/services/user.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                SignUpDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/user/services/user.service.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUser(conditions: GeneralObject)\n                \n            \n\n\n            \n                \n                    Defined in src/common/user/services/user.service.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                GeneralObject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/user/services/user.service.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserById(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/user/services/user.service.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserEntityType\n                        \n                    \n                \n            \n            \n                \ngetUserEntityType()\n                \n            \n\n\n            \n                \n                    Defined in src/common/user/services/user.service.ts:202\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserNotFoundMsg\n                        \n                    \n                \n            \n            \n                \ngetUserNotFoundMsg()\n                \n            \n\n\n            \n                \n                    Defined in src/common/user/services/user.service.ts:206\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    resetPassword(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/user/services/user.service.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveResetPasswordData\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveResetPasswordData(userId: string, code: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/user/services/user.service.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serializeUserData\n                        \n                    \n                \n            \n            \n                \nserializeUserData(user: UserDocument, token: string, refreshToken: string, isAdminMode)\n                \n            \n\n\n            \n                \n                    Defined in src/common/user/services/user.service.ts:184\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserDocument\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        undefined\n                                    \n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        undefined\n                                    \n\n                                \n                                \n                                    isAdminMode\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         UserEntity\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePassword(userId: string, undefined: ChangePasswordDto)\n                \n            \n\n\n            \n                \n                    Defined in src/common/user/services/user.service.ts:150\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                ChangePasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(userId: string, data: GeneralObject)\n                \n            \n\n\n            \n                \n                    Defined in src/common/user/services/user.service.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                GeneralObject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { CommandBus, QueryBus } from '@nestjs/cqrs';\nimport { SignUpDto } from '../../../shared/dto/signup.dto';\nimport { SignUpUserCommand } from '../commands/impl/signup-user.command';\nimport { UtilsService } from '@/common/utils/utils.service';\nimport { UserEntity } from '../../../shared/entities/user.entity';\nimport { UserDocument } from '../schemas/user.schema';\nimport { GeneralObject } from '@/shared/types/general-object';\nimport { GetUserQuery } from '../queries/impl';\nimport { UpdateUserCommand } from '../commands/impl/update-user.command';\nimport { GeneralResponse } from '@/shared/entities/general-response';\nimport { ChangePasswordDto } from '../dto/change-password.dto';\nimport { ResetPasswordData } from '../types/reset-password-data';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    private readonly commandBus: CommandBus,\n    private readonly queryBus: QueryBus,\n    private readonly utilsService: UtilsService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  async create(data: SignUpDto): Promise {\n    const copyOfData = { ...data };\n\n    await this.checkEmailExist(copyOfData.email);\n\n    copyOfData.password = await this.utilsService.bcrypeHash(\n      copyOfData.password,\n    );\n\n    const user = await this.commandBus.execute(\n      new SignUpUserCommand(copyOfData),\n    );\n\n    return this.serializeUserData(user);\n  }\n\n  async checkEmailExist(email: string, ignoreId = ''): Promise {\n    const conditions = {\n      email,\n    };\n\n    if (ignoreId) {\n      conditions['id'] = { $not: ignoreId };\n    }\n\n    const user = await this.getUser(conditions);\n    if (user) {\n      throw new BadRequestException(this.utilsService.t('errors.EMAIL_EXISTS'));\n    }\n  }\n\n  async getUserByEmail(email: string): Promise {\n    return this.getUser({ email });\n  }\n\n  async getUserById(userId: string): Promise {\n    const conditions = {\n      _id: userId,\n    };\n\n    const user = await this.getUser(conditions);\n    if (!user) {\n      throw new NotFoundException(this.getUserNotFoundMsg());\n    }\n\n    return user;\n  }\n\n  async getUser(conditions: GeneralObject): Promise {\n    return this.queryBus.execute(new GetUserQuery(conditions));\n  }\n\n  async updateUser(userId: string, data: GeneralObject): Promise {\n    return this.commandBus.execute(new UpdateUserCommand(userId, data));\n  }\n\n  async getProfile(userId: string): Promise {\n    const user = await this.getUserById(userId);\n\n    return this.serializeUserData(user);\n  }\n\n  async resetPassword(email: string): Promise {\n    const user = await this.getUserByEmail(email);\n    if (!user) {\n      throw new NotFoundException(this.getUserNotFoundMsg());\n    }\n\n    const code = this.utilsService.generateNumericalCode().toString();\n\n    await this.saveResetPasswordData(user._id.toHexString(), code);\n\n    return {\n      userId: user._id.toHexString(),\n      code,\n    };\n  }\n\n  async confirmResetPassword(email: string, code: string, password: string) {\n    const user = await this.getUserByEmail(email);\n    if (!user || !user?.resetPassword?.code) {\n      throw new NotFoundException(this.getUserNotFoundMsg());\n    }\n\n    if (\n      this.utilsService.isAfterDate({\n        comparedDate: user.resetPassword.expireAt,\n      }) ||\n      !this.utilsService.matchValue(code, user.resetPassword.code)\n    ) {\n      throw new BadRequestException(\n        this.utilsService.t('errors.CODE_IS_INVALID'),\n      );\n    }\n\n    const data = {\n      resetPassword: {\n        code: null,\n        expireAt: null,\n      },\n      password: await this.utilsService.bcrypeHash(password),\n    };\n    await this.updateUser(user._id.toHexString(), data);\n  }\n\n  async saveResetPasswordData(userId: string, code: string) {\n    const hashedCode = this.utilsService.hashValue(code);\n    const expireAt = this.utilsService.getTime({\n      plusAmount: this.configService.get('user.resetPasswordExpire'),\n    });\n\n    const data = {\n      resetPassword: {\n        code: hashedCode,\n        expireAt,\n      },\n    };\n\n    return this.updateUser(userId, data);\n  }\n\n  async updatePassword(\n    userId: string,\n    { currentPassword, newPassword }: ChangePasswordDto,\n  ): Promise {\n    if (currentPassword === newPassword) {\n      throw new BadRequestException(\n        this.utilsService.t('errors.INVALID_CURRENT_PASSWORD'),\n      );\n    }\n\n    const user = await this.getUserById(userId);\n    if (!user) {\n      throw new NotFoundException(this.getUserNotFoundMsg());\n    }\n\n    if (\n      !(await this.utilsService.compareBcrypeHash(\n        currentPassword,\n        user.password,\n      ))\n    ) {\n      throw new BadRequestException(\n        this.utilsService.t('errors.WRONG_CURRENT_PASSWORD'),\n      );\n    }\n\n    const data = {\n      password: await this.utilsService.bcrypeHash(newPassword),\n    };\n    await this.updateUser(userId, data);\n\n    return this.utilsService.getGeneralResponse(true);\n  }\n\n  serializeUserData(\n    user: UserDocument,\n    token: string = undefined,\n    refreshToken: string = undefined,\n    isAdminMode = false,\n  ): UserEntity {\n    const { _id, email, name, isAdmin } = user;\n\n    return {\n      id: _id.toHexString(),\n      email,\n      name,\n      token,\n      refreshToken,\n      isAdmin: isAdminMode ? isAdmin : undefined,\n    };\n  }\n\n  getUserEntityType() {\n    return UserEntity;\n  }\n\n  getUserNotFoundMsg(): string {\n    return this.utilsService.t('errors.USER_NOT_FOUND');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UtilsModule.html":{"url":"modules/UtilsModule.html","title":"module - UtilsModule","body":"\n                   \n\n\n\n\n    Modules\n    UtilsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UtilsModule\n\n\n\ncluster_UtilsModule_exports\n\n\n\ncluster_UtilsModule_providers\n\n\n\n\nUtilsService \n\nUtilsService \n\n\n\nUtilsModule\n\nUtilsModule\n\nUtilsService  -->\n\nUtilsModule->UtilsService \n\n\n\n\n\nUtilsService\n\nUtilsService\n\nUtilsModule -->\n\nUtilsService->UtilsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/utils/utils.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UtilsService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UtilsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UtilsService } from './utils.service';\n\n@Module({\n  providers: [UtilsService],\n  exports: [UtilsService],\n})\nexport class UtilsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UtilsService.html":{"url":"injectables/UtilsService.html","title":"injectable - UtilsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UtilsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/utils/utils.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                hashValue\n                            \n                            \n                                matchValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                bcrypeHash\n                            \n                            \n                                    Async\n                                compareBcrypeHash\n                            \n                            \n                                encryptValue\n                            \n                            \n                                generateNumericalCode\n                            \n                            \n                                getGeneralResponse\n                            \n                            \n                                    Async\n                                getSalt\n                            \n                            \n                                getTime\n                            \n                            \n                                isAfterDate\n                            \n                            \n                                isDevelopmentEnv\n                            \n                            \n                                isProductionEnv\n                            \n                            \n                                isStagingEnv\n                            \n                            \n                                isTestEnv\n                            \n                            \n                                isValidObjectId\n                            \n                            \n                                t\n                            \n                            \n                                toObjectId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, i18nService: I18nService)\n                    \n                \n                        \n                            \n                                Defined in src/common/utils/utils.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        i18nService\n                                                  \n                                                        \n                                                                    I18nService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        bcrypeHash\n                        \n                    \n                \n            \n            \n                \n                    \n                    bcrypeHash(value: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/utils/utils.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        compareBcrypeHash\n                        \n                    \n                \n            \n            \n                \n                    \n                    compareBcrypeHash(value: string, hash: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/utils/utils.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    hash\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encryptValue\n                        \n                    \n                \n            \n            \n                \nencryptValue(value: string, salt: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/utils/utils.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    salt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateNumericalCode\n                        \n                    \n                \n            \n            \n                \ngenerateNumericalCode(codeLength: number)\n                \n            \n\n\n            \n                \n                    Defined in src/common/utils/utils.service.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    codeLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        6\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getGeneralResponse\n                        \n                    \n                \n            \n            \n                \ngetGeneralResponse(value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/common/utils/utils.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         GeneralResponse\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getSalt\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSalt()\n                \n            \n\n\n            \n                \n                    Defined in src/common/utils/utils.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTime\n                        \n                    \n                \n            \n            \n                \ngetTime(undefined: GetTimeParams)\n                \n            \n\n\n            \n                \n                    Defined in src/common/utils/utils.service.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                                GetTimeParams\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isAfterDate\n                        \n                    \n                \n            \n            \n                \nisAfterDate(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/common/utils/utils.service.ts:133\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDevelopmentEnv\n                        \n                    \n                \n            \n            \n                \nisDevelopmentEnv()\n                \n            \n\n\n            \n                \n                    Defined in src/common/utils/utils.service.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isProductionEnv\n                        \n                    \n                \n            \n            \n                \nisProductionEnv()\n                \n            \n\n\n            \n                \n                    Defined in src/common/utils/utils.service.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isStagingEnv\n                        \n                    \n                \n            \n            \n                \nisStagingEnv()\n                \n            \n\n\n            \n                \n                    Defined in src/common/utils/utils.service.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTestEnv\n                        \n                    \n                \n            \n            \n                \nisTestEnv()\n                \n            \n\n\n            \n                \n                    Defined in src/common/utils/utils.service.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isValidObjectId\n                        \n                    \n                \n            \n            \n                \nisValidObjectId(stringId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/utils/utils.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stringId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        t\n                        \n                    \n                \n            \n            \n                \nt(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/utils/utils.service.ts:143\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toObjectId\n                        \n                    \n                \n            \n            \n                \ntoObjectId(stringId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/utils/utils.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stringId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Schema.Types.ObjectId\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        hashValue\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/common/utils/utils.service.ts:62\n                        \n                    \n\n            \n                \n                    Hash value with random salt\n XXXX till 64 XXXX till 32\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        matchValue\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/common/utils/utils.service.ts:68\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Schema, isValidObjectId } from 'mongoose';\nimport * as moment from 'moment';\nimport * as randomNumber from 'random-number';\nimport * as bcrypt from 'bcrypt';\nimport { ConfigService } from '@nestjs/config';\nimport { I18nContext, I18nService } from 'nestjs-i18n';\nimport { randomBytes, scryptSync, timingSafeEqual } from 'crypto';\nimport { GeneralResponse } from '../../shared/entities/general-response';\nimport {\n  DEVELOPMENT_ENV,\n  PRODUCTION_ENV,\n  STAGING_ENV,\n  TEST_ENV,\n} from '@/shared/configs/constants';\nimport { GetTimeParams } from './types/get-time-params.interface';\n\n@Injectable()\nexport class UtilsService {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly i18nService: I18nService,\n  ) {}\n\n  isValidObjectId(stringId: string): boolean {\n    return isValidObjectId(stringId);\n  }\n\n  toObjectId(stringId: string): Schema.Types.ObjectId {\n    return new Schema.Types.ObjectId(stringId);\n  }\n\n  getGeneralResponse(value: boolean): GeneralResponse {\n    return {\n      result: value,\n    };\n  }\n\n  async getSalt(): Promise {\n    return bcrypt.genSalt();\n  }\n\n  async bcrypeHash(value: string): Promise {\n    const salt = await this.getSalt();\n\n    return bcrypt.hash(value, salt);\n  }\n\n  async compareBcrypeHash(value: string, hash: string): Promise {\n    return bcrypt.compare(value, hash);\n  }\n\n  encryptValue(value: string, salt: string) {\n    return scryptSync(value, salt, 32).toString('hex');\n  }\n\n  /**\n   * Hash value with random salt\n   * @return {string} string value hash followed by salt\n   *  XXXX till 64 XXXX till 32\n   */\n  hashValue = (value: string): string => {\n    // Any random string here (ideally should be at least 16 bytes)\n    const salt = randomBytes(16).toString('hex');\n    return this.encryptValue(value, salt) + salt;\n  };\n\n  matchValue = (value: string, hashedValue: string): boolean => {\n    // extract salt from the hashed string\n    // our hex password length is 32*2 = 64\n    const salt = hashedValue.slice(64);\n    const originalValueHash = hashedValue.slice(0, 64);\n    const currentValueHash = this.encryptValue(value, salt);\n\n    return timingSafeEqual(\n      Buffer.from(originalValueHash),\n      Buffer.from(currentValueHash),\n    );\n  };\n\n  generateNumericalCode(codeLength = 6): number {\n    const minMax = {\n      '4': {\n        min: 1000,\n        max: 9999,\n      },\n      '6': {\n        min: 100000,\n        max: 999999,\n      },\n    };\n\n    const minMaxKey =\n      typeof minMax[codeLength] === 'undefined' ? '4' : codeLength;\n\n    const options = {\n      min: minMax[minMaxKey].min,\n      max: minMax[minMaxKey].max,\n      integer: true,\n    };\n\n    return randomNumber(options);\n  }\n\n  isDevelopmentEnv() {\n    return this.configService.get('env') === DEVELOPMENT_ENV;\n  }\n\n  isStagingEnv() {\n    return this.configService.get('env') === STAGING_ENV;\n  }\n\n  isTestEnv() {\n    return this.configService.get('env') === TEST_ENV;\n  }\n\n  isProductionEnv() {\n    return this.configService.get('env') === PRODUCTION_ENV;\n  }\n\n  getTime({\n    plusAmount = 0,\n    minusAmount = 0,\n    formatted = true,\n  }: GetTimeParams = {}) {\n    const time = moment()\n      .add(plusAmount, 'minutes')\n      .subtract(minusAmount, 'minutes');\n\n    return formatted ? time.toISOString() : time.unix();\n  }\n\n  isAfterDate({\n    sourceDate = moment(),\n    comparedDate,\n  }: {\n    sourceDate?: moment.Moment | string;\n    comparedDate: moment.Moment | string;\n  }) {\n    return moment(sourceDate).isAfter(comparedDate);\n  }\n\n  t(key: string): string {\n    return this.i18nService.t(key, { lang: I18nContext.current().lang });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/auth/controllers/auth.admin.controller.ts\n            \n            controller\n            AuthAdminController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/auth/controllers/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/common/auth/dto/confirm-reset-password.dto.ts\n            \n            class\n            ConfirmResetPasswordDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/auth/dto/refresh-token.dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/auth/dto/reset-password.dto.ts\n            \n            class\n            ResetPasswordDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/auth/dto/signin.dto.ts\n            \n            class\n            SignInDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/auth/entities/reset-password.entity.ts\n            \n            class\n            ResetPasswordEntity\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/auth/events/handlers/afrer-admin-signin.event.handler.ts\n            \n            class\n            AfterAdminSignInEventHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/auth/events/handlers/afrer-reset-password.event.handler.ts\n            \n            class\n            AfterResetPasswordHandler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/auth/events/handlers/afrer-signin.event.handler.ts\n            \n            class\n            AfterSignInEventHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/auth/events/handlers/index.ts\n            \n            variable\n            EventHandlers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/auth/events/impl/after-admin-signin.event.ts\n            \n            class\n            AfterAdminSignInEvent\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/auth/events/impl/after-reset-password.event.ts\n            \n            class\n            AfterResetPasswordEvent\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/auth/events/impl/after-signin.event.ts\n            \n            class\n            AfterSignInEvent\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/auth/guards/auth-admin-refresh-token.guard.ts\n            \n            injectable\n            JwtAdminRefreshTokenGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/auth/guards/auth-refresh-token.guard.ts\n            \n            injectable\n            JwtRefreshTokenGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/auth/services/auth-common.service.ts\n            \n            injectable\n            AuthCommonService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/common/auth/services/auth.admin.service.ts\n            \n            injectable\n            AuthAdminService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/auth/services/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/common/auth/strategies/admin.local.strategy.ts\n            \n            injectable\n            AdminLocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/auth/strategies/jwt-admin-refresh.strategy.ts\n            \n            injectable\n            JwtAdminRefreshStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/auth/strategies/jwt-admin.strategy.ts\n            \n            injectable\n            JwtAdminStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/auth/strategies/jwt-refresh.strategy.ts\n            \n            injectable\n            JwtRefreshStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/auth/types/admin.signin.payload.ts\n            \n            interface\n            AdminSignInPayloadInterface\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/auth/types/jwt-payload.interface.ts\n            \n            interface\n            JwtPayloadInterface\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/common/auth/types/jwt-tokens.interface.ts\n            \n            interface\n            JwtTokensInterface\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/auth/types/signin.payload.ts\n            \n            interface\n            SignInPayloadInterface\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/user/commands/handlers/index.ts\n            \n            variable\n            CommandHandlers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/user/commands/handlers/signup-user.handler.ts\n            \n            class\n            SignUpUserHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/user/commands/handlers/update-user.handler.ts\n            \n            class\n            UpdateUserHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/user/commands/impl/signup-user.command.ts\n            \n            class\n            SignUpUserCommand\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/user/commands/impl/update-user.command.ts\n            \n            class\n            UpdateUserCommand\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/user/controllers/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/user/dto/change-password.dto.ts\n            \n            class\n            ChangePasswordDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/user/queries/handlers/get-user.handler.ts\n            \n            class\n            GetUserHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/user/queries/handlers/index.ts\n            \n            variable\n            QueryHandlers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/user/queries/impl/get-user.query.ts\n            \n            class\n            GetUserQuery\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/user/schemas/reset-password.schema.ts\n            \n            class\n            UserResetPassword\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/user/schemas/reset-password.schema.ts\n            \n            variable\n            UserResetPasswordSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/user/schemas/user.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/common/user/schemas/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/user/services/user.admin.service.ts\n            \n            injectable\n            UserAdminService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/user/services/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/common/user/types/reset-password-data.ts\n            \n            interface\n            ResetPasswordData\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/utils/types/get-time-params.interface.ts\n            \n            interface\n            GetTimeParams\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/utils/utils.service.ts\n            \n            injectable\n            UtilsService\n            \n                5 %\n                (1/19)\n            \n        \n        \n            \n                \n                src/core/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            setupSentry\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            applyConfigs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            applyMiddlewares\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            applySwagger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/configs/constants.ts\n            \n            variable\n            ADMIN_CONTROLLER_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/configs/constants.ts\n            \n            variable\n            DEVELOPMENT_ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/configs/constants.ts\n            \n            variable\n            PRODUCTION_ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/configs/constants.ts\n            \n            variable\n            STAGING_ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/configs/constants.ts\n            \n            variable\n            TEST_ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/decorators/get-user.decorator.ts\n            \n            variable\n            GetUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/dto/signup.dto.ts\n            \n            class\n            SignUpDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/shared/entities/general-response.ts\n            \n            class\n            GeneralResponse\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/shared/entities/user.entity.ts\n            \n            class\n            UserEntity\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/shared/filters/all-exceptions.filter.ts\n            \n            class\n            AllExceptionsFilter\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/shared/guards/admin-auth.guard.ts\n            \n            injectable\n            JwtAdminAuthenticationGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/guards/auth.guard.ts\n            \n            injectable\n            JwtAuthenticationGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/interceptors/logging.interceptor.ts\n            \n            injectable\n            LoggingInterceptor\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/shared/middlewares/ip.middleware.ts\n            \n            injectable\n            IpMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/shared/middlewares/language.middleware.ts\n            \n            injectable\n            LanguageMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/shared/pipes/objectid.pipe.ts\n            \n            injectable\n            ObjectIDPipe\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/shared/types/request.interface.ts\n            \n            interface\n            RequestInterface\n            \n                16 %\n                (1/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @fastify/csrf-protection : ^6.3.0\n        \n            @fastify/helmet : ^10.1.1\n        \n            @fastify/static : ^6.10.2\n        \n            @nestjs/axios : ^3.0.0\n        \n            @nestjs/cache-manager : ^2.0.0\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/cqrs : ^10.0.1\n        \n            @nestjs/jwt : ^10.1.0\n        \n            @nestjs/mongoose : ^10.0.0\n        \n            @nestjs/passport : ^10.0.0\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/platform-fastify : ^10.0.3\n        \n            @nestjs/schedule : ^3.0.1\n        \n            @nestjs/swagger : ^7.0.4\n        \n            @nestjs/terminus : ^10.0.1\n        \n            @nestjs/throttler : ^4.1.0\n        \n            @sentry/node : ^7.59.3\n        \n            axios : ^1.4.0\n        \n            bcrypt : ^5.1.0\n        \n            cache-manager : ^5.2.3\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            joi : ^17.9.2\n        \n            moment : ^2.29.4\n        \n            mongoose : ^7.3.1\n        \n            nestjs-i18n : ^10.3.1\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            random-number : ^0.0.9\n        \n            reflect-metadata : ^0.1.13\n        \n            request-ip : ^3.3.0\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            LANGUAGES   (src/.../languages.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/shared/types/languages.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        LANGUAGES\n                    \n                \n                        \n                            \n                                 EN\n                            \n                        \n                        \n                            \n                                Value : en\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            setupSentry   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setupSentry\n                        \n                    \n                \n            \n            \n                \nsetupSentry(configService: ConfigService)\n                \n            \n\n\n\n\n            \n                \n                    set Sentry configs\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    configService\n                                    \n                                            ConfigService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommonModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CoreModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UtilsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CommonModule\n\n\n\ncluster_CommonModule_imports\n\n\n\ncluster_CommonModule_exports\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UtilsModule\n\n\n\ncluster_UtilsModule_exports\n\n\n\ncluster_UtilsModule_providers\n\n\n\n\nCommonModule\n\nCommonModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCommonModule->AppModule\n\n\n\n\n\nUtilsModule \n\nUtilsModule \n\nUtilsModule  -->\n\nCommonModule->UtilsModule \n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nCommonModule -->\n\nUserModule->CommonModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUtilsModule\n\nUtilsModule\n\nCommonModule -->\n\nUtilsModule->CommonModule\n\n\n\nUserModule -->\n\nUtilsModule->UserModule\n\n\n\nAuthModule -->\n\nUtilsModule->AuthModule\n\n\n\n\n\nUtilsService \n\nUtilsService \n\nUtilsService  -->\n\nUtilsModule->UtilsService \n\n\n\nCommonModule -->\n\nAuthModule->CommonModule\n\n\n\n\n\nAdminLocalStrategy\n\nAdminLocalStrategy\n\nAuthModule -->\n\nAdminLocalStrategy->AuthModule\n\n\n\n\n\nAuthAdminService\n\nAuthAdminService\n\nAuthModule -->\n\nAuthAdminService->AuthModule\n\n\n\n\n\nAuthCommonService\n\nAuthCommonService\n\nAuthModule -->\n\nAuthCommonService->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtAdminRefreshStrategy\n\nJwtAdminRefreshStrategy\n\nAuthModule -->\n\nJwtAdminRefreshStrategy->AuthModule\n\n\n\n\n\nJwtAdminStrategy\n\nJwtAdminStrategy\n\nAuthModule -->\n\nJwtAdminStrategy->AuthModule\n\n\n\n\n\nJwtRefreshStrategy\n\nJwtRefreshStrategy\n\nAuthModule -->\n\nJwtRefreshStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nCommonModule -->\n\nHealthModule->CommonModule\n\n\n\n\n\nUserAdminService\n\nUserAdminService\n\nUserModule -->\n\nUserAdminService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nUtilsService\n\nUtilsService\n\nUtilsModule -->\n\nUtilsService->UtilsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    20 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    24 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ExtendedRawRequet   (src/.../request.interface.ts)\n                        \n                        \n                            GeneralObject   (src/.../general-object.ts)\n                        \n                        \n                            UserDocument   (src/.../user.schema.ts)\n                        \n                        \n                            UserResetPasswordDocument   (src/.../reset-password.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/shared/types/request.interface.ts\n    \n    \n        \n            \n                \n                    \n                    ExtendedRawRequet\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/shared/types/general-object.ts\n    \n    \n        \n            \n                \n                    \n                    GeneralObject\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/common/user/schemas/user.schema.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/common/user/schemas/reset-password.schema.ts\n    \n    \n        \n            \n                \n                    \n                    UserResetPasswordDocument\n                \n            \n            \n                \n                        HydratedDocument\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ADMIN_CONTROLLER_KEY   (src/.../constants.ts)\n                        \n                        \n                            applyConfigs   (src/.../main.ts)\n                        \n                        \n                            applyMiddlewares   (src/.../main.ts)\n                        \n                        \n                            applySwagger   (src/.../main.ts)\n                        \n                        \n                            CommandHandlers   (src/.../index.ts)\n                        \n                        \n                            DEVELOPMENT_ENV   (src/.../constants.ts)\n                        \n                        \n                            EventHandlers   (src/.../index.ts)\n                        \n                        \n                            GetUser   (src/.../get-user.decorator.ts)\n                        \n                        \n                            PRODUCTION_ENV   (src/.../constants.ts)\n                        \n                        \n                            QueryHandlers   (src/.../index.ts)\n                        \n                        \n                            STAGING_ENV   (src/.../constants.ts)\n                        \n                        \n                            TEST_ENV   (src/.../constants.ts)\n                        \n                        \n                            UserResetPasswordSchema   (src/.../reset-password.schema.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/shared/configs/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ADMIN_CONTROLLER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'admin'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DEVELOPMENT_ENV\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'development'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PRODUCTION_ENV\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'production'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        STAGING_ENV\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'staging'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        TEST_ENV\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'test'\n                    \n                \n\n\n        \n    \n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        applyConfigs\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (app) => {\n  app.enableCors();\n  app.useGlobalPipes(\n    new ValidationPipe({\n      transform: true,\n      whitelist: true,\n      forbidNonWhitelisted: true,\n      stopAtFirstError: true,\n    }),\n  );\n  app.enableVersioning({\n    defaultVersion: '1',\n    type: VersioningType.URI,\n  });\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        applyMiddlewares\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (app) => {\n  await app.register(helmet, {\n    contentSecurityPolicy: {\n      directives: {\n        defaultSrc: [`'self'`],\n        styleSrc: [`'self'`, `'unsafe-inline'`],\n        imgSrc: [`'self'`, 'data:', 'validator.swagger.io'],\n        scriptSrc: [`'self'`, `https: 'unsafe-inline'`],\n      },\n    },\n  });\n  await app.register(fastifyCsrf);\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        applySwagger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (app, configService) => {\n  if ([PRODUCTION_ENV, TEST_ENV].includes(configService.get('env'))) {\n    return;\n  }\n\n  const config = new DocumentBuilder()\n    .setTitle('Exchange API')\n    .setDescription('APIs of exchange')\n    .setVersion('1.0')\n    .build();\n\n  const document = SwaggerModule.createDocument(app, config);\n\n  SwaggerModule.setup(configService.get('apiDocRoute'), app, document);\n}\n                    \n                \n\n\n        \n    \n\n    src/common/user/commands/handlers/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CommandHandlers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [SignUpUserHandler, UpdateUserHandler]\n                    \n                \n\n\n        \n    \n\n    src/common/auth/events/handlers/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EventHandlers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  AfterSignInEventHandler,\n  AfterResetPasswordHandler,\n  AfterAdminSignInEventHandler,\n]\n                    \n                \n\n\n        \n    \n\n    src/shared/decorators/get-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data, ctx: ExecutionContext): UserEntity => {\n    const req = ctx.switchToHttp().getRequest();\n\n    return req.user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/common/user/queries/handlers/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        QueryHandlers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [GetUserHandler]\n                    \n                \n\n\n        \n    \n\n    src/common/user/schemas/reset-password.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserResetPasswordSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(UserResetPassword)\n                    \n                \n\n\n        \n    \n\n    src/common/user/schemas/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
